// This script contains useful utility scripts for performing common actions for Enemy Territory Fortress

Util.FlagCarrier = "CLASS.SCOUT";
Util.Sniper = "CLASS.SNIPER";
Util.SniperClass = CLASS.SNIPER;

Util.PlayerClassTable =
{
	CLASS.SCOUT,
	CLASS.SNIPER,
	CLASS.SOLDIER,
	CLASS.DEMOMAN,
	CLASS.MEDIC,
	CLASS.HWGUY,
	CLASS.PYRO,
	CLASS.SPY,
	CLASS.ENGINEER,
	CLASS.CIVILIAN,
};

Util.SniperWeapons =
{
	WEAPON.SNIPERRIFLE,
};

Util.HaveTeam = { false, true, true, false, false };

Util.TeamNames =
{
	{ "", "", "", },
	{ "BLUE", "Blue", "blue",},
	{ "RED", "Red", "red", },
	{ "YELLOW", "Yellow", "yellow", },
	{ "GREEN", "Green", "green", },
};

Util.BotNames =
{
	{
		"", "", "", "",
		"", "", "",
		"","","","",
	},
	{
		"", "blue_scout", "blue_sniper", "blue_soldier",
		"blue_demoman", "blue_medic", "blue_hwguy",
		"blue_pyro","blue_spy","blue_engineer","blue_civilian",
	},
	{
		"", "red_scout", "red_sniper", "red_soldier",
		"red_demoman", "red_medic", "red_hwguy",
		"red_pyro","red_spy","red_engineer","red_civilian",
	},
	{
		"", "yellow_scout", "yellow_sniper", "yellow_soldier",
		"yellow_demoman", "yellow_medic", "yellow_hwguy",
		"yellow_pyro","yellow_spy","yellow_engineer","yellow_civilian",
	},
	{
		"", "green_scout", "green_sniper", "green_soldier",
		"green_demoman", "green_medic", "green_hwguy",
		"green_pyro","green_spy","green_engineer","green_civilian",
	},
};

Util.NoTimeLimit = "timelimit 0";
Util.TimeLimit1 = "timelimit 1";

Util.PrimaryRouteGoalQuery = "FLAG_.*\nCAPPOINT_.*"; // used for map script generation

///////////////////////////////////////////////////////////////////////////////
//
member NumRedFlagCaptures = 0;
member RedFlagState = "returned";

///////////////////////////////////////////////////////////////////////////////
//
member RedFlagHandler = function( _params )
{
	if ( _params.Action == "returned" )
	{
		if ( this.RedFlagState == "pickedup" )
			{ this.NumRedFlagCaptures = this.NumRedFlagCaptures + 1; }

		this.RedFlagState = "returned";
		return;
	}

	if ( _params.Action == "dropped" )
	{
		this.RedFlagState = "dropped";
		return;
	}

	if ( _params.Action == "pickedup" )
	{
		this.RedFlagState = "pickedup";
		return;
	}
};

///////////////////////////////////////////////////////////////////////////////
//
member NumBlueFlagCaptures = 0;
member BlueFlagState = "item_returned";

///////////////////////////////////////////////////////////////////////////////
//
member BlueFlagHandler = function( _params )
{
	if ( _params.Action == "returned" )
	{
		if ( this.BlueFlagState == "pickedup" )
			{ this.NumBlueFlagCaptures = this.NumBlueFlagCaptures + 1; }

		this.BlueFlagState = "returned";
		return;
	}

	if ( _params.Action == "dropped" )
	{
		this.BlueFlagState = "dropped";
		return;
	}

	if ( _params.Action == "pickedup" )
	{
		this.BlueFlagState = "pickedup";
		return;
	}
};

///////////////////////////////////////////////////////////////////////////////
//
member HudTextMsgStatus = false;

///////////////////////////////////////////////////////////////////////////////
//
member HudTextMsgOutput = function( text )
{
	while ( this.HudTextMsgStatus )
	{
		HudTextMsg( Util.GetPlayerEntity(), text );
		sleep( 1 );
	}
};

///////////////////////////////////////////////////////////////////////////////
//
member HudTextMsgOutput2 = function( text, time )
{
	this.HudTextMsgOn( text );

	for ( i = 0 ; i < time ; i = i + 1 )
	{
		if ( Util.Skip )
			{ break; }

		sleep( 1 );
	}

	this.HudTextMsgOff();
};

///////////////////////////////////////////////////////////////////////////////
//
member HudTextMsgTimeout = function( text, time )
{
	thread( this.HudTextMsgOutput2, text, time );
};

///////////////////////////////////////////////////////////////////////////////
//
member HudTextMsgOn = function( text )
{
	this.HudTextMsgStatus = true;
	thread( this.HudTextMsgOutput, text );
};

///////////////////////////////////////////////////////////////////////////////
//
member HudTextMsgOff = function()
{
	this.HudTextMsgStatus = false;
};

///////////////////////////////////////////////////////////////////////////////
//
member DrawSpawns = function()
{
	cached = null;
	.cachedSpawnEntities = {};

	.getSpawnEntity = function(entId) {
		cls = GetEntClass(entId);

		if (cls == CLASS.PLAYERSTART_TEAM1 || cls == CLASS.PLAYERSTART_TEAM2 || cls == CLASS.PLAYERSTART_TEAM3 || cls == CLASS.PLAYERSTART_TEAM4)
		{
			pos = GroundPoint(GetEntPosition(entId));
			top = pos+Vector3(0,0,64);
			textPos = pos+Vector3(0,0,48);
			color = 0;
			displayText = "";
			switch(cls)
			{
				case CLASS.PLAYERSTART_TEAM1:
				{
					color = COLOR.BLUE;
					displayText = "Team1 Spawn";
				}
				case CLASS.PLAYERSTART_TEAM2:
				{
					color = COLOR.RED;
					displayText = "Team2 Spawn";
				}
				case CLASS.PLAYERSTART_TEAM3:
				{
					color = COLOR.YELLOW;
					displayText = "Team3 Spawn";
				}
				case CLASS.PLAYERSTART_TEAM4:
				{
					color = COLOR.GREEN;
					displayText = "Team4 Spawn";
				}
			}

			return {color, displayText, pos, top, textPos};
		}

		return null;
	};

	if (!cached) {
		for ( i = 64; i < 1024; i = i + 1 )
		{
			if (EntityIsValid(i))
			{
				info = this.getSpawnEntity(i);
				if (info) {
					this.cachedSpawnEntities[ tableCount(this.cachedSpawnEntities) ] = info;
				}
			}
		}

		cached = true;
	}

	while(DRAW_SPAWNS) {
		foreach (obj in this.cachedSpawnEntities)
		{
			DrawLine(obj[2],obj[3],obj[0],60);
			DrawText3d(obj[4],obj[1],COLOR.WHITE,60,1000);
		}

		yield();
	}
};
