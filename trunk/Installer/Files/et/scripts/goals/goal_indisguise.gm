// this sole purpose of this goal is to handle bot targeting while in disguise
this.Name = "InDisguise";
this.Parent = "LowLevel";
this.AutoAdd = true;
this.AlwaysRecieveEvents = true;
this.Debug = false;

this.LimitToEntityFlag(ENTFLAG.DISGUISED);

this.Initialize = function()
{
	this.PainInflictor = -1;
};

this.GetPriority = function()
{
	if ( !this.Bot.HasRole(ROLE.INFILTRATOR) ) {
		this.Bot.SetRoles(ROLE.INFILTRATOR);
	}
	this.Priority = 0.1; // so it can exit
	t = this.Bot.GetTarget();
	if (t && t != this.PainInflictor) {
		entClass = GetEntClass(t);
		if ( entClass & CLASS.ANYPLAYER || entClass == 1 || entClass == CLASS.BREAKABLE ) {
			// cs: don't ignore if at a camp spot
			if ( !this.Bot.GetVelocity().IsZero() ) {
				this.Bot.IgnoreTarget(t, this.Bot.ReactionTime + 0.2);
			}
			
			if ( this.Debug ) {
				this.Bot.Say("ignoring: " + GetEntName(t) + " Last Inflictor: " + this.PainInflictor);
			}
		}
		else if ( this.Debug && entClass) {
			this.Bot.Say("targeting: " + GetEntName(t) + " Last Inflictor: " + this.PainInflictor);
		}
	}

	sleep(this.Bot.ReactionTime - 0.1);
};

this.Exit = function()
{
	if ( this.Debug ) { this.Bot.Say("lost disguise"); }
	this.PainInflictor = -1;
	
	if ( this.Bot.HasRole(ROLE.INFILTRATOR) ) {
		this.Bot.ClearRoles(ROLE.INFILTRATOR);
	}
};

this.Events[EVENT.FEEL_PAIN] = function(Inflictor, PreviousHealth, CurrentHealth)
{
	if (this.Bot) {
		this.PainInflictor = Inflictor;
	}
};

