// This script contains functionality to allow fieldops or medic bots to deliver ammo or health to people that request it.

// These parameters are required
this.Name = "DeliverSupplies";	// The name of the goal.
this.Parent = "HighLevel";	// The name of the parent. This setting determines where in the state tree the goal will reside in.
this.KillAndRevive = true;	// Do a quick kill and revive if target health is less than 37

this.AlwaysRecieveEvents = true;

// possible options
this.LimitToClass(CLASS.FIELDOPS, CLASS.MEDIC);
this.DeliverPriority = 0.9;

// states
this.DELIVER_PACKS = 1;
this.KILL_TARGET = 2;
this.SWITCH_TO_SYRINGE = 3;
this.REVIVE_TARGET = 4;
this.CURE_POISON_WITH_NEEDLE = 5;
this.HEAL_WITH_NEEDLE = 6;

this.Initialize = function()
{
	this.PacksToThrow = 3;
	this.Respond = false;
	this.CuringPoisonWithNeedle = false;
	this.HealingWithNeedle = false;
	Util.MapDebugPrint(this.Name + " Initialized", true);
};

this.GetPriority = function()
{
	block( this.Bot.Name + "_deliversupplies" );

	sleep(0.5);
	if ( this.Bot.RevivedTargetEnt ) {
		this.TargetEntity =  this.Bot.RevivedTargetEnt;
		this.Bot.RevivedTargetEnt = null;
		this.Supply = WEAPON.MEDKIT;
		//this.Bot.Say("delivering to " + GetEntName(this.TargetEntity));
		this.Priority = this.DeliverPriority;
	}
};

this.Enter = function()
{
	this.FriendlyFire = GetCvar("g_friendlyfire");
	this.PacksThrown = 0;
	this.TargetPosition = GetEntPosition(this.TargetEntity);
	this.OnTarget = false;

	if ( this.Respond )
	{
		targetName = GetEntName(this.TargetEntity);

		if(this.Supply == WEAPON.AMMO_PACK)
		{
			this.Bot.SayTeam("Coming with Ammo, ^7", targetName, "^5!^2");
		}
		else if(this.Supply == WEAPON.MEDKIT)
		{
			this.Bot.SayTeam("Coming with Health, ^7", targetName, "^5!^2");
		}
	}

	// Set up some finish criteria
	this.AddFinishCriteria(this.TargetEntity,"deleted");
	this.AddFinishCriteria(this.Bot.GetGameEntity(),"not weaponcharged", this.Supply);
	this.AddFinishCriteria(this.TargetEntity,"hasentflag",ENTFLAG.LIMBO);

	this.KillTarget = false;
	if ( this.Supply == WEAPON.MEDKIT && this.FriendlyFire == 1 && this.KillAndRevive == true && this.Bot.HasAmmo(WEAPON.SYRINGE))
	{
		// are they low enough on health?
		hlth = Util.GetEntHealth(this.TargetEntity);
		if ( hlth < 37 ) {
			this.KillTarget = true;
			this.AddFinishCriteria(this.TargetEntity,"health greaterthan",75);
			this.Bot.KillingForRevive = true; // for voice chats
		}
	}

	if ( !this.KillTarget )
	{
		this.AddFinishCriteria(this.TargetEntity,"health lessthan",1);
	}

	this.DynamicGotoThread = this.ForkThread(this.DynamicGoto);
};

this.Exit = function()
{
	if ( this.DynamicGotoThread )
		{ this.KillThread(this.DynamicGotoThread); }

	this.TargetEntity = null;
	this.TargetPosition = null;
	this.DelayNextResponse = false;
	this.OnTarget = false;
	this.Bot.KillingForRevive = false; // allow appropriate voice chats again
	this.CuringPoisonWithNeedle = false;
	this.HealingWithNeedle = false;
};

this.DynamicGoto = function()
{
	if(this.Goto(this.TargetPosition, 128.f) == EVENT.PATH_SUCCESS)
	{
		this.OnTarget = true;
	}
	else
	{
		this.Finished();
	}
};

this.CurePoisonWithNeedle = function()
{
	if ( !this.TargetEntity || !GetEntFlags(this.TargetEntity, ENTFLAG.POISONED) ) {
		return false;
	}

	mod = GetModName();
	switch(mod)
	{
		case "nitmod":
		{
			if ( GetCvar("g_poison") == 1 ) {
				return true;
			}
		}
		case "noquarter":
		{
			return true;
		}
		default:
		{
			return false;
		}
	}

	return false;
};

this.CanHealWithNeedle = function()
{
	if ( !this.TargetEntity ) {
		return false;
	}

	// todo: check all mods for the cvar. etpub and nq for sure have g_medics. and probably nitmod, chaos and silentmod
	if ( !(GetCvar("g_medics") & 64) ) {
		return false;
	}

	haTable = {};
	GetEntHealthAndArmor(this.TargetEntity, haTable);

	// from etpub and nq code. assuming other mods are the same.
	if ( haTable.Health > haTable.MaxHealth * 0.25 ) {
		return false;
	}

	return true;
};

this.Update = function()
{
	counter = 0;

	while(1)
	{
		entPos = GetEntPosition(this.TargetEntity);

		if ( entPos.IsZero() )
			{ this.Finished(); }

		d = DistanceBetween(entPos,this.TargetPosition);
		if( d > 128 && d < 500)
		{
			if ( this.DynamicGotoThread )
				{ this.KillThread(this.DynamicGotoThread); }
			this.TargetPosition = entPos;
			this.DynamicGotoThread = this.ForkThread(this.DynamicGoto);
		}
		else if ( d > 500 )
		{
			//stop chasing
			this.Finished();
		}

		if ( this.OnTarget )
		{
			this.Priority = 2.0;

			// aim at target while waiting for weapon change
			pos = GetEntEyePosition(this.TargetEntity);
			this.AddAimRequest(Priority.High, "position",pos);

			hasNeedle = Util.HasAmmoForWeapon(this.Bot, WEAPON.SYRINGE) > 0;

			if ( hasNeedle && this.CanHealWithNeedle() ) {
				this.State = this.SWITCH_TO_SYRINGE;
				this.HealingWithNeedle = true;
			}
			else if ( hasNeedle && this.CurePoisonWithNeedle() ) {
				this.State = this.SWITCH_TO_SYRINGE;
				this.CuringPoisonWithNeedle = true;
			}
			else if ( !this.KillTarget || !hasNeedle ) {
				this.State = this.DELIVER_PACKS;
				this.AddWeaponRequest(Priority.High, this.Supply);
				this.BlockForWeaponChange(this.Supply);
			}
			else {
				this.State = this.KILL_TARGET;
			}

			this.TimeOnTarget = 0;
			while(1)
			{
				switch(this.State)
				{
					case this.DELIVER_PACKS:
					{
						this.UpdateDeliverPacks();
					}
					case this.KILL_TARGET:
					{
						this.UpdateKillTarget();
					}
					case this.SWITCH_TO_SYRINGE:
					{
						this.UpdateSwitchToSyringe();
					}
					case this.REVIVE_TARGET:
					{
						this.UpdateReviveTarget();
					}
					case this.CURE_POISON_WITH_NEEDLE:
					{
						this.UpdateCurePoisonWithNeedle();
					}
					case this.HEAL_WITH_NEEDLE:
					{
						this.UpdateHealWithNeedle();
					}
					default:
					{
						this.Finished();
					}
				}
				yield();
				this.TimeOnTarget += 2; // each update func has a yield too.
			}

			this.Finished();
		}
		else
		{
			d = DistanceBetween(entPos, this.Bot.GetPosition());
			if ( d < 70 )
			{
				counter += 1;
				if ( counter > 30 )
				{
					if ( this.DynamicGotoThread )
					{
						this.KillThread(this.DynamicGotoThread);
						this.DynamicGotoThread = null;
					}
					this.OnTarget = true;
				}
			}
			else
			{
				counter = 0;
			}
		}

		yield();
	}
};

this.UpdateDeliverPacks = function()
{
	if ( this.PacksThrown >= this.PacksToThrow || !this.Bot.IsWeaponCharged(this.Supply) ) {
		this.Finished();
	}

	if ( this.Bot.GetCurrentWeapon() != this.Supply ) {
		this.AddWeaponRequest(Priority.High, this.Supply);
		this.BlockForWeaponChange(this.Supply);
	}

	pos = GetEntEyePosition(this.TargetEntity);
	if (pos)
	{
		//move towards them while giving packs
		this.AddAimRequest(Priority.High, "position",pos);
		this.Bot.MoveTowards(pos);
		this.Bot.HoldButton(BTN.ATTACK1, 0.25);
	}
	else
	{
		this.Finished();
	}
	sleep(0.25);
};

this.UpdateKillTarget = function()
{
	hlth = Util.GetEntHealth(this.TargetEntity);
	if ( hlth < 1 ) {
		this.Bot.KilledForRevive = true; // for voice chats
		this.State = this.SWITCH_TO_SYRINGE;
		return;
	}

	// give them 5 seconds to complete
	if ( this.TimeOnTarget > 100 ) {
		this.Finished();
	}

	pos = GetEntEyePosition(this.TargetEntity);
	if (pos)
	{
		// shoot at their head
		this.AddAimRequest(Priority.High, "position",pos);
		this.Bot.MoveTowards(pos);
		this.Bot.HoldButton(BTN.ATTACK1, 0.25);
	}
	else
	{
		this.Finished();
	}
	yield();
};

this.UpdateSwitchToSyringe = function()
{
	this.AddWeaponRequest(Priority.High, WEAPON.SYRINGE);
	this.BlockForWeaponChange(WEAPON.SYRINGE);

	if ( this.CuringPoisonWithNeedle ) {
		this.State = this.CURE_POISON_WITH_NEEDLE;
	}
	else if ( this.HealingWithNeedle ) {
		this.State = this.HEAL_WITH_NEEDLE;
	}
	else {
		this.State = this.REVIVE_TARGET;
	}
};

this.UpdateReviveTarget = function()
{
	hlth = Util.GetEntHealth(this.TargetEntity);
	if ( hlth > 0 ) {
		this.State = this.DELIVER_PACKS;

		// move off them
		pos = GetEntEyePosition(this.TargetEntity) + Vector3(48,48,0);
		if ( pos )
		{
			this.Goto(pos);
		}
		else
		{
			this.Finished();
		}

		return;
	}

	pos = GetEntEyePosition(this.TargetEntity);
	if (pos)
	{
		this.AddAimRequest(Priority.High, "position",pos);
		this.Bot.MoveTowards(pos);
		this.Bot.HoldButton(BTN.ATTACK1, 0.25);
	}
	else
	{
		this.Finished();
	}
	yield();
};

this.UpdateCurePoisonWithNeedle = function()
{
	pos = GetEntEyePosition(this.TargetEntity);
	if (pos && this.TargetEntity && GetEntFlags(this.TargetEntity, ENTFLAG.POISONED))
	{
		this.AddAimRequest(Priority.High, "position",pos);
		this.Bot.MoveTowards(pos);
		this.Bot.PressButton(BTN.ATTACK1);
	}
	else
	{
		this.Finished();
	}

	yield();
};

this.UpdateHealWithNeedle = function()
{
	// give them 5 seconds to complete
	if ( this.TimeOnTarget > 100 ) {
		this.Finished();
	}

	pos = GetEntPosition(this.TargetEntity);
	if (pos && this.TargetEntity)
	{
		this.AddAimRequest(Priority.High, "position",pos + Vector3(0,0,32));
		this.Bot.MoveTowards(pos);
		this.Bot.PressButton(BTN.ATTACK1, BTN.SPRINT);
	}
	else
	{
		this.Finished();
	}

	yield();
};

this.Events[EVENT.TEAM_VOICE] = function(whoSaidIt, macroId)
{
	if(this.IsActive() || this.DelayNextResponse)
	{
		return;
	}

	if ( GetEntFlags(whoSaidIt, ENTFLAG.DEAD ) || this.Bot.DistanceTo(whoSaidIt) > 1500 )
	{
		return;
	}

	if(macroId == VOICE.NEED_AMMO &&
		this.Bot.GetClass() == CLASS.FIELDOPS &&
		this.Bot.IsWeaponCharged(WEAPON.AMMO_PACK))
	{
		this.Supply = WEAPON.AMMO_PACK;
		this.TargetEntity = whoSaidIt;

		this.Priority = this.DeliverPriority;
		this.DelayNextResponse = true;
		sleep(10);
		this.DelayNextResponse = false;

		// if we haven't activated by now, don't bother
		if(!this.IsActive())
		{
			this.Priority = 0;
		}
	}
	else if(macroId == VOICE.NEED_MEDIC &&
		 this.Bot.GetClass() == CLASS.MEDIC &&
				this.Bot.IsWeaponCharged(WEAPON.MEDKIT))
	{
		this.Supply = WEAPON.MEDKIT;
		this.TargetEntity = whoSaidIt;

		this.Priority = this.DeliverPriority;
		this.DelayNextResponse = true;
		sleep(10);
		this.DelayNextResponse = false;

		// if we haven't activated by now, don't bother
		if(!this.IsActive())
		{
			this.Priority = 0;
		}
	}
};

this.Events[EVENT.WEAPON_FIRE] = function(weaponId, projectileEntity)
{
	if(weaponId == this.Supply)
	{
		this.PacksThrown += 1;
	}
 };
