// This script determines if a bot needs to change classes

// These parameters are required
this.Name = "ClassManager";
this.Parent = "LowLevel";
this.AutoAdd = true;
this.AlwaysRecieveEvents = true;
this.OnlyWhileDead = true; // if set to false, they will /kill for class changes

this.GetPriority = function()
{
	if ( TestMapOn || DisableClassManager || TestBot ) {
		sleep(5); // could block(0), but this allows it to resume on var change
		return;
	}
	
	sleep(1); // at map start all bots are returning class.soldier, so delay it a bit.

	// cs: let them /kill in warmup so transitions from snipe or panzer maps wont take forever for correct classes to be used
	if ( !this.OnlyWhileDead || GetGameState() != "Playing" ) {
		newClass = ClassManager.EvalClassChange(this.Bot);

		if (newClass) {
			// cs: this must come before the class change call to prevent them from /killing next spawn
			if (this.TapOut) {
				this.TapOut = false;
				this.Bot.ExecCommand("kill");
			}
			
			this.Bot.ChangeClass(newClass);
		}
	}

	sleep(4);
};

this.Events[EVENT.DEATH] = function(attacker, mod)
{
	if ( TestMapOn || DisableClassManager || TestBot ) {
		return;
	}

	this.TapOut = true;
	newClass = ClassManager.EvalClassChange(this.Bot);
	if (newClass) {
		this.Bot.ExecCommand("kill");
		this.Bot.ChangeClass(newClass);
	}
};
