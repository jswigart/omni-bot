// This script contains functionality to allow bots to toss airstrikes from given waypoints

// These parameters are required
this.Name = "GRENADE";		// The name of the goal.
this.Parent = "HighLevel";		// The name of the parent. This setting determines where in the state tree the goal will reside in.
this.SkipGetPriorityWhenActive = true;

// These parameters are optional
//this.LimitToWeapon( WEAPON.ALLY_GRENADE, WEAPON.AXIS_GRENADE );

this.Initialize = function()
{
	this.Bot.QueryGoalsTable = table();
};

this.Enter = function()
{
	if (this.MapGoal.HasEntity)
	{
		if (this.MapGoal.TraceEntity)
		{
			this.TargetEntity = this.MapGoal.TraceEntity;
		}
		else
		{
			goal = GetGoal(this.MapGoal.TargetGoal);

			if ( goal )
			{
				this.TargetEntity = goal.GetEntity();
			}
			if ( !this.TargetEntity )
			{
				this.Finished();
			}
		}
		this.AddFinishCriteria(this.TargetEntity,"hasentflag",ENTFLAG.DEAD);
	}

	if ( this.MapGoal.PrimeGrenade > 3 )
	{
		this.MapGoal.PrimeGrenade = 3;
	}

	if (!this.MarkInProgress(this.MapGoal)) {
		this.BlackboardDelay(5, this.MapGoal);
		this.Finished();
	}

	if ( this.Bot.GetTeam() == TEAM.ALLIES )
	{
		this.weapon = WEAPON.ALLY_GRENADE;
	}
	else if ( this.Bot.GetTeam() == TEAM.AXIS )
	{
		this.weapon = WEAPON.AXIS_GRENADE;
	}
};

this.Exit = function()
{
	if ( this.MapGoal.Stance == "crouch" )
	{
		this.Bot.ReleaseButton(BTN.CROUCH);
	}

	this.TargetEntity = null;
};

this.GetPriority = function()
{
	while(1)
	{
		if ( Util.HasAmmoForWeapon(this.Bot, WEAPON.ALLY_GRENADE) || Util.HasAmmoForWeapon(this.Bot, WEAPON.AXIS_GRENADE) )
		{
			count = this.QueryGoals(this.Bot.QueryGoalsTable,0xd988d8fd /* GRENADE */);
			if ( count > 0 )
			{
				foreach ( goal in this.Bot.QueryGoalsTable )
				{
					if (goal.TraceEntity)
					{
						if (!EntityIsValid(goal.TraceEntity) || GetEntFlags(goal.TraceEntity, ENTFLAG.DEAD))
						{
							continue;
						}
					}
					else if (goal.TargetGoal)
					{
						g = GetGoal(goal.TargetGoal);
						if (!g) {
							continue;
						}
						ent = g.GetEntity();
						if (!ent || GetEntFlags(ent, ENTFLAG.DEAD))
						{
							continue;
						}
					}
					else if (goal.HasEntity)
					{
						continue;
					}

					this.MapGoal = goal;
					this.Priority = goal.GetGoalPriority(this.Bot);
					break;
				}
			}

			tableClear(this.Bot.QueryGoalsTable);
		}

		sleep(2);
	}
};

this.Update = function()
{
	if ( this.RouteTo(this.MapGoal) == EVENT.PATH_SUCCESS )
	{
		if ( !Util.HasAmmoForWeapon(this.Bot,this.weapon) )
		{
			this.Finished();
		}
		if (!this.MarkInUse(this.MapGoal)) {
			this.BlackboardDelay(5, this.MapGoal);
			this.Finished();
		}

		this.Bot.StuckPos = null;

		if ( this.MapGoal.Stance == "crouch" )
		{
			this.Bot.HoldButton(BTN.CROUCH, 999);
		}

		this.AddAimRequest(Priority.High, "facing", this.MapGoal.Facing);
		this.AddWeaponRequest(Priority.High, this.weapon);
		this.BlockForWeaponChange( this.weapon );
		sleep( .25 );
		this.Priority = 2.0; // don't let other goals interrupt it

		counter = 0;
		while ( (!this.TargetEntity || !GetEntFlags( this.TargetEntity, ENTFLAG.DEAD )) && Util.HasAmmoForWeapon(this.Bot,this.weapon) )
		{
			if (counter > 0) {
				sleep(1.5);
			}
			if ( MAP_TALK && this.Bot.GetNearestAlly(CAT.PLAYER) && RandInt(0,5) < 1 )
			{
				this.Bot.SayVoice( VOICE.FIRE_IN_THE_HOLE );
			}
			if ( this.MapGoal.PrimeGrenade > 1 )
			{
				this.Bot.HoldButton( BTN.ATTACK1, this.MapGoal.PrimeGrenade );
				sleep( this.MapGoal.PrimeGrenade );
			}
			else
			{
				this.Bot.PressButton( BTN.ATTACK1 );
			}
			sleep(0.4);

			counter += 1;
			if (this.MapGoal.Count)
			{
				if ( counter >= this.MapGoal.Count)
				{
					this.BlackboardDelay(30, this.MapGoal);
					this.Finished();
				}
			}
		}
	}
	else
	{
		this.BlackboardDelay(10, this.MapGoal);
		Util.ScriptDebugPrint(this.MapGoal.GetName(), "pathfailed");
	}

	this.Finished();
};

