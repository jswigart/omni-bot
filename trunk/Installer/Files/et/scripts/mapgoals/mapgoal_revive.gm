this.GoalType = "REVIVE";
this.Version = 1;
this.DefaultPriority = 1.0;
this.DontSave = true;
this.UnderWaterRevive = null;
this.Radius = 64;
this.DynamicPosition = true;
this.DynamicOrientation = true;
this.Range = 2000; // this matches value for compass icon in SDK

//////////////////////////////////////////////////////////////////////////

this.UpgradeVersion = function(Props)
{
	// version 0 is string,string key/values from the old waypoint format
	if(Props.Version==0)
	{
		// Version 1 Schema, upgrade from waypoint format
		Props.Version = 1;
	}
	else if(Props.Version == this.Version)
	{
		// default to disabled, until the entity stops moving.
		this.DisableGoal(true);

		// store the position. velocity check on injured ents is bad
		this.EntPosition = GetEntPosition(this.GetEntity());
	}
};

//////////////////////////////////////////////////////////////////////////

this.CanReviveUnderWater = function()
{
	if ( this.UnderWaterRevive == null )
	{
		w = GetWeapon(WEAPON.SYRINGE);
		this.UnderWaterRevive = w.PrimaryFire.WaterProof;
	}

	return this.UnderWaterRevive;
};

//////////////////////////////////////////////////////////////////////////

this.Update = function()
{
	sleep(1); // give it some time to update internally
	goalEnt = this.GetEntity();
	if ( (this.CanReviveUnderWater() == false && (GetPointContents(this.GetPosition()) & CONTENT.WATER))
			|| (!GetEntFlags(goalEnt, ENTFLAG.DEAD) && Util.GetEntHealth(goalEnt) > 0)
			|| GetEntFlags(goalEnt, ENTFLAG.LIMBO) )
	{
		this.SetAvailable(0, false);
		this.SetRemoveFlag(true);
	}
	else
	{
		if(this.IsDisabled())
		{
			entPos = GetEntPosition(this.GetEntity());
			if(this.EntPosition == entPos)
			{
				this.DisableGoal(false);
				// cs: actually can't block here or the goal will never get removed.
				//block(0);
			}
			else
			{
				this.EntPosition = entPos;
			}
		}
	}
	yield();
};


