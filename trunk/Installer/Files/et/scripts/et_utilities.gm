// This script contains useful game specific utility functions.

///////////////////////////////////////////////////////////////////////////////
// Set up some core utility module with game specific stuff.
Util.PlayerClassTable =
{
	CLASS.SOLDIER,
	CLASS.MEDIC,
	CLASS.ENGINEER,
	CLASS.FIELDOPS,
	CLASS.COVERTOPS,
};
if (GetModName() == "etblight")
{
	Util.PlayerClassTable[5] = CLASS.SCIENTIST;
	Util.PlayerClassTable[6] = CLASS.SUPER_SOLDIER;
}

Util.AllTeamPlayers = 32;

Util.TeamBotChangeClassExecuted = 0;

// offset for converted waypoint goals
Util.WaypointGoalOffset = Vector3(0,0,-24);

Util.AllTeams = (1 << TEAM.AXIS) | (1 << TEAM.ALLIES);

Util.AllClasses = 0;
foreach (cls in Util.PlayerClassTable)
{
	Util.AllClasses |= 1 << cls;
}

Util.FlagCarrier = "CLASS.ENGINEER";
Util.Sniper = "CLASS.COVERTOPS"; // should this be in quotes? leaving for now
Util.SniperClass = CLASS.COVERTOPS;

Util.PrimaryRouteGoalQuery = "BUILD_.*\nPLANT_.*\nFLAG_.*\nCHECKPOINT_.*";

Util.SniperWeapons =
{
	//these values are for bot.HasWeapon
	WEAPON.FG42_SCOPE,
	WEAPON.K43_SCOPE,
	WEAPON.GARAND_SCOPE,
};

Util.TeamSniperWeapons =
{
	//these values are for bot.ChangePrimaryWeapon
	AXIS =
	{
		WEAPON.K43,
	},

	ALLIES =
	{
		WEAPON.GARAND,
	},
};
if (GetModName() != "noquarter") {
	Util.TeamSniperWeapons["ALLIES"][1] = WEAPON.FG42;
}
if (GetModName() == "etpub" && GetCvar("g_etnamFlags") > 0) {
	Util.AddToTable(Util.SniperWeapons, WEAPON.SAK47SCOPED);
	Util.TeamSniperWeapons["AXIS"][1] = WEAPON.SAK47;
} else {
	Util.TeamSniperWeapons["AXIS"][1] = WEAPON.FG42;
}
if (GetModName() == "etblight") {
	Util.AddToTable(Util.SniperWeapons, WEAPON.PROTO);
	Util.AddToTable(Util.SniperWeapons, WEAPON.MP40SS);
	// TeamSniperWeapons are only for COVERTOPS
	Util.TeamSniperWeapons["AXIS"][2] = WEAPON.PROTO;
	Util.TeamSniperWeapons["ALLIES"][2] = WEAPON.PROTO;
}
if (GetModName() == "bastardmod") {
	Util.AddToTable(Util.SniperWeapons, WEAPON.BASTARD_FG42_SCOPE);
}

Util.TeamSideArms =
{
	AXIS =
	{
		WEAPON.LUGER,
		WEAPON.LUGER_SILENCED,
		WEAPON.LUGER_AKIMBO,
		WEAPON.LUGER_AKIMBO_SILENCED,
		WEAPON.REVOLVER,
	},

	ALLIES =
	{
		WEAPON.COLT,
		WEAPON.COLT_SILENCED,
		WEAPON.COLT_AKIMBO,
		WEAPON.COLT_AKIMBO_SILENCED,
		WEAPON.REVOLVER,
	},
};

Util.IndexedSniperWeapons = {};
foreach (i in Util.SniperWeapons)
{
	Util.IndexedSniperWeapons[i] = 1;
}

Util.CanBotSnipe = function(bot)
{
	foreach ( weapon in Util.SniperWeapons ) {
		if ( bot.HasWeapon(weapon) ) {
			return true;
		}
	}
	return false;
};

Util.HaveTeam = { false, true, true, false, false };

Util.NoTimeLimit = "timelimit 0";
Util.TimeLimit1 = "timelimit 1";

// wtf? deprecate!
Util.TeamNames =
{
	{ "", "", "" },
	{ "AXIS", "Axis", "axis" },
	{ "ALLIES", "Allies", "allies" },
};

// what's this for?
Util.BotNames =
{
	{
		"", "", "", "",
		"", "",
	},
	{
		"", "axis_soldier", "axis_medic", "axis_engineer",
		"axis_fieldops", "axis_covertops",
	},
	{
		"", "allies_soldier", "allies_medic", "allies_engineer",
		"allies_fieldops", "allies_covertops",
	},
};

// debug string color
Util.DebugColorString = "^b";

///////////////////////////////////////////////////////////////////////////////

member numallies = 0;
member numaxis = 0;

///////////////////////////////////////////////////////////////////////////////
// store time at start of map since GetTime() is server uptime. set in PostMapLoad
member MapStartTime = 0.0;

member GetTimeElapsed = function()
{
	t = GetTime();
	return t - ETUtil.MapStartTime;
};

///////////////////////////////////////////////////////////////////////////////
// todo: make generic with a Util.GenericGoals table
member ClearMainGoals = function()
{
	SetAvailableMapGoals( TEAM.ALLIES, false, "BUILD.*" );
	SetAvailableMapGoals( TEAM.AXIS, false, "BUILD.*" );
	SetAvailableMapGoals( TEAM.ALLIES, false, "PLANT.*" );
	SetAvailableMapGoals( TEAM.AXIS, false, "PLANT.*" );
	SetAvailableMapGoals( TEAM.ALLIES, false, "MOUNTMG42.*" );
	SetAvailableMapGoals( TEAM.AXIS, false, "MOUNTMG42.*" );
	SetAvailableMapGoals( TEAM.ALLIES, false, "MOVER.*" );
	SetAvailableMapGoals( TEAM.AXIS, false, "MOVER.*" );
	SetAvailableMapGoals( TEAM.ALLIES, false, "CHECKPOINT.*" );
	SetAvailableMapGoals( TEAM.AXIS, false, "CHECKPOINT.*" );
	SetAvailableMapGoals( TEAM.ALLIES, false, "FLAG.*" );
	SetAvailableMapGoals( TEAM.AXIS, false, "FLAG.*" );
	SetAvailableMapGoals( TEAM.ALLIES, false, "AMMOCAB.*" );
	SetAvailableMapGoals( TEAM.AXIS, false, "AMMOCAB.*" );
	SetAvailableMapGoals( TEAM.ALLIES, false, "HEALTHCAB.*" );
	SetAvailableMapGoals( TEAM.AXIS, false, "HEALTHCAB.*" );
};

///////////////////////////////////////////////////////////////////////////////
// todo: make generic with a Util.SecondaryGoals table
member ClearSecondaryGoals = function()
{
	SetAvailableMapGoals( TEAM.ALLIES, false, "HEALTH.*" );
	SetAvailableMapGoals( TEAM.AXIS, false, "HEALTH.*" );
	SetAvailableMapGoals( TEAM.ALLIES, false, "AMMO.*" );
	SetAvailableMapGoals( TEAM.AXIS, false, "AMMO.*" );
	SetAvailableMapGoals( TEAM.ALLIES, false, "REPAIRMG42.*" );
	SetAvailableMapGoals( TEAM.AXIS, false, "REPAIRMG42.*" );
	SetAvailableMapGoals( TEAM.ALLIES, false, "PLANTMINE.*" );
	SetAvailableMapGoals( TEAM.AXIS, false, "PLANTMINE.*" );
	SetAvailableMapGoals( TEAM.ALLIES, false, "MOBILEMG42.*" );
	SetAvailableMapGoals( TEAM.AXIS, false, "MOBILEMG42.*" );
	SetAvailableMapGoals( TEAM.ALLIES, false, ".*ARTILLERY.*" );
	SetAvailableMapGoals( TEAM.AXIS, false, ".*ARTILLERY.*" );
};

///////////////////////////////////////////////////////////////////////////////
//
member CheckVehiclePathFlag = true;

///////////////////////////////////////////////////////////////////////////////
//
member CheckVehiclePath = function( _params )
{
	if ( !CheatsEnabled() )
	{
		print("^1cheats must be enabled to use this command");
		print("type /devmap", GetMapName(), "in console");
		return;
	}

	goalname = _params[ 0 ];
	goal = GetGoal( goalname );

	if ( !goal )
	{
		print( "CheckVehiclePath: No such goal" );
		return;
	}

	if ( goal.IsAvailable( TEAM.ALLIES ) )
	{
		print("Allies objective");
		team = TEAM.ALLIES;
		botname = "allies_engineer";
	}
	else
	{
		if ( goal.IsAvailable( TEAM.AXIS ) )
		{
			print("Axis objective");
			team = TEAM.AXIS;
			botname = "axis_engineer";
		}
		else
		{
			print( "CheckVehiclePath: Goal:", goalname, "not available" );
			return;
		}
	}

	Util.CheckVehiclePathFlag = true;
	SetAvailableMapGoals( team, false, ".*" );
	SetAvailableMapGoals( team, true, goalname );
	AddBot( team, CLASS.ENGINEER, botname );

	goalname2 = _params[ 1 ];
	SetAvailableMapGoals( team, true, goalname2 );
	goal2 = GetGoal( goalname2 );
	entity2 = goal2.GetEntity();
	vehiclestats = {};
	GetEntHealthAndArmor( entity2, vehiclestats );

	if ( typeId( _params[ 2 ] ) == 0 )
		{ sleeptime = 2; }
	else
		{ sleeptime = _params[ 2 ]; }

	print( "Started checking vehicle path for:", goalname2 );

	if ( vehiclestats.Health <= 0 )
		{ EntityKill( entity2 ); }

	while ( Util.CheckVehiclePathFlag )
	{
		while ( vehiclestats.Health <= 0 && Util.CheckVehiclePathFlag )
		{
			GetEntHealthAndArmor( entity2, vehiclestats );
			yield();
		}

		if ( !Util.CheckVehiclePathFlag )
			{ break; }

		sleep( sleeptime );
		EntityKill( entity2 );
		SetAvailableMapGoals( team, false, ".*" );
		SetAvailableMapGoals( team, true, goalname );
		SetAvailableMapGoals( team, true, goalname2 );
	}

	print( "Finished checking vehicle path for:", goalname2 );
};

///////////////////////////////////////////////////////////////////////////////
//
member CheckVehiclePathOff = function()
{
	Util.CheckVehiclePathFlag = false;
};

///////////////////////////////////////////////////////////////////////////////
//
member BuildVehiclePathFlag = true;

///////////////////////////////////////////////////////////////////////////////
//
member BuildVehiclePath = function( _params )
{
	if ( !CheatsEnabled() )
	{
		print("^1cheats must be enabled to use this command");
		print("type /devmap", GetMapName(), "in console");
		return;
	}

	goalname = _params[ 0 ];
	goal = GetGoal( goalname );

	if ( !goal )
	{
		print( "BuildVehiclePath: No such goal:", goalname );
		return;
	}

	this.BuildVehiclePathFlag = true;

	goalname2 = _params[ 1 ];
	goal2 = GetGoal( goalname2 );
	entity2 = goal2.GetEntity();
	vehiclestats = {};
	GetEntHealthAndArmor( entity2, vehiclestats );

	if ( typeId( _params[ 2 ] ) == 0 )
		{ sleeptime = 2; }
	else
		{ sleeptime = _params[ 2 ]; }

	print( "Started build vehicle path for:", goalname2 );

	if ( vehiclestats.Health <= 0 )
		{ EntityKill( entity2 ); }

	while ( this.BuildVehiclePathFlag )
	{
		while ( vehiclestats.Health <= 0 && this.BuildVehiclePathFlag )
		{
			GetEntHealthAndArmor( entity2, vehiclestats );
			yield();
		}

		if ( !this.BuildVehiclePathFlag )
			{ break; }

		sleep( sleeptime );
		EntityKill( entity2 );
	}

	print( "Finished buidling vehicle path for:", goalname2 );
};

///////////////////////////////////////////////////////////////////////////////
//
member BuildVehiclePathOff = function()
{
	this.BuildVehiclePathFlag = false;
};

///////////////////////////////////////////////////////////////////////////////
//
member WarpTo = function( _params )
{
	if ( !CheatsEnabled() )
	{
		print("^1cheats must be enabled to use this command");
		print("type /devmap", GetMapName(), "in console");
		return;
	}

	pos = null;

	if ( typeName( _params[0] ) == "float" || typeName( _params[0] ) == "int"  ) // try wp guid first
	{
		wpguid = ToInt(_params[0]);
		pos = Util.GetWpGUIDPosition(wpguid);

		if ( pos )
		{
			pos += Vector3(0,0,24);
		}
	}
	else if ( typeName( _params[0] ) == "string" )
	{
		goalname = _params[0];
		goal = GetGoal( goalname );

		if ( goal )
		{
			pos = goal.GetPosition() + Vector3(0,0,24);
		}
		else // try wp name
		{
			wp = Util.WpNameInfo(_params[0]);
			if ( wp && wp.position )
			{
				pos = wp.position + Vector3(0,0,24);
			}
			else // try paththrough
			{
				wpTable = {};
				Wp.GetAllWaypoints(wpTable);
				foreach ( wp in wpTable )
				{
					foreach ( flag && name in wp.property )
					{
						if ( flag == "paththrough" && name.Right(_params[0].Length() + 1) == ":" + _params[0] ){
							pos = wp.position;
						}
					}
				}
			}
		}
	}
	else
		{ print( "^1ETUtil.WarpTo: Invalid parameter!" ); }

	if ( pos )
	{
		s = "setviewpos " + pos[0] + " " + pos[1] + " " + pos[2] + " " + " 0";
		print(s);
		ExecCommandOnClient(GetLocalEntity(), s);
	}
	else
		{ print( "^1ETUtil.Warpto: Invalid goal name, waypoint name, waypoint UID or paththrough name!^2" ); }
};

member WarpTestBot = function( _params )
{
	if ( !CheatsEnabled() )
	{
		print("^1cheats must be enabled to use this command");
		print("type /devmap", GetMapName(), "in console");
		return;
	}

	b = Util.GetBotByName("testbot");

	if ( !b )
	{
		print("^1no testbot found");
		return;
	}

	localEnt = GetLocalEntity();

	if ( _params[0] )
	{
		wp = Util.WpNameInfo(_params[0]);
		if ( wp.position )
		{
			wp.position += Vector3(0,0,24);
			s = "setviewpos " + wp.position[0] + " " + wp.position[1] + " " + wp.position[2] + " " + " 0";
		}
		else
		{
			print( "^1ETUtil.WarpTestBot: Invalid waypoint name^2");
		}
	}
	else
	{
		pos = GetEntPosition(GetLocalEntity());
		if ( pos )
		{
			pos = pos + Vector3(100,0,24);
			s = "setviewpos " + pos[0] + " " + pos[1] + " " + pos[2] + " " + " 0";
		}
		else
		{
			print( "^1ETUtil.WarpTestBot: Unable to get local position^2");
		}
	}

	if (s)
	{
		print(s);
		ExecCommandOnClient(localEnt, s);
		yield();
		ExecCommandOnClient(b.GetGameEntity(), s);
		yield();yield();
		ExecCommandOnClient(localEnt, "say_team bot come");
	}
};

///////////////////////////////////////////////////////////////////////////////
//
member WarpAnyBot = function(_params)
{
	if ( !CheatsEnabled() )
	{
		print("^1cheats must be enabled to use this command");
		print("type /devmap", GetMapName(), "in console");
		return;
	}

	if ( _params[0] ) {
		foundMatch = null;

		foreach ( id and bot in BotTable ) {
			n = bot.Name;
			if ( n.Find(_params[0])!= -1 ) {
				foundMatch = bot;
				break;
			}
		}

		if (foundMatch) {
			// can't warp if dead or limbo
			if ( foundMatch.Health < 1 || foundMatch.HasEntityFlag(ENTFLAG.LIMBO) ) {
				print("^1bot must be alive to warp!");
				return;
			}

			pos = GetEntPosition(GetLocalEntity());
			if (pos) {
				pos = pos + Vector3(0,0,24);
				s = "setviewpos " + pos[0] + " " + pos[1] + " " + pos[2] + " " + " 0";
			}

			if (s) {
				// disable the bot while it's getting ready to warp
				foundMatch.Enable(false);
				ExecCommandOnClient(foundMatch.GetGameEntity(), s);
				sleep(2);
				foundMatch.Enable(true);
				return;
			}
		}

		print("^1no bot found with the name ", _params[0]);
	}
	else {
		print("^1/bot wab requires a partial or full bot name");
	}
};

///////////////////////////////////////////////////////////////////////////////
//
member WarpToGoalOffset = function( _params )
{
	if ( !CheatsEnabled() )
	{
		print("^1cheats must be enabled to use this command");
		print("type /devmap", GetMapName(), "in console");
		return;
	}

	goalname = _params[0];
		goal = GetGoal( goalname );
	offset = Vector3( _params[ 1 ], _params[ 2 ], _params[ 3 ] );

		if ( goal )
		{
				goalpos = GetEntityWorldSpace( goal.GetEntity(), offset);
				s = "setviewpos " + goalpos[0] + " " + goalpos[1] + " " + goalpos[2] + " " + " 0";
				print(s);

				ExecCommandOnClient(GetLocalEntity(), s);
		}
		else
		{ print("WarpTo: Invalid Goal"); }
};

///////////////////////////////////////////////////////////////////////////////
//
member RollCall = function()
{
	foreach ( id and bot in BotTable )
	{
		print(bot.Name);
		print("TEAM: ", Util.TeamName(bot.GetTeam()));
		print("CLASS: ",Util.ClassName(bot.GetClass()));
		print("MOVESKILL: ", bot.moveskill);
		print("ENTITY: ",bot);
		print("^7-----------------------");
	}
};

///////////////////////////////////////////////////////////////////////////////
//
member CountClass = function( team, class )
{
	count = 0;
	foreach ( id and bot in BotTable )
	{
		if ( bot.GetTeam() == team && bot.GetClass() == class )
			{ count += 1; }
	}

	return count;
};

///////////////////////////////////////////////////////////////////////////////
//
member ChangeClass = function( team, originalclass, newclass, revert, maxbots )
{
	numbots = 0;

	foreach ( id and bot in BotTable )
	{
		if ( !GetEntFlags(bot.GetGameEntity(), ENTFLAG.CARRYINGGOAL)
			&& bot.GetTeam() == team  )
		{
			if ( bot.PrimaryClass == null )
				{ bot.PrimaryClass = bot.GetClass(); }

			if ( bot.PrimaryClass == originalclass && !revert && !bot.ClassChanged )
			{
				if ( numbots < maxbots )
				{
					numbots += 1;
					bot.ClassChanged = true;
					bot.ChangeClass(newclass);
				}
			}

			if ( bot.ClassChanged && revert && bot.PrimaryClass == originalclass
				&& bot.GetClass() == newclass )
			{
				bot.ClassChanged = false;
				bot.ChangeClass(bot.PrimaryClass);
			}
		}
	}
};

///////////////////////////////////////////////////////////////////////////////
//
member NoSnipeWeapons =
{
	WEAPON.STEN,
	WEAPON.FG42,
};

///////////////////////////////////////////////////////////////////////////////
//
member NoSnipe = function( bot )
{
	if ( bot.GetClass() != CLASS.COVERTOPS )
		{ return; }

	if ( bot.HasWeapon( WEAPON.GARAND ) ||
		bot.HasWeapon( WEAPON.K43 ) )
	{
		weap = RandInt(0, tableCount(this.NoSnipeWeapons) - 1);
		bot.ChangePrimaryWeapon( this.NoSnipeWeapons[weap] );
	}
};

///////////////////////////////////////////////////////////////////////////////
//
member StopSniping = function(team)
{
	foreach ( id and bot in BotTable )
	{
		if ( team && bot.GetTeam() != team )
			{ continue; }

		this.NoSnipe(bot);
	}
};

///////////////////////////////////////////////////////////////////////////////
//
member SetPrimaryGoals = function(priority)
{
	SetGoalPriority( "CAPPOINT_.*", priority );
	SetGoalPriority( "PLANT_.*", priority - 0.08f );
	SetGoalPriority( "CHECKPOINT_.*", priority - 0.1f );
	SetGoalPriority( "FLAG_.*", priority - 0.15f, 0, 0, true );
	SetGoalPriority( "FLAGRETURN_.*", priority - 0.05f, 0, 0, true  );
};

///////////////////////////////////////////////////////////////////////////////
//
member LimitToClass = function( goalname, team, class1, class2, class3, class4 )
{
	foreach ( id and class in Util.PlayerClassTable )
	{
		if ( class == class1 || class == class2 || class == class3 ||
			class == class4 )
			{ continue; }

		SetGoalPriority( goalname, 0.0, team, class);
	}
};

///////////////////////////////////////////////////////////////////////////////
//
member ExcludeClass = function( goalname, team, class1, class2, class3, class4 )
{
	foreach ( id and class in Util.PlayerClassTable )
	{
		if ( class == class1 || class == class2 || class == class3 ||
			class == class4 )
			{ SetGoalPriority( goalname, 0.0, team, class); }
	}
};

///////////////////////////////////////////////////////////////////////////////
// parameter isFog is ignored, goal_zooming sets MaxViewDistance
member SelectWeapon = function( bot, w, isFog )
{
	tbl = WeaponTable.GetPrimaryWeapons( bot.GetTeam(), bot.GetClass() );
	if (!tbl || typeId(tbl[w]) != 0)
	{
		if (!Map || !Map.DontSelectWeapons) {
			//goal_selectweapons changes weapon every spawn
			Util.MapDeprecateMessage( "ETUtil.SelectWeapon", "WeaponTable.SetWeaponAvailability" );
		}
		bot.ChangePrimaryWeapon( w );
	}
};

///////////////////////////////////////////////////////////////////////////////
//
member SwitchWeapon = function( w, team )
{
	foreach ( id and bot in BotTable )
	{
		if ( team && bot.GetTeam() != team )
		{
			continue;
		}

		this.SelectWeapon( bot, w );
	}
};

///////////////////////////////////////////////////////////////////////////////
//
member SetCabinets = function()
{
	SetGoalPriority( "HEALTHCAB.*", 0.0, TEAM.AXIS, CLASS.MEDIC);
	SetGoalPriority( "HEALTHCAB.*", 0.0, TEAM.ALLIES, CLASS.MEDIC);
	SetGoalPriority( "AMMOCAB.*", 0.0, TEAM.AXIS, CLASS.FIELDOPS);
	SetGoalPriority( "AMMOCAB.*", 0.0, TEAM.ALLIES, CLASS.FIELDOPS);
};

///////////////////////////////////////////////////////////////////////////////
//
member SetDualObjective = function( bot )
{
	team = bot.GetTeam();

	if ( !Map.Defend )
		{ Map.Defend = table(); }

	// counters for number of users
	if ( !Map.Defend.AlliesDefenders )
		{ Map.Defend.AlliesDefenders = 0; }

	if ( !Map.Defend.AxisDefenders )
		{ Map.Defend.AxisDefenders = 0; }

	// some default values
	if ( !Map.Defend.MaxBots )
		{ Map.Defend.MaxBots = 4; }

	if ( team == TEAM.ALLIES  )
	{
		this.numallies += 1;

		if ( Map.Defend.AlliesDefenders < Map.Defend.MaxBots ||  Map.Defend.AlliesDefenders < Map.Defend.MaxAlliesDefenders )
		{
			if ( this.numallies % 2 == 0 )
			{
				bot.SetRoles(ROLE.DEFENDER);

				//first bot defending will switch to crucial class
				if ( Map.Defend.AlliesDefenders == 0 && Map.Defend.CrucialClass )
					{ bot.ChangeClass(Map.Defend.CrucialClass); }

				if ( Map.Defend.AlliesSpawnPt )
					{ bot.ChangeSpawnPoint( Map.Defend.AlliesSpawnPt ); }

				Map.Defend.AlliesDefenders += 1;
			}
		}
	}

	if ( team == TEAM.AXIS  )
	{
		this.numaxis += 1;

		if ( Map.Defend.AlliesDefenders < Map.Defend.MaxBots ||  Map.Defend.AlliesDefenders < Map.Defend.MaxAxisDefenders )
		{
			if ( this.numaxis % 2 == 0 )
			{
				bot.SetRoles(ROLE.DEFENDER);

				//first bot defending will switch to crucial class
				if ( Map.Defend.AxisDefenders == 0 && Map.Defend.CrucialClass )
					{ bot.ChangeClass(Map.Defend.CrucialClass); }

				if ( Map.Defend.AxisSpawnPt )
					{ bot.ChangeSpawnPoint( Map.Defend.AxisSpawnPt ); }

				Map.Defend.AxisDefenders += 1;
			}
		}
	}
};

///////////////////////////////////////////////////////////////////////////////
//
member TraceArty = function(usePlayer)
{
	dist = null;
	radius = 200;
	playerEnt = GetLocalEntity();
	playerPos = GetEntPosition(playerEnt);
	foundGoal = null;
	spots = table();
	targets = table();
	sourceOffset = Vector3(0,0,64);

	if ( !usePlayer )
	{
		GetGoals(spots, 0, "CALLART.*");
		foreach ( id and mapgoal in spots )
		{
			evalDist = Util.Distance(mapgoal.GetPosition(), playerPos);
			if ( evalDist < radius )
			{
				if ( !dist || evalDist < dist )
				{
					dist = evalDist;
					foundGoal = mapgoal;
				}
			}
		}
	}

	if (foundGoal || usePlayer)
	{
		if ( !usePlayer )
		{
			print("ETUtil.TraceArty: Selected", foundGoal.GetName());
		}
		else
		{
			print("ETUtil.TraceArty: Tracing from", GetEntName(playerEnt), "^2");
		}
		GetGoals(targets, 0, "ARTILLERY.*");

		if ( tableCount(targets) > 0 )
		{
			if ( !usePlayer )
			{
				sourcePos = foundGoal.GetPosition();
			}
			else
			{
				sourcePos = GetEntPosition(playerEnt) - Vector3(0,0,24);
			}

			foreach ( id and targetgoal in targets )
			{
				targetPos = targetgoal.GetPosition();
				targetName = targetgoal.GetName();

				tr = TraceLine(sourcePos + sourceOffset, targetPos, null, TRACE.SHOT, playerEnt, false);
				if ( tr.fraction < 1 )
				{
					print("ETUtil.TraceArty: ^1No line of sight to", targetName, "^2");
					DrawDebugLine(sourcePos + sourceOffset, targetPos, COLOR.RED, 30);
				}
				else
				{
					print("ETUtil.TraceArty: ^2Has line of sight to", targetName);
					DrawDebugLine(sourcePos + sourceOffset, targetPos, COLOR.GREEN, 30);
				}
			}
		}
		else
		{
			print("ETUtil.TraceArty: No Arty Targets");
		}
	}
	else
	{
		print("ETUtil.TraceArty: No Arty Goal Close Enough");
	}
};

///////////////////////////////////////////////////////////////////////////////
//
member TraceAllArty = function()
{
	spots = table();
	targets = table();
	GetGoals(spots, 0, "CALLART.*");
	GetGoals(targets, 0, "ARTILLERY.*");
	sourceOffset = Vector3(0,0,64);

	foreach( id and mapgoal in spots )
	{
		sourcePos = mapgoal.GetPosition();
		found = 0;
		foreach (id and targetgoal in targets)
		{
			targetPos = targetgoal.GetPosition();
			tr = TraceLine(sourcePos + sourceOffset, targetPos, null, TRACE.SHOT, GetLocalEntity(), false);
			if ( tr.fraction == 1 )
			{
				found += 1;
			}
		}

		if ( found < 1 )
		{
			print( mapgoal.GetName(), " has zero visible targets!, try running /bot fgp" );
		}
	}
};

///////////////////////////////////////////////////////////////////////////////
//
member DrawObjectiveInfoDisplays = function()
{
	for ( i = 64; i < 1024; i = i + 1 )
	{
		if (GetEntClass(i) == CLASS.GOAL)
		{
			DrawEntityAABB( i, 60, COLOR.RED );
			center = GetEntWorldAABB(i).CenterPoint();
			DrawText3d(center, i + " : " + GetEntName(i) ,COLOR.WHITE,60,textDrawRadius);
		}
	}
};

///////////////////////////////////////////////////////////////////////////////
//
member DrawSpawns = function()
{
	for ( i = 64; i < 1024; i = i + 1 )
	{
		if (EntityIsValid(i) && GetEntClass(i) == CLASS.PLAYERSTART)
		{
			pos = GroundPoint(GetEntPosition(i));
			DrawLine(pos,pos+Vector3(0,0,64),COLOR.RED,60);
		}
	}
};

///////////////////////////////////////////////////////////////////////////////
//
member IsTeamDead = function(team, minbots)
{
	numalive = 0;
	// loop through the reserved player ents since there is no team table stored
	for ( i = 0; i < 64; i = i + 1 )
	{
		if (EntityIsValid(i) && GetEntTeam(i) == team && !GetEntFlags(i, ENTFLAG.DEAD, ENTFLAG.LIMBO) && GetEntClass(i) != CLASS.INJUREDPLAYER)
		{
			numalive += 1;
			if (!minbots)
			{
				return false;
			}
		}
	}

	if ( (minbots && numalive < minbots) || numalive == 0 )
	{
		return true;
	}
	else
	{
		return false;
	}
};

///////////////////////////////////////////////////////////////////////////////
//
member IsTeamClassDead = function(team, class)
{
	// loop through the reserved player ents since there is no team table stored
	for ( i = 0; i < 64; i = i + 1 )
	{
		cls = GetEntClass(i);

		if ( cls != class ) {
			continue;
		}

		if(GetEntTeam(i) == team && !GetEntFlags(i, ENTFLAG.DEAD) && cls != CLASS.INJUREDPLAYER)
		{
			return false;
		}
	}

	return true;
};

///////////////////////////////////////////////////////////////////////////////
// used for setting start indexes for goals that are pathing to offsets
member SetStartIndex = function( goalName, startIndex )
{
	startIndex = ToInt(startIndex, -1);
	g = GetGoal(goalName);
	if (g && g.Offsets) {
		offsetCount = tableCount(g.Offsets);
		if ( startIndex > offsetCount -1 ) {
			startIndex = -1; // random
		}

		g.StartIndex = startIndex;
	}
	else {
		Util.MapDebugPrint("ETUtil.SetStartIndex: Invalid Goal: " + goalName, true);
	}
};

///////////////////////////////////////////////////////////////////////////////
// used for excluding indexes for goals that are pathing to offsets
// use null or an empty table to re-enable all
member SetExcludeIndexes = function( goalName, excludeTable )
{
	g = GetGoal(goalName);
	if (g) {
		// passing null or an empty table will enable all
		if ( typeId(excludeTable) == 0 ) {
			excludeTable = {};
		}

		if ( typeId(excludeTable) == 6 ) {
			g.ExcludeIndexes = excludeTable;
		}
		else {
			Util.MapDebugPrint("ETUtil.ExcludeIndexes: Expecting table, got " + typeName(excludeTable), true);
		}
	}
	else {
		Util.MapDebugPrint("ETUtil.ExcludeIndexes: Invalid Goal: " + goalName, true);
	}
};

///////////////////////////////////////////////////////////////////////////////
// find a usable corpse starting from the body queue
member FindUsableCorpse = function(bot, range)
{
	// search through the body queue entities
	for ( i = 64; i < 71; i += 1 ) {
		corpse = GetEntityInSphere(bot.GetPosition(), range, CLASS.CORPSE, i);
		if ( corpse && bot.GetTeam() != GetEntTeam(corpse) ) {
			return corpse;
		}
		yield();
	}

	return null;
};

///////////////////////////////////////////////////////////////////////////////
//
member SetAimModeForMount = function(goalName, aimType)
{
	goal = GetGoal(goalName);
	if ( goal ) {
		if ( aimType == "opposite"
			|| typeId(aimType) == 3 // Vec3
			|| typeId(aimType) == 6 // table
			|| aimType == "random"
			|| aimType == "velocity" )
		{
			goal.AimMode = aimType;
			goal.ExtraDebugText = null; // update the render string
		}
		else {
			Util.MapDebugPrint("ETUtil.SetAimModeForMount: invalid aimType: " + aimType, true );
		}
	}
	else {
		Util.MapDebugPrint("ETUtil.SetAimModeForMount: Invalid Goal: " + goalName, true);
	}
};

///////////////////////////////////////////////////////////////////////////////
//
member SuicideSpawn = function( team, spawn, numbots, class )
{
	c = 0;
	b = 0;

	foreach ( id and bot in BotTable )
	{
		if ( bot.GetTeam() == team )
		{
			b += 1;

			// every other bot to avoid low bot count numbers spawning all at a point
			if ( numbots && numbots != -1 && (b % 2 == 0) ) {
				continue;
			}

			// is it class limited?
			if ( class && bot.GetClass() != class ) {
				continue;
			}

			c += 1;

			bot.ChangeSpawnPoint( spawn );
			thread(ETUtil.SuicideNextSpawn, bot);

			if ( numbots && numbots != -1 && c >= numbots )
				{ return; }
		}
	}
};

///////////////////////////////////////////////////////////////////////////////
//
member GetBotSideArm = function(bot)
{
	team = Util.TeamName(bot.GetTeam());

	if ( !Util.TeamSideArms[ team ] ) {
		return 0;
	}

	foreach ( id and weap in Util.TeamSideArms[ team ] ) {
		if ( bot.HasWeapon( weap ) ) {
			return weap;
		}
	}

	// shouldn't get here
	return 0;
};

///////////////////////////////////////////////////////////////////////////////
//
member GetBotPrimaryWeapon = function(bot)
{
	tbl = WeaponTable.GetPrimaryWeapons(bot.GetTeam(), bot.GetClass());
	if (tbl) {
		 return bot.HasAnyWeapon(tbl, { CheckCharged=false });
	}
	return 0;
};

///////////////////////////////////////////////////////////////////////////////
// note: this should be called via thread
member SuicideNextSpawn = function( bot )
{
	while( bot.GetReinforceTime() > 2 ) {
		yield();
	}

	bot.ExecCommand("kill");
};

///////////////////////////////////////////////////////////////////////////////
// some maps are set up for panzer wars
member PanzerMap = function( )
{
	this.IsPanzereMap = true;

	// reset the min class counts
	Util.InitializeClassTables();

	foreach ( name and teamId in TEAM )
	{
		if ( name == "SPECTATOR" )
		{
			continue;
		}

		Server.MinClassCount[teamId][CLASS.SOLDIER] = Server.MaxPlayers;
	}

	foreach ( id and bot in BotTable )
	{
		this.ChangeToPanzer(bot); //also add to OnBotJoin
	}
};

///////////////////////////////////////////////////////////////////////////////
//
member ChangeToPanzer = function( bot )
{
	if ( bot.GetClass() != CLASS.SOLDIER ) {
		bot.ChangeClass(CLASS.SOLDIER);
		yield();
	}
	if ( bot.GetTeam() == TEAM.ALLIES ) {
		bot.ChangePrimaryWeapon(WeaponTable.AlliedPanzer);
	} else {
		bot.ChangePrimaryWeapon(WEAPON.PANZERFAUST);
	}
};

///////////////////////////////////////////////////////////////////////////////
//
member DisableRifleNade = function( bot, disable )
{
	if (!bot ) { return; }

	// get the weapon objects
	m7 = bot.GetWeapon(WEAPON.M7);
	if (!m7 ) { Util.MapDebugPrint("ETUtil.DisableRifleNade: no m7 weapon object", true); return; }
	gpg = bot.GetWeapon(WEAPON.GPG40);
	if( !gpg ) { Util.MapDebugPrint("ETUtil.DisableRifleNade: no gpg40 weapon object", true); return; }

	// note: this will do nothing if weapon script sets default to 0.0
	// this is to avoid scripts like the plant goal stomping on user
	// defined settings.
	if ( disable ) {
		if ( m7.PrimaryFire.DefaultDesirability > 0.1 ) {
			m7.PrimaryFire.Bias = 0.0;
			m7.PrimaryFire.SetDesirabilityRange(0, 2600, 0.0);
		}

		if ( gpg.PrimaryFire.DefaultDesirability > 0.1 ) {
			gpg.PrimaryFire.Bias = 0.0;
			gpg.PrimaryFire.SetDesirabilityRange(0, 2600, 0.0);
		}
	}
	else {
		if ( m7.PrimaryFire.Bias < 0.1 ) {
			m7.PrimaryFire.Bias = 1.0;
			m7.PrimaryFire.SetDesirabilityRange(0, 2600, 0.8);
		}

		if ( gpg.PrimaryFire.Bias < 0.1 ) {
			gpg.PrimaryFire.Bias = 1.0;
			gpg.PrimaryFire.SetDesirabilityRange(0, 2600, 0.8);
		}
	}
};

///////////////////////////////////////////////////////////////////////////////
// randomly global chat some victory message
member WinningChat = function( team )
{
	// not if bot chat is disabled
	if ( !MAP_TALK ) {
		return;
	}

	v = { VOICE.G_CHEER, VOICE.G_ENEMY_WEAK, VOICE.G_AFFIRMATIVE, VOICE.G_GOODGAME, VOICE.G_GREATSHOT };

	foreach ( id and bot in BotTable ) {
		if ( bot.GetTeam() == team && RandInt(1, 10) < 4 ) {
			bot.SayVoice(Util.GetRandomTableValue(v));
			sleep(RandFloat(0.5, 1.5));
		}
	}
};

///////////////////////////////////////////////////////////////////////////////
// randomly global chat some displeasure about losing
member LosingChat = function( team )
{
	// not if bot chat is disabled
	if ( !MAP_TALK ) {
		return;
	}

	v = { VOICE.G_NEGATIVE, VOICE.G_OOPS, VOICE.G_GOODGAME, VOICE.G_HOLD_FIRE };

	foreach ( id and bot in BotTable ) {
		if ( bot.GetTeam() == team && RandInt(1, 10) < 4 ) {
			bot.SayVoice(Util.GetRandomTableValue(v));
			sleep(RandFloat(0.5, 1.5));
		}
	}
};

///////////////////////////////////////////////////////////////////////////////
//
member CheckTripminePosition = function()
{
	// must be within 64 units of wall
	tr = Util.TraceFromPlayer(64, TRACE.SHOT);
	if ( tr.fraction >= 1.0 ) {
		return false;
	}

	// wire distance is max of 512 units
	tr2 = Util.TraceFromPlane(tr.end, tr.normal, 512);
	if ( tr2.fraction >= 1.0 ) {
		return false;
	}

	// original trace position is used for the goals aim position
	return tr.end;
};

///////////////////////////////////////////////////////////////////////////////
//DEPRECATE
member RandomSpawn = function( team, spawn )
{
	Util.MapDeprecateMessage( "ETUtil.RandomSpawn", "Util.RandomSpawn" );
	foreach ( id and bot in BotTable )
	{
		if ( !bot.ChangedSpawn && bot.GetTeam() == team )
		{
			if ( RandInt( 0, 1 ) < 1 )
			{
				bot.ChangeSpawnPoint( spawn );
				bot.ChangedSpawn = true;
			}
		}
	}
};

///////////////////////////////////////////////////////////////////////////////
//DEPRECATE
member ChangeSpawn = function( team, spawn, numbots )
{
	Util.MapDeprecateMessage( "ETUtil.ChangeSpawn", "Util.ChangeSpawn" );
	c = 0;
	foreach ( id and bot in BotTable )
	{
		if ( bot.GetTeam() == team )
		{
			bot.ChangeSpawnPoint( spawn );
			bot.ChangedSpawn = true;

			c += 1;

			if ( numbots && c >= numbots )
				{ return; }
		}
	}
};

///////////////////////////////////////////////////////////////////////////////
//DEPRECATE
member EnableGoal = function( goal )
{
	Util.MapDeprecateMessage( "ETUtil.EnableGoal", "Util.EnableGoal" );
	SetAvailableMapGoals( 0, true, goal );
};

///////////////////////////////////////////////////////////////////////////////
//DEPRECATE
member LimitGoal = function( team, goal )
{
	Util.MapDeprecateMessage( "ETUtil.LimitGoal", "Util.LimitGoal" );
	SetAvailableMapGoals( 0, false, goal );
	SetAvailableMapGoals( team, true, goal );
};

///////////////////////////////////////////////////////////////////////////////
//DEPRECATE
member DisableGoal = function( goal, routes )
{
	Util.MapDeprecateMessage( "ETUtil.DisableGoal", "Util.DisableGoal" );
	SetAvailableMapGoals( 0, false, goal );

	if (routes)
	{
		SetAvailableMapGoals( 0, true, "ROUTE_.*" );
	}
};

///////////////////////////////////////////////////////////////////////////////
//DEPRECATE
member CountTeam = function( team )
{
	Util.MapDeprecateMessage( "ETUtil.CountTeam", "Server.Team[ teamId ].NumPlayers" );
	count = 0;
	foreach ( id and bot in BotTable )
	{
		if ( bot.GetTeam() == team )
			{ count += 1; }
	}

	return count;
};

///////////////////////////////////////////////////////////////////////////////
//DEPRECATE
member ShowActiveGoals = function(routes)
{
	Util.MapDeprecateMessage( "ETUtil.ShowActiveGoals", "Util.ShowActiveGoals" );
	Util.MapDebugPrint("Blindman was here");
};
