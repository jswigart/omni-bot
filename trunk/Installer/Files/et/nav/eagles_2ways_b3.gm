//==========================================================================================
//
//	eagles_2ways_b3.gm
//
//	Who              	When			What
//------------------------------------------------------------------------------------------
//	native12 & Qiki		20.10.2010		Initial Script
//				28.10.2010		Final version
//	native12		29.12.2010		Correction in Allied spawns, added navigation....
//==========================================================================================
//
//	eagles_2ways_b3.way
//
//	Who              	When			What
//------------------------------------------------------------------------------------------
//	native12 & Qiki		28.10.2010		Final version
//
//==========================================================================================
//
//	eagles_2ways_b3_goals.gm
//
//	Who              	When			What
//------------------------------------------------------------------------------------------
//	native12		28.10.2010		Final version
//==========================================================================================
//
//==========================================================================================

global Map =
{
	talk = 1,

	Ammo_Cabinet_south_ammocabinet = "AMMOCAB_south_ammocabinet",
	Ammo_Cabinet_south_ammocabinet_1 = "AMMOCAB_south_ammocabinet_1",
	Ammo_Cabinet_south_ammocabinet_2 = "AMMOCAB_south_ammocabinet_2",
	Health_Cabinet_south_healthcabinet = "HEALTHCAB_south_healthcabinet",
	Health_Cabinet_south_healthcabinet_1 = "HEALTHCAB_south_healthcabinet_1",
	Health_Cabinet_south_healthcabinet_2 = "HEALTHCAB_south_healthcabinet_2",
	Checkpoint_firstflag = "CHECKPOINT_firstflag",
	Checkpoint_secondflag = "CHECKPOINT_secondflag",
	Flag_tcr_docs_scriptname = "FLAG_tcr_docs_scriptname",
	Flag_tcr_fuel_scriptname = "FLAG_tcr_fuel_scriptname",
	Flag_tcr_planefuel_scriptname = "FLAG_tcr_planefuel_scriptname",
	Cappoint_Bus = "CAPPOINT_Bus",
	Cappoint_Plane = "CAPPOINT_Plane",
	Build_Barrier_1 = "BUILD_Barrier_1",
	Build_Barrier_2 = "BUILD_Barrier_2",
	Build_Bridge = "BUILD_Bridge",
	Build_Bus = "BUILD_Bus",
	Build_Castle_Steel_Door = "BUILD_Castle_Steel_Door",
	Build_Command_Post = "BUILD_Command_Post",
	Build_Constructible = "BUILD_Constructible",
	Build_Guardhouse = "BUILD_Guardhouse",
	Build_Road_MG = "BUILD_Road_MG",
	Build_Tram_Door = "BUILD_Tram_Door",
	Plant_Avalanche_Wall = "PLANT_Avalanche_Wall",
	Plant_Barrier_1 = "PLANT_Barrier_1",
	Plant_Barrier_2_1 = "PLANT_Barrier_2_1",
	Plant_Bridge = "PLANT_Bridge",
	Plant_Castle_Steel_Door = "PLANT_Castle_Steel_Door",
	Plant_Command_Post = "PLANT_Command_Post",
	Plant_Constructible = "PLANT_Constructible",
	Plant_Constructible_1 = "PLANT_Constructible_1",
	Plant_Guardhouse = "PLANT_Guardhouse",
	Plant_Hangar = "PLANT_Hangar",
	Plant_Road_MG = "PLANT_Road_MG",
	Plant_Tram_Door = "PLANT_Tram_Door",
	Plant_Tunnel_Entrance = "PLANT_Tunnel_Entrance",
	Mount_Guardhouse = "MOUNTMG42_Guardhouse",
	Mount_Road_MG = "MOUNTMG42_Road_MG",
	Repair_Guardhouse = "REPAIRMG42_Guardhouse",
	Repair_Road_MG = "REPAIRMG42_Road_MG",
	Mover_truck = "MOVER_truck",
	Mover_cablecar1 = "MOVER_cablecar1",
	Mover_cablecar2 = "MOVER_cablecar2",

	ShowMovers = false,

	cablecar_1_position = -1,	// 1 => in Castle station (initialy)
					//-1 => leaving station
					// 0 => in Village station

	cablecar_2_position = -1,	// 1 => in Castle station
					//-1 => leaving station
					// 0 => in Village station (initialy)

	Bus_Is_Near_Plane = 0,
	Tunnel = 0,
	Wall = 0,
	BusEscaping = 0,
	CastleWall = 0,
	BusDocumentTaken = 0,
	BusFuelTaken = 0,
	BusCaptured = 0,
	Barrier1Builded = 0,
	BusAtBarrier_1 = 0,
	BusStatus = 1,		//builded
	FirstFlagAllies = 0,
	SecondFlagAllies = 0,
	BusOnTheBridge = 0,
	BridgeBuilded = 0,
	BusAtBarrier_2 = 0,
	Barrier2Builded = 0,
	Allied5Spawn = 0,
	HangarDoor = 1,		//Intact
	planefuelTaken = 0,

	Navigation =
	{
		//  	/bot waypoint_setproperty paththrough Navigation_PT:jump
		jump =
		{
			navigate = function(_this)
			{
				wpTable = {};
				Wp.GetWaypointByName("jump", wpTable);
				if ( _this.Goto(wpTable.position) == EVENT.PATH_SUCCESS )
				{
					_this.AddAimRequest(Priority.VeryHigh, "facing", wpTable.facing);
					_this.AddWeaponRequest(Priority.VeryHigh, WEAPON.KNIFE );
					_this.BlockForWeaponChange( WEAPON.KNIFE );
					//_this.Bot.HoldButton(BTN.JUMP, 0.5);
					_this.Bot.HoldButton(BTN.SPRINT, 1);
					_this.Bot.HoldButton(BTN.FORWARD, 1.8);
					sleep(1.8);
				}
			},
		},
		//  	/bot waypoint_setproperty paththrough Navigation_PT:ladder
		ladder =
		{
			navigate = function(_this)
			{
				wpTable = {};
				Wp.GetWaypointByName("ladder", wpTable);
				if ( _this.Goto(wpTable.position) == EVENT.PATH_SUCCESS )
				{
					_this.AddAimRequest(Priority.VeryHigh, "facing", wpTable.facing);
					_this.Bot.HoldButton(BTN.FORWARD, 1.5);
					sleep(1);
				}
			},
		},
		//  	/bot waypoint_setproperty paththrough Navigation_PT:callarti
		callarti =
		{
			navigate = function(_this)
			{
				wpTable = {};
				Wp.GetWaypointByName("call", wpTable);
				if ( _this.Goto(wpTable.position) == EVENT.PATH_SUCCESS )
				{
					_this.AddAimRequest(Priority.VeryHigh, "facing", wpTable.facing);
					_this.Bot.HoldButton(BTN.JUMP, 0.5);
					_this.Bot.HoldButton(BTN.FORWARD, 1.5);
					sleep(1.5);
				}
			},
		},
		//  	/bot waypoint_setproperty paththrough Navigation_PT:box1
		box1 =
		{
			navigate = function(_this)
			{
				_this.Bot.HoldButton(BTN.JUMP, 1);
				_this.Bot.HoldButton(BTN.FORWARD, 0.5);
				sleep(1);
			},
		},
		//  	/bot waypoint_setproperty paththrough Navigation_PT:box2
		box2 =
		{
			navigate = function(_this)
			{
				_this.Bot.HoldButton(BTN.JUMP, 1);
				_this.Bot.HoldButton(BTN.FORWARD, 0.5);
				sleep(1);
			},
		},
		//  	/bot waypoint_setproperty paththrough Navigation_PT:box3
		box3 =
		{
			navigate = function(_this)
			{
				_this.Bot.HoldButton(BTN.JUMP, 1);
				_this.Bot.HoldButton(BTN.FORWARD, 0.5);
				sleep(1);
			},
		},
		//  	/bot waypoint_setproperty paththrough Navigation_PT:box4
		box4 =
		{
			navigate = function(_this)
			{
				_this.Bot.HoldButton(BTN.JUMP, 0.5);
				_this.Bot.HoldButton(BTN.FORWARD, 0.5);
				sleep(0.5);
			},
		},
		//  	/bot waypoint_setproperty paththrough Navigation_PT:box5
		box5 =
		{
			navigate = function(_this)
			{
				_this.Bot.ReleaseButton(BTN.JUMP, BTN.FORWARD);
			},
		},
		//  	/bot waypoint_setproperty paththrough Navigation_PT:allycable1
		allycable1 =
		{
			gotowp = "Tram2",
		},
		//  	/bot waypoint_setproperty paththrough Navigation_PT:allycable2
		allycable2 =
		{
			gotowp = "Tram2",
		},
	},

	Movers =
	{
		"MOVER_cablecar1",
		"MOVER_cablecar2",
		"MOVER_truck",
	},

	RideMovers =
	{
		//	/bot waypoint_setproperty paththrough RideMover_PT:car1village
		car1village =
		{
			movergoal = "MOVER_cablecar1",
			rideposition = Vector3(0, 0, -150),
			startwp = "car1low",
			exitwp = "car1upp",
			stance = BTN.CROUCH,
 			board = function(_this)
			{
				if ( Map.cablecar_1_position == 0 )
					{ return true; }
				return false;
			},
 			leave = function(_this)
			{
				if ( Map.cablecar_1_position == 1 )
					{ return true; }
				return false;
			},
		},
		//	/bot waypoint_setproperty paththrough RideMover_PT:car1castle
		car1castle =
		{
			movergoal = "MOVER_cablecar1",
			rideposition = Vector3(0, 0, -150),
			startwp = "car1upp",
			exitwp = "car1low",
			stance = BTN.CROUCH,
 			board = function(_this)
			{
				if ( Map.cablecar_1_position == 1 )
					{ return true; }
				return false;
			},
 			leave = function(_this)
			{
				if ( Map.cablecar_1_position == 0 )
					{ return true; }
				return false;
			},
		},
		//	/bot waypoint_setproperty paththrough RideMover_PT:car2village
		car2village =
		{
			movergoal = "MOVER_cablecar2",
			rideposition = Vector3(0, 0, -150),
			startwp = "car2low",
			exitwp = "car2upp",
			stance = BTN.CROUCH,
 			board = function(_this)
			{
				if ( Map.cablecar_2_position == 0 )
					{ return true; }
				return false;
			},
 			leave = function(_this)
			{
				if ( Map.cablecar_2_position == 1 )
					{ return true; }
				return false;
			},
		},
		//	/bot waypoint_setproperty paththrough RideMover_PT:car2castle
		car2castle =
		{
			movergoal = "MOVER_cablecar2",
			rideposition = Vector3(0, 0, -150),
			startwp = "car2upp",
			exitwp = "car2low",
			stance = BTN.CROUCH,
 			board = function(_this)
			{
				if ( Map.cablecar_2_position == 1 )
					{ return true; }
				return false;
			},
 			leave = function(_this)
			{
				if ( Map.cablecar_2_position == 0 )
					{ return true; }
				return false;
			},
		},
		//	/bot waypoint_setproperty paththrough RideMover_PT:busgarrage
		busgarrage =
		{
			movergoal = "MOVER_truck",
			rideposition = Vector3(0, 0, -150),
			startwp = "InBusRide",
			exitwp = "OutBusRide",
			stance = BTN.PRONE,
 			board = function(_this)
			{
				if ( Map.BusEscaping == 0 )
					{ return true; }
				return false;
			},
 			leave = function(_this)
			{
				if ( Map.Bus_Is_Near_Plane == 1 )
					{ return true; }
				return false;
			},
		},
	},

	Planted_at_Tunnel_Entrance = function( trigger )
	{
		if ( TestMap )
			{ return; }

		SetAvailableMapGoals( TEAM.AXIS, false, "DEFUSE_Tunnel_Entrance_.*" );

		SetAvailableMapGoals( TEAM.AXIS, true, "MOUNTMG42_Guardhouse" );
		SetAvailableMapGoals( TEAM.AXIS, true, "REPAIRMG42_Guardhouse" );

		SetGoalPriority( "MOUNTMG42_Guardhouse", 0.8, TEAM.AXIS, CLASS.SOLDIER );

		SetAvailableMapGoals( TEAM.ALLIES, false, "PLANT_Tunnel_Entrance" );

		Util.MapDebugPrint( "Planted_at_Tunnel_Entrance" );
	},

	Tunnel_Entrance_Destroyed = function( trigger )
	{
		if ( TestMap )
			{ return; }

		Map.Tunnel = 1;

		Wp.SetWaypointFlag( "b", "closed", false);

		SetAvailableMapGoals( TEAM.ALLIES, true, "ROUTE_TunnelEntrance" );

		SetAvailableMapGoals( TEAM.ALLIES, false, "PLANT_Tunnel_Entrance.*" );

		if ( Map.Wall == 0 )
		{
			//SetGoalPriority( "PLANT_Avalanche_Wall", 0.91, TEAM.ALLIES, CLASS.ENGINEER );

			SetAvailableMapGoals( TEAM.AXIS, false, "DEFEND_Axis_start_.*" );
			SetAvailableMapGoals( TEAM.AXIS, false, "PLANTMINE_Axis_start_.*" );

			SetAvailableMapGoals( TEAM.ALLIES, false, ".*_Allied_start_.*" );

			SetAvailableMapGoals( TEAM.ALLIES, true, "HEALTHCAB_.*" );
			SetAvailableMapGoals( TEAM.ALLIES, true, "AMMOCAB_.*" );
			SetAvailableMapGoals( TEAM.ALLIES, true, "ROUTE_.*" );
			SetAvailableMapGoals( TEAM.ALLIES, true, "FLAG_.*" );
			SetAvailableMapGoals( TEAM.ALLIES, true, "CHECKPOINT_firstflag" );
			SetAvailableMapGoals( TEAM.ALLIES, true, "BUILD_Command_Post" );
			SetAvailableMapGoals( TEAM.ALLIES, true, "PLANT_Command_Post" );
			//SetAvailableMapGoals( TEAM.ALLIES, true, "PLANT_Barrier_1" );
			SetAvailableMapGoals( TEAM.ALLIES, true, "PLANT_Tram_Door" );
			//SetAvailableMapGoals( TEAM.ALLIES, true, "PLANT_Constructible_1" );
			SetAvailableMapGoals( TEAM.ALLIES, true, "BUILD_Constructible" );
			SetAvailableMapGoals( TEAM.ALLIES, true, "PLANT_Guardhouse" );
			SetAvailableMapGoals( TEAM.ALLIES, true, "ATTACK_Allied_firstflag_.*" );

			SetAvailableMapGoals( TEAM.AXIS, true, ".*_Axis_firstflag_.*" );
			SetAvailableMapGoals( TEAM.AXIS, true, "BUILD_Constructible" );

			SetGoalPriority( "ARTILLERY_S_Axis_start_.*", 0.7, TEAM.AXIS, CLASS.FIELDOPS );
			SetGoalPriority( "BUILD_Constructible", 1.3, TEAM.AXIS, CLASS.ENGINEER );
			SetGoalPriority( "BUILD_Tram_Door", 0.83, TEAM.AXIS, CLASS.ENGINEER );
			SetGoalPriority( "BUILD_Command_Post", 0.81, TEAM.AXIS, CLASS.ENGINEER );

			SetGoalPriority( "CHECKPOINT_firstflag", 0.82, TEAM.ALLIES, 0 );

			Util.BotChat( TEAM.ALLIES, "vsay", VOICE.G_ENEMY_WEAK, 1 );
			sleep(1.5);
			Util.BotChat( TEAM.ALLIES, "vsay", VOICE.G_OOPS, 1 );
		}

		Util.MapDebugPrint( "Tunnel_Entrance_Destroyed" );
	},

	Planted_AvalancheWall = function( trigger )
	{
		if ( TestMap )
			{ return; }

		if ( Map.FirstFlagAllies == 1 )
		{
			SetAvailableMapGoals( TEAM.AXIS, false, "DEFUSE_Avalanche_Wall_.*" );
		}

		Util.MapDebugPrint( "Planted_AvalancheWall" );
	},

	Avalanche_Wall_Destroyed = function( trigger )
	{
		if ( TestMap )
			{ return; }

		Map.Wall = 1;

		SetAvailableMapGoals( TEAM.ALLIES, true, "ROUTE_AvalancheWall" );

		SetAvailableMapGoals( TEAM.ALLIES, false, "PLANT_Avalanche_Wall_.*" );

		SetAvailableMapGoals( TEAM.AXIS, false, "DEFUSE_Avalanche_Wall_.*" );

		if ( Map.Tunnel == 0 )
		{
			SetAvailableMapGoals( TEAM.AXIS, false, "DEFEND_Axis_start_.*" );
			SetAvailableMapGoals( TEAM.AXIS, false, "PLANTMINE_Axis_start_.*" );

			SetAvailableMapGoals( TEAM.ALLIES, false, ".*_Allied_start_.*" );

			SetAvailableMapGoals( TEAM.ALLIES, true, "HEALTHCAB_.*" );
			SetAvailableMapGoals( TEAM.ALLIES, true, "AMMOCAB_.*" );
			SetAvailableMapGoals( TEAM.ALLIES, true, "ROUTE_.*" );
			SetAvailableMapGoals( TEAM.ALLIES, true, "FLAG_.*" );
			SetAvailableMapGoals( TEAM.ALLIES, true, "CHECKPOINT_firstflag" );
			SetAvailableMapGoals( TEAM.ALLIES, true, "BUILD_Command_Post" );
			SetAvailableMapGoals( TEAM.ALLIES, true, "PLANT_Command_Post" );
			//SetAvailableMapGoals( TEAM.ALLIES, true, "PLANT_Barrier_1" );
			SetAvailableMapGoals( TEAM.ALLIES, true, "PLANT_Tram_Door" );
			//SetAvailableMapGoals( TEAM.ALLIES, true, "PLANT_Constructible_1" );
			SetAvailableMapGoals( TEAM.ALLIES, true, "BUILD_Constructible" );
			SetAvailableMapGoals( TEAM.ALLIES, true, "PLANT_Guardhouse" );
			SetAvailableMapGoals( TEAM.ALLIES, true, "ATTACK_Allied_firstflag_.*" );

			SetAvailableMapGoals( TEAM.AXIS, true, ".*_Axis_firstflag_.*" );
			SetAvailableMapGoals( TEAM.AXIS, true, "BUILD_Constructible" );

			SetGoalPriority( "ARTILLERY_S_Axis_start_.*", 0.7, TEAM.AXIS, CLASS.FIELDOPS );
			SetGoalPriority( "BUILD_Constructible", 1.3, TEAM.AXIS, CLASS.ENGINEER );
			SetGoalPriority( "BUILD_Tram_Door", 0.83, TEAM.AXIS, CLASS.ENGINEER );
			SetGoalPriority( "BUILD_Command_Post", 0.81, TEAM.AXIS, CLASS.ENGINEER );

			SetGoalPriority( "CHECKPOINT_firstflag", 0.82, TEAM.ALLIES, 0 );

			Util.BotChat( TEAM.ALLIES, "vsay", VOICE.G_ENEMY_WEAK, 1 );
			sleep(1.5);
			Util.BotChat( TEAM.ALLIES, "vsay", VOICE.G_OOPS, 1 );
		}

		Util.MapDebugPrint( "Avalanche_Wall_Destroyed" );
	},

	firstflag_Allies_Captured = function( trigger )
	{
		if ( TestMap )
			{ return; }

		Map.FirstFlagAllies = 1;

		if ( Map.SecondFlagAllies == 0 )
		{
			Util.ChangeSpawn( TEAM.ALLIES, 7 );	//inside hut (cablecar station)
			Util.ChangeSpawn( TEAM.AXIS, 2 );
		}

		SetAvailableMapGoals( TEAM.ALLIES, false, "PLANT_Avalanche_Wall_.*" );
		SetAvailableMapGoals( TEAM.ALLIES, false, ".*_Allied_firstflag_.*" );

		SetAvailableMapGoals( TEAM.AXIS, false, "MOUNTMG42_Guardhouse" );
		SetAvailableMapGoals( TEAM.AXIS, false, "REPAIRMG42_Guardhouse" );
		SetAvailableMapGoals( TEAM.AXIS, false, "BUILD_Guardhouse" );
		SetAvailableMapGoals( TEAM.AXIS, false, "BUILD_Tram_Door" );
		SetAvailableMapGoals( TEAM.AXIS, false, "BUILD_Command_Post" );
		SetAvailableMapGoals( TEAM.AXIS, false, "PLANT_Command_Post" );
		SetAvailableMapGoals( TEAM.AXIS, false, "DEFUSE_Avalanche_Wall_.*" );
		SetAvailableMapGoals( TEAM.AXIS, false, ".*_Axis_start_.*" );
		SetAvailableMapGoals( TEAM.AXIS, false, ".*_Axis_firstflag_.*" );

		SetAvailableMapGoals( TEAM.AXIS, true, ".*_Axis_secondflag_.*" );
		SetAvailableMapGoals( TEAM.AXIS, true, "BUILD_Castle_Steel_Door" );

		SetAvailableMapGoals( TEAM.ALLIES, true, "CHECKPOINT_secondflag" );
		SetAvailableMapGoals( TEAM.ALLIES, true, "FLAG_tcr_fuel_scriptname" );
		SetAvailableMapGoals( TEAM.ALLIES, true, "FLAG_tcr_docs_scriptname" );
		SetAvailableMapGoals( TEAM.ALLIES, true, "PLANT_Castle_Steel_Door" );

		SetGoalPriority( Map.Plant_Tram_Door, 0.85, TEAM.ALLIES, CLASS.COVERTOPS );
		SetGoalPriority( Map.Plant_Command_Post, 0.83, TEAM.ALLIES, CLASS.COVERTOPS );
		SetGoalPriority( Map.Plant_Tram_Door, 0.55, TEAM.ALLIES, CLASS.ENGINEER );
		SetGoalPriority( Map.Plant_Command_Post, 0.55, TEAM.ALLIES, CLASS.ENGINEER );
		SetGoalPriority( Map.Plant_Guardhouse, 0.0, TEAM.ALLIES, CLASS.ENGINEER );
		SetGoalPriority( "CHECKPOINT_secondflag", 0.82, TEAM.ALLIES, 0 );

		SetGoalPriority( "DEFEND_Axis_secondflag_12", 0.65, TEAM.AXIS, CLASS.FIELDOPS );
		SetGoalPriority( "DEFEND_Axis_secondflag_13", 0.7, TEAM.AXIS, CLASS.ENGINEER );

		Util.MapDebugPrint( "firstflag_Allies_Captured" );
	},

	Guardhouse_Built = function( trigger )
	{
		if ( TestMap )
			{ return; }

		Util.MapDebugPrint( "Guardhouse_Built" );
	},

	Guardhouse_Destroyed = function( trigger )
	{
		if ( TestMap )
			{ return; }

		SetAvailableMapGoals( TEAM.AXIS, false, "MOUNTMG42_Guardhouse" );
		SetAvailableMapGoals( TEAM.AXIS, false, "REPAIRMG42_Guardhouse" );

		Util.MapDebugPrint( "Guardhouse_Destroyed" );
	},

	Allied_CP_Built = function( trigger )
	{
		if ( TestMap )
			{ return; }

		Util.MapDebugPrint( "Allied_CP_Built" );
	},

	Allied_CP_Destroyed = function( trigger )
	{
		if ( TestMap )
			{ return; }

		Util.MapDebugPrint( "Allied_CP_Destroyed" );
	},

	Axis_CP_Built = function( trigger )
	{
		if ( TestMap )
			{ return; }

		Util.MapDebugPrint( "Axis_CP_Built" );
	},

	Axis_CP_Destroyed = function( trigger )
	{
		if ( TestMap )
			{ return; }

		Util.MapDebugPrint( "Axis_CP_Destroyed" );
	},

	Tram_Door_Built = function( trigger )
	{
		if ( TestMap )
			{ return; }

		SetAvailableMapGoals( TEAM.ALLIES, false, "ROUTE_Tram1" );
		SetAvailableMapGoals( TEAM.ALLIES, false, "ROUTE_Tram2" );

		Util.MapDebugPrint( "Tram_Door_Built" );
	},

	Tram_Door_Destroyed = function( trigger )
	{
		if ( TestMap )
			{ return; }

		SetAvailableMapGoals( TEAM.ALLIES, true, "ROUTE_Tram1" );
		SetAvailableMapGoals( TEAM.ALLIES, true, "ROUTE_Tram2" );

		Util.MapDebugPrint( "Tram_Door_Destroyed" );
	},

	Barrier_1_Built = function( trigger )
	{
		if ( TestMap )
			{ return; }

		Map.Barrier1Builded = 1;

		if ( Map.BusAtBarrier_1 == 1 )
		{
			SetAvailableMapGoals( TEAM.ALLIES, false, "RIDE_Bus" );
		}

		Util.MapDebugPrint( "Barrier_1_Built" );
	},

	Planted_Barrier_1 = function( trigger )
	{
		if ( TestMap )
			{ return; }

		if ( Map.BusEscaping == 0 and Map.BusCaptured == 0 )
		{
			SetAvailableMapGoals( TEAM.AXIS, false, "DEFUSE_Barrier_1_.*" );
		}
		else
		{
			SetAvailableMapGoals( TEAM.AXIS, true, "DEFUSE_Barrier_1_.*" );
		}

		Util.MapDebugPrint( "Planted_Barrier_1" );
	},

	Barrier_1_Destroyed = function( trigger )
	{
		if ( TestMap )
			{ return; }

		Map.Barrier1Builded = 0;

		if ( Map.BusStatus == 1 and Map.BusAtBarrier_1 == 1 )
		{
			SetAvailableMapGoals( TEAM.ALLIES, true, "RIDE_Bus" );
		}

		Util.MapDebugPrint( "Barrier_1_Destroyed" );
	},

	Castle_wall_Built = function( trigger )
	{
		if ( TestMap )
			{ return; }

		Map.CastleWall = 1;

		//Util.SetGoalOffset( 50, 20, 10, Map.Plant_Constructible );
		//Util.SetGoalOffset( 5, 35, -20, Map.Plant_Constructible );

		SetAvailableMapGoals( TEAM.ALLIES, false, "ROUTE_Constructible" );

		SetAvailableMapGoals( TEAM.ALLIES, true, "PLANT_Constructible" );

		Util.MapDebugPrint( "Castle_wall_Built" );

		sleep(5);
		if ( Map.SecondFlagAllies == 0 )
		{
			SetAvailableMapGoals( TEAM.AXIS, false, "DEFEND_Axis_FlagBus_1" );
			SetAvailableMapGoals( TEAM.AXIS, false, "DEFEND_Axis_FlagBus_7" );

			SetAvailableMapGoals( TEAM.AXIS, true, ".*_Axis_secondflag_6" );
			SetAvailableMapGoals( TEAM.AXIS, true, ".*_Axis_secondflag_7" );

			Util.MapDebugPrint( "Castle_wall_Built: SecondFlagAllies" );
		}
	},

	Castle_wall_Destroyed = function( trigger )
	{
		if ( TestMap )
			{ return; }

		Map.CastleWall = 0;

		SetAvailableMapGoals( TEAM.ALLIES, true, "ROUTE_Constructible" );

		SetAvailableMapGoals( TEAM.ALLIES, false, "PLANT_Constructible" );

		if ( Map.SecondFlagAllies == 0 )
		{
			SetAvailableMapGoals( TEAM.AXIS, false, ".*_Axis_secondflag_6" );
			SetAvailableMapGoals( TEAM.AXIS, false, ".*_Axis_secondflag_7" );

			SetAvailableMapGoals( TEAM.AXIS, true, "DEFEND_Axis_FlagBus_1" );
			SetAvailableMapGoals( TEAM.AXIS, true, "DEFEND_Axis_FlagBus_7" );

			SetGoalPriority( "DEFEND_Axis_FlagBus_1", 0.7, TEAM.AXIS, 0 );
			SetGoalPriority( "DEFEND_Axis_FlagBus_7", 0.7, TEAM.AXIS, 0 );
		}
		Util.MapDebugPrint( "Castle_wall_Destroyed" );
	},

	Castle_Ladder_Built = function( trigger )
	{
		if ( TestMap )
			{ return; }

		Wp.SetWaypointFlag( "a", "closed", false);

		//Util.SetGoalOffset( -56, -36, 124, Map.Plant_Constructible );

		SetAvailableMapGoals( TEAM.ALLIES, true, "ROUTE_ConstructibleLadder" );
		SetAvailableMapGoals( TEAM.ALLIES, true, "ROUTE_ConstructibleLadder1" );

		if ( Map.SecondFlagAllies == 0 )
		{
			SetAvailableMapGoals( TEAM.AXIS, false, ".*_Axis_secondflag_6" );
			SetAvailableMapGoals( TEAM.AXIS, false, ".*_Axis_secondflag_7" );

			SetAvailableMapGoals( TEAM.AXIS, true, "DEFEND_Axis_FlagBus_1" );
			SetAvailableMapGoals( TEAM.AXIS, true, "DEFEND_Axis_FlagBus_7" );
			SetAvailableMapGoals( TEAM.AXIS, true, "PLANT_Constructible_1" );

			SetGoalPriority( "DEFEND_Axis_FlagBus_1", 0.7, TEAM.AXIS, 0 );
			SetGoalPriority( "DEFEND_Axis_FlagBus_7", 0.7, TEAM.AXIS, 0 );
		}

		Util.MapDebugPrint( "Castle_Ladder_Built" );
	},

	Castle_Ladder_Destroyed = function( trigger )
	{
		if ( TestMap )
			{ return; }

		Wp.SetWaypointFlag( "a", "closed", true);

		SetAvailableMapGoals( TEAM.ALLIES, false, "ROUTE_ConstructibleLadder" );
		SetAvailableMapGoals( TEAM.ALLIES, false, "ROUTE_ConstructibleLadder1" );

		SetAvailableMapGoals( TEAM.AXIS, false, "PLANT_Constructible_1" );

		if ( Map.SecondFlagAllies == 0 )
		{
			SetAvailableMapGoals( TEAM.AXIS, false, ".*_Axis_secondflag_6" );
			SetAvailableMapGoals( TEAM.AXIS, false, ".*_Axis_secondflag_7" );

			SetAvailableMapGoals( TEAM.AXIS, true, "DEFEND_Axis_FlagBus_1" );
			SetAvailableMapGoals( TEAM.AXIS, true, "DEFEND_Axis_FlagBus_7" );

			SetGoalPriority( "DEFEND_Axis_FlagBus_1", 0.7, TEAM.AXIS, 0 );
			SetGoalPriority( "DEFEND_Axis_FlagBus_7", 0.7, TEAM.AXIS, 0 );
		}

		Util.MapDebugPrint( "Castle_Ladder_Destroyed" );
	},

	Planted_Constructible = function( trigger )
	{
		if ( TestMap )
			{ return; }

		if ( Map.CastleWall == 1 && Map.SecondFlagAllies == 1 )
		{
				SetAvailableMapGoals( TEAM.AXIS, false, "DEFUSE_Constructible_.*" );
		}

		Util.MapDebugPrint( "Planted_Constructible" );
	},

	Castle_Steel_Door_Built = function( trigger )
	{
		if ( TestMap )
			{ return; }

		SetAvailableMapGoals( TEAM.ALLIES, false, "ROUTE_SteelDoor" );

		Util.MapDebugPrint( "Castle_Steel_Door_Built" );
	},

	Castle_Steel_Door_Destroyed = function( trigger )
	{
		if ( TestMap )
			{ return; }

		SetAvailableMapGoals( TEAM.AXIS, false, Map.Build_Castle_Steel_Door );
		SetAvailableMapGoals( TEAM.AXIS, false, "DEFUSE_Castle_Steel_Door_.*" );

		SetAvailableMapGoals( TEAM.ALLIES, false, "PLANT_Castle_Steel_Door" );

		SetAvailableMapGoals( TEAM.ALLIES, true, "ROUTE_SteelDoor" );

		Util.MapDebugPrint( "Castle_Steel_Door_Destroyed" );
	},

	secondflag_Allies_Captured = function( trigger )
	{
		if ( TestMap )
			{ return; }

		Map.SecondFlagAllies = 1;

		Util.ChangeSpawn( TEAM.ALLIES, 3 );	//Castle
		Util.ChangeSpawn( TEAM.AXIS, 2 );

		SetAvailableMapGoals( TEAM.AXIS, false, ".*_Axis_secondflag_.*" );
		SetAvailableMapGoals( TEAM.AXIS, false, "PLANT_Constructible_1" );
		SetAvailableMapGoals( TEAM.AXIS, false, "BUILD_Constructible" );

		SetAvailableMapGoals( TEAM.ALLIES, false, ".*_Allied_secondflag_.*" );

		SetAvailableMapGoals( TEAM.AXIS, true, "DEFEND_Axis_FlagBus_.*" );

		Util.MapDebugPrint( "secondflag_Allies_Captured" );
	},

	tcr_docs_scriptname_Taken = function( trigger )
	{
		if ( TestMap )
			{ return; }

		Map.BusDocumentTaken = 1;

		SetAvailableMapGoals( TEAM.ALLIES, true, "CAPPOINT_Bus" );

		if ( Map.BusFuelTaken == 1 )
		{
			SetAvailableMapGoals( TEAM.AXIS, false, "DEFEND_Axis_FlagBus_.*" );
			SetAvailableMapGoals( TEAM.AXIS, false, ".*_Axis_secondflag_.*" );

			SetAvailableMapGoals( TEAM.ALLIES, false, ".*_Allied_secondflag_.*" );

			SetAvailableMapGoals( TEAM.ALLIES, true, "DEFEND_Bus_.*" );

			SetAvailableMapGoals( TEAM.AXIS, true, "DEFEND_Bus_.*" );
		}

		Util.MapDebugPrint( "Bus_Documents_Taken" );
	},

	tcr_fuel_scriptname_Taken = function( trigger )
	{
		if ( TestMap )
			{ return; }

		Map.BusFuelTaken = 1;

		SetAvailableMapGoals( TEAM.ALLIES, true, "CAPPOINT_Bus" );

		if ( Map.BusDocumentTaken == 1 )
		{
			SetAvailableMapGoals( TEAM.AXIS, false, "DEFEND_Axis_FlagBus_.*" );
			SetAvailableMapGoals( TEAM.AXIS, false, ".*_Axis_secondflag_.*" );

			SetAvailableMapGoals( TEAM.ALLIES, false, ".*_Allied_secondflag_.*" );

			SetAvailableMapGoals( TEAM.ALLIES, true, "DEFEND_Bus_.*" );

			SetAvailableMapGoals( TEAM.AXIS, true, "DEFEND_Bus_.*" );
		}

		Util.MapDebugPrint( "Bus_Fuel_Taken" );
	},

	Bus_Fuel_Returned = function( trigger )
	{
		if ( TestMap )
			{ return; }

		Map.BusFuelTaken = 0;

		SetAvailableMapGoals( TEAM.AXIS, true, "DEFEND_Axis_FlagBus_.*" );

		Util.MapDebugPrint( "Bus_Fuel_Returned" );
	},

	Bus_Documents_Returned = function( trigger )
	{
		if ( TestMap )
			{ return; }

		Map.BusDocumentTaken = 0;

		SetAvailableMapGoals( TEAM.AXIS, true, "DEFEND_Axis_FlagBus_.*" );

		Util.MapDebugPrint( "Bus_Documents_Returned" );
	},

	Bus_Captured = function( trigger )
	{
		if ( TestMap )
			{ return; }

		Map.BusCaptured = 1;

		SetGoalPriority( "BUILD_Barrier_1", 0.9, TEAM.AXIS, CLASS.ENGINEER );

		SetAvailableMapGoals( TEAM.ALLIES, true, "PLANT_Barrier_1" );

		Util.MapDebugPrint( "Bus_Captured" );
	},

	Bus_Escaping = function( trigger )
	{
		if ( TestMap )
			{ return; }

		Map.BusEscaping = 1;

		//Util.ChangeSpawn( TEAM.ALLIES, 0 );	//near constructible
		Util.ChangeSpawn( TEAM.ALLIES, 5 );	//near constructible
		Util.ChangeSpawn( TEAM.AXIS, 3 );	//bunker near hangar

		SetAvailableMapGoals( TEAM.ALLIES, false, "CAPPOINT_Bus" );

		SetGoalPriority( "RIDE_Bus", 0.95, TEAM.ALLIES, CLASS.SOLDIER );

		if ( Map.BusStatus == 1 )
		{
			SetAvailableMapGoals( TEAM.ALLIES, true, "RIDE_Bus" );
		}
		else
		{
			SetAvailableMapGoals( TEAM.ALLIES, false, "RIDE_Bus" );

			SetAvailableMapGoals( TEAM.ALLIES, true, "BUILD_Bus" );

			SetGoalPriority( "BUILD_Bus", 0.95, TEAM.ALLIES, CLASS.ENGINEER );
		}

		//BusNearBarrier1 = OnTriggerRegion(AABB(-1105.433,-2844.047,1046.125,-808.262,-2731.939,1120.125), Map.Bus_Near_Barrier1);
		//BusNearPlane = OnTriggerRegion(AABB(2687.125,4014.807,1047.125,2925.188,4268.565,1155.075), Map.Bus_Near_Plane);

		SetAvailableMapGoals( TEAM.ALLIES, false, "DEFEND_Bus_.*" );
		SetAvailableMapGoals( TEAM.ALLIES, false, "BUILD_Constructible" );

		SetAvailableMapGoals( TEAM.AXIS, false, "DEFEND_Bus_.*" );
		SetAvailableMapGoals( TEAM.AXIS, false, "BUILD_Constructible" );

		SetAvailableMapGoals( TEAM.AXIS, true, "CALLARTILLERY_Axis_AtBarrier1_1" );
		SetAvailableMapGoals( TEAM.AXIS, true, "ARTILLERY_S_Axis_AtBarrier1_2" );
		SetAvailableMapGoals( TEAM.AXIS, true, "DEFEND_Axis_AtBarrier1_.*" );

		SetAvailableMapGoals( TEAM.ALLIES, true, ".*_Allies_AtBarrier1_.*" );

		SetGoalPriority( "CALLARTILLERY_Allies_AtBarrier1_.*", 0.95, TEAM.ALLIES, CLASS.FIELDOPS );
		SetGoalPriority( "ARTILLERY_S_Allies_AtBarrier1_.*", 0.95, TEAM.ALLIES, CLASS.FIELDOPS );

		Util.MapDebugPrint( "Bus_Escaping" );
	},

	Bus_Near_Barrier1 =
 	{
 		Name="Bus_Near_Barrier1",
		TriggerOnEntity = GetGoal("MOVER_truck").GetEntity(),
 		OnEnter = function(ent)
 		{
			Map.BusAtBarrier_1 = 1;

			//BusPastBarrier1 = OnTriggerRegion(AABB(-167.388,-3835.898,1046.125,212.633,-3536.205,1120.125), Map.Bus_Past_Barrier1);

			if ( Map.Barrier1Builded == 1 )
			{
				SetAvailableMapGoals( TEAM.ALLIES, false, "RIDE_Bus" );
			}
			else
			{
				SetAvailableMapGoals( TEAM.ALLIES, true, "RIDE_Bus" );
			}

			Util.MapDebugPrint(GetEntName(ent),"is near the Barrier 1");

 		},
 		OnExit = function(ent)
 		{
			Map.BusAtBarrier_1 = 0;

			SetAvailableMapGoals( TEAM.AXIS, false, "BUILD_Barrier_1" );
 		},
	},

	Bus_Destroyed = function( trigger )
	{
		if ( TestMap )
			{ return; }

		Map.BusStatus = 0;
		//Util.SetGoalOffset( 15, 10, -10, Map.Build_Bus );

		if ( Map.Bus_Is_Near_Plane == 1 )
		{
			SetAvailableMapGoals( TEAM.ALLIES, false, Map.Build_Bus );

		}

		SetAvailableMapGoals( TEAM.ALLIES, false, "RIDE_Bus" );
		sleep(0.5);
		Util.SetPositionGoal( Map.Build_Bus, Map.Mover_truck );

		Util.MapDebugPrint( "Bus_Destroyed" );
	},

	Bus_Built = function( trigger )
	{
		if ( TestMap )
			{ return; }

		Map.BusStatus = 1;

		if ( Map.Bus_Is_Near_Plane == 1 )
		{
			SetAvailableMapGoals( TEAM.ALLIES, false, "RIDE_Bus" );
		}
		else if ( Map.Barrier1Builded == 1 and Map.BusAtBarrier_1 == 1 )
		{
			SetAvailableMapGoals( TEAM.ALLIES, false, "RIDE_Bus" );
		}
		else if (Map.BusOnTheBridge == 1 and Map.BridgeBuilded == 0 )
		{
			SetAvailableMapGoals( TEAM.ALLIES, false, "RIDE_Bus" );
		}
		else if ( Map.Barrier2Builded == 1 and Map.BusAtBarrier_2 == 1 )
		{
			SetAvailableMapGoals( TEAM.ALLIES, false, "RIDE_Bus" );
		}
		else
		{
			SetAvailableMapGoals( TEAM.ALLIES, true, "RIDE_Bus" );
		}

		Util.MapDebugPrint( "Bus_Built" );
	},

	Bus_Past_Barrier1 =
 	{
 		Name="Bus_Past_Barrier1",
		TriggerOnEntity = GetGoal("MOVER_truck").GetEntity(),
 		OnEnter = function(ent)
 		{
			Util.ChangeSpawn( TEAM.AXIS, 3 );

			SetAvailableMapGoals( TEAM.AXIS, false, "CALLARTILLERY_Axis_AtBarrier1_1" );
			SetAvailableMapGoals( TEAM.AXIS, false, "ARTILLERY_S_Axis_AtBarrier1_2" );

			SetAvailableMapGoals( TEAM.ALLIES, true, "BUILD_Road_MG" );
			SetAvailableMapGoals( TEAM.ALLIES, true, "REPAIRMG42_Road_MG" );
			SetAvailableMapGoals( TEAM.ALLIES, true, "MOUNTMG42_Road_MG" );
			SetAvailableMapGoals( TEAM.ALLIES, true, "PLANT_Barrier_2_1" );
			SetAvailableMapGoals( TEAM.ALLIES, true, "BUILD_Bridge" );

			SetAvailableMapGoals( TEAM.AXIS, true, "PLANT_Road_MG" );
			SetAvailableMapGoals( TEAM.AXIS, true, "PLANT_Bridge" );
			SetAvailableMapGoals( TEAM.AXIS, true, "BUILD_Barrier_2" );
			SetAvailableMapGoals( TEAM.AXIS, true, "CALLARTILLERY_AxisPastBarrier1_1" );
			SetAvailableMapGoals( TEAM.AXIS, true, "ARTILLERY_S_AxisPastBarrier1_2" );
			SetAvailableMapGoals( TEAM.AXIS, true, "ARTILLERY_S_AxisPastBarrier1_3" );

			SetGoalPriority( "PLANT_Road_MG", 0.45, TEAM.AXIS, CLASS.ENGINEER );
			SetGoalPriority( "PLANT_Road_MG", 0.9, TEAM.AXIS, CLASS.COVERTOPS );

			Util.MapDebugPrint(GetEntName(ent),"is near the Tunnel");

 		},
 		OnExit = function(ent)
 		{

 		},
	},

	Allied_5_Spawn = function( trigger )
	{
		if ( TestMap )
			{ return; }

		Map.Allied5Spawn = 1;

		//Util.ChangeSpawn( TEAM.ALLIES, 0 );
		Util.ChangeSpawn( TEAM.ALLIES, 3 );

		SetAvailableMapGoals( TEAM.AXIS, false, "CALLARTILLERY_AxisPastBarrier1_1" );
		SetAvailableMapGoals( TEAM.AXIS, false, "ARTILLERY_S_AxisPastBarrier1_2" );
		SetAvailableMapGoals( TEAM.AXIS, false, "ARTILLERY_S_AxisPastBarrier1_3" );
		SetAvailableMapGoals( TEAM.AXIS, false, "DEFEND_Axis_AtBarrier1_.*" );

		SetAvailableMapGoals( TEAM.ALLIES, false, ".*_Allies_AtBarrier1_.*" );
		SetAvailableMapGoals( TEAM.ALLIES, false, "MOUNTMG42_Road_MG" );

		//SetAvailableMapGoals( TEAM.AXIS, true, "MOUNTMG42_Road_MG" );
		SetAvailableMapGoals( TEAM.AXIS, true, "ROUTE_AxisPlaneSpawn" );
		SetAvailableMapGoals( TEAM.AXIS, true, ".*_Axis_AtBridge_.*" );
		SetAvailableMapGoals( TEAM.AXIS, true, "DEFEND_BackAccessToHangar_.*" );

		SetGoalPriority( "MOUNTMG42_Road_MG", 0.8, TEAM.AXIS, CLASS.SOLDIER );
		SetGoalPriority( "CALLARTILLERY_Axis_AtBridge_6", 0.9, TEAM.AXIS, CLASS.FIELDOPS );
		SetGoalPriority( "ARTILLERY_S_Axis_AtBridge_7", 0.9, TEAM.AXIS, CLASS.FIELDOPS );
		SetGoalPriority( "ARTILLERY_S_Axis_AtBridge_8", 0.9, TEAM.AXIS, CLASS.FIELDOPS );
		SetGoalPriority( "DEFEND_BackAccessToHangar_.*", 0.6, TEAM.AXIS, 0 );

		SetAvailableMapGoals( TEAM.ALLIES, true, "ATTACK_Allies_AtBridge_.*" );
		SetAvailableMapGoals( TEAM.ALLIES, true, "CALLARTILLERY_Allies_AtBridge_5" );
		SetAvailableMapGoals( TEAM.ALLIES, true, "ARTILLERY_S_Allies_AtBridge_6" );
		SetAvailableMapGoals( TEAM.ALLIES, true, "CALLARTILLERY_Allies_AtBridge_7" );
		SetAvailableMapGoals( TEAM.ALLIES, true, "ARTILLERY_S_Allies_AtBridge_8" );
		SetAvailableMapGoals( TEAM.ALLIES, true, "PLANT_Hangar" );
		SetAvailableMapGoals( TEAM.ALLIES, true, "ROUTE_Allied5Spawn" );

		SetGoalPriority( "CALLARTILLERY_Allies_AtBridge_5", 0.9, TEAM.ALLIES, CLASS.FIELDOPS );
		SetGoalPriority( "ARTILLERY_S_Allies_AtBridge_6", 0.9, TEAM.ALLIES, CLASS.FIELDOPS );
		SetGoalPriority( "CALLARTILLERY_Allies_AtBridge_7", 0.9, TEAM.ALLIES, CLASS.FIELDOPS );
		SetGoalPriority( "ARTILLERY_S_Allies_AtBridge_8", 0.9, TEAM.ALLIES, CLASS.FIELDOPS );

		//BusAtBridge = OnTriggerRegion(AABB(2288.865,-568.343,1015.125,2488.711,-417.035,1089.125), Map.Bus_At_Bridge);
		//BusAtBarrier2 = OnTriggerRegion(AABB(2325.546,859.912,1046.125,2715.242,1007.095,1123.125), Map.Bus_At_Barrier2);

		Util.MapDebugPrint( "Allied_captured_5_Spawn" );
	},

	Road_MG_Built = function( trigger )
	{
		if ( TestMap )
			{ return; }

		//SetAvailableMapGoals( TEAM.AXIS, true, "MOUNTMG42_Road_MG" );

		if ( Map.Allied5Spawn == 0 )
		{
			SetAvailableMapGoals( TEAM.ALLIES, true, "MOUNTMG42_Road_MG" );
		}

		Util.MapDebugPrint( "Road_MG_Built" );
	},

	Road_MG_Destroyed = function( trigger )
	{
		if ( TestMap )
			{ return; }

		//SetAvailableMapGoals( TEAM.AXIS, false, "MOUNTMG42_Road_MG" );

		SetAvailableMapGoals( TEAM.ALLIES, false, "MOUNTMG42_Road_MG" );

		Util.MapDebugPrint( "Road_MG_Destroyed" );
	},

	Bus_At_Bridge =
 	{
 		Name="Bus_At_Bridge",
		TriggerOnEntity = GetGoal("MOVER_truck").GetEntity(),
 		OnEnter = function(ent)
 		{
			Map.BusOnTheBridge = 1;

			if ( Map.BridgeBuilded == 0 )
			{
				SetAvailableMapGoals( TEAM.ALLIES, false, "RIDE_Bus" );

				SetGoalPriority( "BUILD_Bridge", 0.93, TEAM.ALLIES, CLASS.ENGINEER );
			}
			else
			{
				SetAvailableMapGoals( TEAM.ALLIES, true, "RIDE_Bus" );
			}

			Util.MapDebugPrint(GetEntName(ent),"is on the Bridge");

 		},
 		OnExit = function(ent)
 		{
			Map.BusOnTheBridge = 0;

			SetAvailableMapGoals( TEAM.AXIS, false, "PLANT_Bridge" );
 		},
	},

	Bridge_Built = function( trigger )
	{
		if ( TestMap )
			{ return; }

		Wp.SetWaypointFlag( "d", "jump", false);
		Wp.SetWaypointFlag( "e", "jump", false);
		Wp.SetWaypointFlag( "f", "jump", false);
		Wp.SetWaypointFlag( "g", "jump", false);

		if ( Map.BusStatus == 0 )
		{
			SetGoalPriority( "BUILD_Bus", 0.98, TEAM.ALLIES, CLASS.ENGINEER );
		}

		if ( Map.BusStatus == 1 and Map.BusOnTheBridge == 1 )
		{
			SetAvailableMapGoals( TEAM.ALLIES, true, "RIDE_Bus" );
		}

		Map.BridgeBuilded = 1;

		Util.MapDebugPrint( "Bridge_Built" );
	},

	Bridge_Destroyed = function( trigger )
	{
		if ( TestMap )
			{ return; }

		Wp.SetWaypointFlag( "d", "jump", true);
		Wp.SetWaypointFlag( "e", "jump", true);
		Wp.SetWaypointFlag( "f", "jump", true);
		Wp.SetWaypointFlag( "g", "jump", true);

		Map.BridgeBuilded = 0;

		Util.MapDebugPrint( "Bridge_Destroyed" );
	},

	Barrier_2_Built = function( trigger )
	{
		if ( TestMap )
			{ return; }

		Map.Barrier2Builded = 1;

		if ( Map.BusStatus == 0 and Map.BusAtBarrier_2 == 1 )
		{
			SetGoalPriority( "BUILD_Bus", 0.6, TEAM.ALLIES, CLASS.ENGINEER );
			SetGoalPriority( "PLANT_Barrier_2_1", 0.85, TEAM.ALLIES, CLASS.ENGINEER );
		}
		//else
		//{
		//	SetGoalPriority( "BUILD_Bus", 0.98, TEAM.ALLIES, CLASS.ENGINEER );
		//}

		Util.MapDebugPrint( "Barrier_2_Built" );
	},

	Barrier_2_Destroyed = function( trigger )
	{
		if ( TestMap )
			{ return; }

		Map.Barrier2Builded = 0;

		if ( Map.BusStatus == 0 and Map.BusAtBarrier_2 == 1 )
		{
			SetAvailableMapGoals( TEAM.ALLIES, false, "BUILD_Bus" );
			sleep(0.2);
			SetAvailableMapGoals( TEAM.ALLIES, true, "BUILD_Bus" );
			SetGoalPriority( "BUILD_Bus", 0.98, TEAM.ALLIES, CLASS.ENGINEER );
			Util.SetMaxUsersInProgress( 2, "BUILD_Bus" );
		}

		if ( Map.BusStatus == 1 and Map.BusAtBarrier_2 == 1 )
		{
			SetAvailableMapGoals( TEAM.ALLIES, true, "RIDE_Bus" );
		}

		Util.MapDebugPrint( "Barrier_2_Destroyed" );
	},

	Bus_At_Barrier2 =
 	{
 		Name="Bus_At_Barrier2",
		TriggerOnEntity = GetGoal("MOVER_truck").GetEntity(),
 		OnEnter = function(ent)
 		{
			Map.BusAtBarrier_2 = 1;

			if ( Map.Barrier2Builded == 1 )
			{
				SetAvailableMapGoals( TEAM.ALLIES, false, "RIDE_Bus" );

				SetGoalPriority( "PLANT_Barrier_2_1", 0.85, TEAM.ALLIES, CLASS.ENGINEER );
			}
			else
			{
				SetAvailableMapGoals( TEAM.ALLIES, true, "RIDE_Bus" );
			}

			Util.MapDebugPrint("Bus_At_Barrier2");

 		},
 		OnExit = function(ent)
 		{
			Map.BusAtBarrier_2 = 0;

			SetAvailableMapGoals( TEAM.ALLIES, false, "BUILD_Road_MG" );
			SetAvailableMapGoals( TEAM.ALLIES, false, "REPAIRMG42_Road_MG" );
			SetAvailableMapGoals( TEAM.ALLIES, false, "PLANT_Barrier_2_1" );

			SetAvailableMapGoals( TEAM.AXIS, false, "DEFEND_Axis_AtBridge_.*" );
			SetAvailableMapGoals( TEAM.AXIS, false, "MOUNTMG42_Road_MG" );
			SetAvailableMapGoals( TEAM.AXIS, false, "BUILD_Barrier_2" );

			SetAvailableMapGoals( TEAM.AXIS, true, "CALLARTILLERY_AxisPastBarrier2_1" );
			SetAvailableMapGoals( TEAM.AXIS, true, "ARTILLERY_S_AxisPastBarrier2_2" );
			SetAvailableMapGoals( TEAM.AXIS, true, "DEFEND_AxisPastBarrier2_.*" );

			SetGoalPriority( "CALLARTILLERY_Axis_AtBridge_6", 0.7, TEAM.AXIS, CLASS.FIELDOPS );
			SetGoalPriority( "ARTILLERY_S_Axis_AtBridge_7", 0.7, TEAM.AXIS, CLASS.FIELDOPS );
			SetGoalPriority( "ARTILLERY_S_Axis_AtBridge_8", 0.7, TEAM.AXIS, CLASS.FIELDOPS );

			SetAvailableMapGoals( TEAM.ALLIES, false, "ATTACK_Allies_AtBridge_.*" );

			SetAvailableMapGoals( TEAM.ALLIES, true, ".*_AlliedPastBarrier2_.*" );
 		},
	},

	Bus_Near_Plane =
 	{
 		Name="Bus_Near_Plane",
		TriggerOnEntity = GetGoal("MOVER_truck").GetEntity(),
 		OnEnter = function(ent)
 		{
			Map.Bus_Is_Near_Plane = 1;

			SetAvailableMapGoals( TEAM.ALLIES, false, Map.Build_Bus );

			SetAvailableMapGoals( TEAM.ALLIES, true, "CAPPOINT_Plane" );
			SetAvailableMapGoals( TEAM.ALLIES, true, "FLAG_tcr_planefuel_scriptname" );

			SetAvailableMapGoals( TEAM.ALLIES, false, "RIDE_Bus" );

			SetGoalPriority( "CALLARTILLERY_AxisPastBarrier2_1", 0.75, TEAM.AXIS, CLASS.FIELDOPS );
			SetGoalPriority( "ARTILLERY_S_AxisPastBarrier2_2", 0.75, TEAM.AXIS, CLASS.FIELDOPS );

			Util.MapDebugPrint("Bus_Near_Plane");

 		},
 		OnExit = function(ent)
 		{

 		},
	},

	Hangar_Destroyed = function( trigger )
	{
		if ( TestMap )
			{ return; }

		Map.HangarDoor = 0;

		Util.MapDebugPrint( "Hangar_Destroyed" );
	},

	tcr_planefuel_scriptname_Taken = function( trigger )
	{
		if ( TestMap )
			{ return; }

		Map.planefuelTaken = 1;

		if ( Map.HangarDoor == 1 )	//intact
		{
			SetAvailableMapGoals( TEAM.AXIS, true, "DEFEND_AxisInHangar_1" );
			SetAvailableMapGoals( TEAM.AXIS, true, "DEFEND_AxisInHangar_2" );
			SetAvailableMapGoals( TEAM.AXIS, true, "DEFEND_AxisInHangar_6" );
			SetAvailableMapGoals( TEAM.AXIS, true, "DEFEND_AxisInHangar_11" );

			SetAvailableMapGoals( TEAM.ALLIES, true, "ATTACK_AlliedInHangar_1" );
			SetAvailableMapGoals( TEAM.ALLIES, true, "ATTACK_AlliedInHangar_3" );

			SetGoalPriority( "DEFEND_AxisInHangar_1", 0.9, TEAM.AXIS, 0 );
			SetGoalPriority( "DEFEND_AxisInHangar_2", 0.9, TEAM.AXIS, 0 );
			SetGoalPriority( "DEFEND_AxisInHangar_6", 0.9, TEAM.AXIS, 0 );
			SetGoalPriority( "DEFEND_AxisInHangar_11", 0.9, TEAM.AXIS, 0 );
			SetGoalPriority( "DEFEND_AxisInHangar_.*", 0.7, TEAM.AXIS, CLASS.FIELDOPS );

			SetGoalPriority( "ATTACK_AlliedInHangar_1", 0.7, TEAM.ALLIES, 0 );
			SetGoalPriority( "ATTACK_AlliedInHangar_3", 0.7, TEAM.ALLIES, 0 );
		}
		else
		{
			SetAvailableMapGoals( TEAM.AXIS, false, "DEFEND_AxisPastBarrier2_.*" );

			SetAvailableMapGoals( TEAM.AXIS, true, "DEFEND_AxisInHangar_.*" );

			SetAvailableMapGoals( TEAM.ALLIES, false, "ATTACK_AlliedPastBarrier2_.*" );

			SetAvailableMapGoals( TEAM.ALLIES, true, "ATTACK_AlliedInHangar_.*" );

			SetGoalPriority( "DEFEND_AxisInHangar_.*", 0.85, TEAM.AXIS, 0 );
			SetGoalPriority( "DEFEND_AxisInHangar_1", 0.9, TEAM.AXIS, 0 );
			SetGoalPriority( "DEFEND_AxisInHangar_2", 0.9, TEAM.AXIS, 0 );
			SetGoalPriority( "DEFEND_AxisInHangar_6", 0.9, TEAM.AXIS, 0 );
			SetGoalPriority( "DEFEND_AxisInHangar_.*", 0.7, TEAM.AXIS, CLASS.FIELDOPS );

			SetAvailableMapGoals( TEAM.AXIS, true, "DEFEND_AxisPastBarrier2_.*" );

			SetAvailableMapGoals( TEAM.ALLIES, true, "ATTACK_AlliedPastBarrier2_.*" );

			SetGoalPriority( "DEFEND_AxisPastBarrier2_.*", 0.45, TEAM.AXIS, 0 );

			SetGoalPriority( "ATTACK_AlliedPastBarrier2_.*", 0.45, TEAM.ALLIES, 0 );
		}

		Util.MapDebugPrint( "Plane_Fuel_Taken" );
	},

	Plane_Fuel_Returned = function( trigger )
	{
		if ( TestMap )
			{ return; }

		Map.planefuelTaken = 0;

		if ( Map.HangarDoor == 1 )	//intact
		{
			SetAvailableMapGoals( TEAM.AXIS, false, "DEFEND_AxisInHangar_1" );
			SetAvailableMapGoals( TEAM.AXIS, false, "DEFEND_AxisInHangar_2" );
			SetAvailableMapGoals( TEAM.AXIS, false, "DEFEND_AxisInHangar_6" );
			SetAvailableMapGoals( TEAM.AXIS, false, "DEFEND_AxisInHangar_11" );

			SetAvailableMapGoals( TEAM.ALLIES, false, "ATTACK_AlliedInHangar_1" );
			SetAvailableMapGoals( TEAM.ALLIES, false, "ATTACK_AlliedInHangar_3" );
		}
		else
		{
			SetAvailableMapGoals( TEAM.AXIS, false, "DEFEND_AxisInHangar_.*" );

			SetAvailableMapGoals( TEAM.ALLIES, false, "ATTACK_AlliedInHangar_.*" );

			SetGoalPriority( "DEFEND_AxisPastBarrier2_.*", 0.5, TEAM.AXIS, 0 );

			SetGoalPriority( "ATTACK_AlliedPastBarrier2_.*", 0.5, TEAM.ALLIES, 0 );
		}

		Util.MapDebugPrint( "Plane_Fuel_Returned" );
	},

	Plane_Captured = function( trigger )
	{
		if ( TestMap )
			{ return; }

		if ( Map.HangarDoor == 1 and Map.planefuelTaken == 1 )	//intact & placed
		{
			SetAvailableMapGoals( TEAM.ALLIES, false, "ATTACK_AlliedInHangar_.*" );

			SetAvailableMapGoals( TEAM.AXIS, false, "DEFEND_AxisInHangar_.*" );

			SetAvailableMapGoals( TEAM.ALLIES, true, "ATTACK_AlliedPastBarrier2_.*" );

			SetAvailableMapGoals( TEAM.AXIS, true, "DEFEND_AxisPastBarrier2_.*" );

			SetGoalPriority( "DEFEND_AxisPastBarrier2_.*", 0.95, TEAM.AXIS, 0 );
			SetGoalPriority( "DEFEND_AxisPastBarrier2_.*", 0.7, TEAM.AXIS, CLASS.FIELDOPS );

			Util.BotChat( TEAM.ALLIES, "vsay", VOICE.G_CHEER, 1 );
			sleep(1.5);
			Util.BotChat( TEAM.ALLIES, "vsay", VOICE.G_OOPS, 1 );
		}

		Util.MapDebugPrint( "Plane_Captured" );
	},

	Allies_Win = function( trigger )
	{
		if ( TestMap )
			{ return; }

		Util.BotChat( TEAM.ALLIES, "vsay", VOICE.G_GOODGAME, 1 );
		sleep(1.5);
		Util.BotChat( TEAM.ALLIES, "vsay", VOICE.G_NEGATIVE, 1 );

		Util.MapDebugPrint( "Allies_Win" );
	},

	cablecar2_in_Village =
 	{
 		Name="cablecar2_in_Village",
		TriggerOnEntity = GetGoal("MOVER_cablecar2").GetEntity(),
 		OnEnter = function(ent)
 		{
			Map.cablecar_2_position = 0;

			//Util.MapDebugPrint(GetEntName(ent),"is in Village station");

 		},
 		OnExit = function(ent)
 		{
			Map.cablecar_2_position = -1;

			//Util.MapDebugPrint(GetEntName(ent),"is leaving Village station");
 		},
	},


	cablecar2_in_Castle =
 	{
 		Name="cablecar2_in_Castle",
		TriggerOnEntity = GetGoal("MOVER_cablecar2").GetEntity(),
 		OnEnter = function(ent)
 		{
			Map.cablecar_2_position = 1;

			//Util.MapDebugPrint(GetEntName(ent),"is in Castle station");

 		},
 		OnExit = function(ent)
 		{
			Map.cablecar_2_position = -1;

			//Util.MapDebugPrint(GetEntName(ent),"is leaving Castle station");
 		},
	},

	cablecar1_in_Village =
 	{
 		Name="cablecar1_in_Village",
		TriggerOnEntity = GetGoal("MOVER_cablecar1").GetEntity(),
 		OnEnter = function(ent)
 		{
			Map.cablecar_1_position = 0;

			//Util.MapDebugPrint(GetEntName(ent),"is in Village station");

 		},
 		OnExit = function(ent)
 		{
			Map.cablecar_1_position = -1;

			//Util.MapDebugPrint(GetEntName(ent),"is leaving Village station");
 		},
	},

	cablecar1_in_Castle =
 	{
 		Name="cablecar1_in_Castle",
		TriggerOnEntity = GetGoal("MOVER_cablecar1").GetEntity(),
 		OnEnter = function(ent)
 		{
			Map.cablecar_1_position = 1;

			//Util.MapDebugPrint(GetEntName(ent),"is in Castle station");

 		},
 		OnExit = function(ent)
 		{
			Map.cablecar_1_position = -1;

			//Util.MapDebugPrint(GetEntName(ent),"is leaving Castle station");
 		},
	},

};

global OnMapLoad = function()
{
	if ( TestMapOn )
		{ Util.AutoTestMap(); }

	OnTrigger( "Truck Barrier #1 has been constructed.", Map.Barrier_1_Built );
	OnTrigger( "Truck Barrier #2 has been constructed.", Map.Barrier_2_Built );
	OnTrigger( "^1The Allied Forces have constructed the Bridge!", Map.Bridge_Built );
	OnTrigger( "The Truck has been repaired!", Map.Bus_Built );
	OnTrigger( "The Truck has been damaged!", Map.Bus_Destroyed );
	OnTrigger( "^1The Axis have built the Steel Door (up at the castle)!", Map.Castle_Steel_Door_Built );
	OnTrigger( "^1Axis have built The High Guardtower.", Map.Guardhouse_Built );
	OnTrigger( "^1The Allied Forces have constructed the Road MG Nest!", Map.Road_MG_Built );
	OnTrigger( "^1The Axis have built the Tram Door (lower tram station)!", Map.Tram_Door_Built );
	OnTrigger( "^1The Avalanche Wall has been Destroyed by the Allies!", Map.Avalanche_Wall_Destroyed );
	OnTrigger( "Truck Barrier #1 has been destroyed.", Map.Barrier_1_Destroyed );
	OnTrigger( "Truck Barrier #2 has been destroyed.", Map.Barrier_2_Destroyed );
	OnTrigger( "^1The Axis have dynamited the Bridge!", Map.Bridge_Destroyed );
	OnTrigger( "^1The Allies have destroyed the Steel Door (up at the castle)!", Map.Castle_Steel_Door_Destroyed );
	OnTrigger( "^1The Axis High Guardtower has been destroyed!", Map.Guardhouse_Destroyed );
	OnTrigger( "^1The Allies have destroyed the Hangar Door!", Map.Hangar_Destroyed );
	OnTrigger( "^1The Axis team has destroyed the Road MG Nest!", Map.Road_MG_Destroyed );
	OnTrigger( "^1The Allies have destroyed the Tram Door (lower tram station)!", Map.Tram_Door_Destroyed );
	OnTrigger( "^1The Tunnel Entrance has been destroyed by the Allies!", Map.Tunnel_Entrance_Destroyed );
	OnTrigger( "Allies have stolen the Document!", Map.tcr_docs_scriptname_Taken );
	OnTrigger( "Allies have stolen the Bus Fuel!", Map.tcr_fuel_scriptname_Taken );
	OnTrigger( "Allies have stolen the Plane Fuel!", Map.tcr_planefuel_scriptname_Taken );
	OnTrigger( "^1The Allied Forces have secured the documents on the Bus!", Map.Bus_Captured );
	OnTrigger( "^1The Allied Forces have secured the Bus Fuel!", Map.Bus_Captured );
	OnTrigger( "^1The Allied Forces have won the game!", Map.Allies_Win );
	OnTrigger( "allies_hq_objective_captured", Map.Plane_Captured );
	OnTrigger( "allilowerflag", Map.firstflag_Allies_Captured );
	OnTrigger( "alliupperflag", Map.secondflag_Allies_Captured );
	OnTrigger( "^1The Axis Constructible (castle-tunnel wall) has been constructed!", Map.Castle_wall_Built );
	OnTrigger( "^1The Axis Constructible (castle-tunnel wall) has been destroyed!", Map.Castle_wall_Destroyed );
	OnTrigger( "^1The Allied Constructible (castle-ladder) has been constructed!", Map.Castle_Ladder_Built );
	OnTrigger( "^1The Allied Constructible (castle-ladder) has been destroyed!", Map.Castle_Ladder_Destroyed );
	OnTrigger( "^1Allied Command Post constructed. Charge speed increased!", Map.Allied_CP_Built );
	OnTrigger( "^1Axis team has destroyed the Allied Command Post!", Map.Allied_CP_Destroyed );
	OnTrigger( "^1Axis Command Post constructed. Charge speed increased!", Map.Axis_CP_Built );
	OnTrigger( "^1Allied team has destroyed the Axis Command Post!", Map.Axis_CP_Destroyed );
	OnTrigger( "Flag returned tcr_fuel_scriptname!", Map.Bus_Fuel_Returned );
	OnTrigger( "Flag returned tcr_docs_scriptname!", Map.Bus_Documents_Returned );
	OnTrigger( "Flag returned tcr_planefuel_scriptname!", Map.Plane_Fuel_Returned );
	OnTrigger( "Planted at Tunnel Entrance.", Map.Planted_at_Tunnel_Entrance );
	OnTrigger( "Planted at Barrier #1.", Map.Planted_Barrier_1 );
	OnTrigger( "Planted at the Constructible.", Map.Planted_Constructible );
	OnTrigger( "Planted at Avalanche Wall.", Map.Planted_AvalancheWall );
	OnTrigger( "^1The Allied Forces have secured the 'Allied 5-spawn'!", Map.Allied_5_Spawn );

	OnTrigger( "^1Allied team is escaping with the bus!", Map.Bus_Escaping );

	SetAvailableMapGoals( TEAM.ALLIES, false, ".*" );
	SetAvailableMapGoals( TEAM.ALLIES, true, "PLANT_Avalanche_Wall" );
	SetAvailableMapGoals( TEAM.ALLIES, true, "PLANT_Tunnel_Entrance" );
	SetAvailableMapGoals( TEAM.ALLIES, true, "DEFEND_Allied_start_.*" );
	SetAvailableMapGoals( TEAM.ALLIES, true, "CALLARTILLERY_Allied_start_.*" );
	SetAvailableMapGoals( TEAM.ALLIES, true, "ARTILLERY_S_Allied_start_.*" );
	SetAvailableMapGoals( TEAM.ALLIES, true, "AIRSTRIKE_Allied_start_33" );

	SetAvailableMapGoals( TEAM.AXIS, false, ".*" );
	SetAvailableMapGoals( TEAM.AXIS, true, "ROUTE_.*" );
	SetAvailableMapGoals( TEAM.AXIS, true, "FLAG_.*" );
	SetAvailableMapGoals( TEAM.AXIS, true, "HEALTHCAB_.*" );
	SetAvailableMapGoals( TEAM.AXIS, true, "AMMOCAB_.*" );
	SetAvailableMapGoals( TEAM.AXIS, true, "BUILD_Command_Post" );
	SetAvailableMapGoals( TEAM.AXIS, true, "BUILD_Barrier_1" );
	SetAvailableMapGoals( TEAM.AXIS, true, "BUILD_Tram_Door" );
	SetAvailableMapGoals( TEAM.AXIS, true, "BUILD_Guardhouse" );
	//SetAvailableMapGoals( TEAM.AXIS, true, "PLANT_Constructible_1" );
	SetAvailableMapGoals( TEAM.AXIS, true, "PLANT_Command_Post" );
	SetAvailableMapGoals( TEAM.AXIS, true, "CALLARTILLERY_Axis_start_.*" );
	SetAvailableMapGoals( TEAM.AXIS, true, "ARTILLERY_S_Axis_start_.*" );
	SetAvailableMapGoals( TEAM.AXIS, true, "DEFEND_Axis_start_.*" );
	SetAvailableMapGoals( TEAM.AXIS, true, "AIRSTRIKE_Axis_start_30" );
	SetAvailableMapGoals( TEAM.AXIS, true, "PLANTMINE_Axis_start_.*" );
	SetAvailableMapGoals( TEAM.AXIS, false, "ROUTE_AxisPlaneSpawn" );

	SetGoalPriority( "PLANT_Avalanche_Wall", 0.92, TEAM.ALLIES, CLASS.ENGINEER );
	SetGoalPriority( "PLANT_Tunnel_Entrance", 0.91, TEAM.ALLIES, CLASS.ENGINEER );
	SetGoalPriority( "CHECKPOINT_firstflag", 0.91, TEAM.ALLIES, 0 );
	SetGoalPriority( "PLANT_Guardhouse", 0.0, TEAM.ALLIES, CLASS.ENGINEER );
	SetGoalPriority( "PLANT_Barrier_1", 0.65, TEAM.ALLIES, CLASS.ENGINEER );
	SetGoalPriority( "REPAIRMG42_.*", 0.60, TEAM.ALLIES, CLASS.ENGINEER );

	SetGoalPriority( "BUILD_Barrier_1", 0.45, TEAM.AXIS, CLASS.ENGINEER );
	SetGoalPriority( "BUILD_Constructible", 0.67, TEAM.AXIS, CLASS.ENGINEER );
	SetGoalPriority( "BUILD_Tram_Door", 0.68, TEAM.AXIS, CLASS.ENGINEER );
	SetGoalPriority( "BUILD_Command_Post", 0.69, TEAM.AXIS, CLASS.ENGINEER );
	SetGoalPriority( "CALLARTILLERY_Axis_start_.*", 1.1, TEAM.AXIS, CLASS.FIELDOPS );
	SetGoalPriority( "ARTILLERY_S_Axis_start_.*", 1.1, TEAM.AXIS, CLASS.FIELDOPS );
	SetGoalPriority( Map.Plant_Bridge, 0.0, TEAM.AXIS, CLASS.COVERTOPS );

	SetGoalPriority( Map.Plant_Command_Post, 0.0, 0, CLASS.ENGINEER );
	SetGoalPriority( "FLAGRETURN_.*", 0.92, 0, 0 );

	Util.ChangeSpawn( TEAM.ALLIES, 6 );
	Util.ChangeSpawn( TEAM.AXIS, 8 );

	Wp.SetWaypointFlag( "a", "closed", true);
	Wp.SetWaypointFlag( "b", "closed", true);
	Wp.SetWaypointFlag( "d", "jump", true);
	Wp.SetWaypointFlag( "e", "jump", true);
	Wp.SetWaypointFlag( "f", "jump", true);
	Wp.SetWaypointFlag( "g", "jump", true);

	Util.SetMaxUsersInProgress( 1, "DEFUSE_.*" );
	Util.SetMaxUsersInProgress( 1, "ATTACK_.*" );
	Util.SetMaxUsersInProgress( 1, "DEFEND_.*" );
	Util.SetMaxUsersInProgress( 1, "BUILD_.*" );
	Util.SetMaxUsersInProgress( 1, "PLANTMINE_.*" );
	Util.SetMaxUsersInProgress( 3, "CHECKPOINT_.*" );
	Util.SetMaxUsersInProgress( 3, "ROUTE_Tram1" );
	Util.SetMaxUsersInProgress( 3, "ROUTE_Tram2" );
	Util.SetMaxUsersInProgress( 1, "MOUNTMG42_.*" );
	Util.SetMaxUsersInProgress( 1, "REVIVE.*" );
	Util.SetMaxUsersInProgress( 2, "ATTACK_AlliedInHangar_.*" );
	Util.SetMaxUsersInProgress( 2, "PLANT_Barrier_2_1" );
	Util.SetMaxUsersInProgress( 2, "PLANT_Avalanche_Wall" );

	cablecar2Village = OnTriggerRegion(AABB(-3542.435,1102.475,1207.125,-3367.565,1157.571,1281.125), Map.cablecar2_in_Village);
	cablecar1Village = OnTriggerRegion(AABB(-3756.235,1101.835,1207.125,-3618.111,1172.167,1281.125), Map.cablecar1_in_Village);
	cablecar2Castle = OnTriggerRegion(AABB(-3538.931,-2064.870,1655.125,-3387.412,-1989.670,1785.125), Map.cablecar2_in_Castle);
	cablecar1Castle = OnTriggerRegion(AABB(-3776.556,-2048.875,1655.125,-3614.873,-1982.875,1785.125), Map.cablecar1_in_Castle);

	BusNearBarrier1 = OnTriggerRegion(AABB(-1105.433,-2844.047,1046.125,-808.262,-2731.939,1120.125), Map.Bus_Near_Barrier1);
	BusNearPlane = OnTriggerRegion(AABB(2687.125,4014.807,1047.125,2925.188,4268.565,1155.075), Map.Bus_Near_Plane);

	BusPastBarrier1 = OnTriggerRegion(AABB(-167.388,-3835.898,1046.125,212.633,-3536.205,1120.125), Map.Bus_Past_Barrier1);

	BusAtBridge = OnTriggerRegion(AABB(2288.865,-568.343,1015.125,2488.711,-417.035,1089.125), Map.Bus_At_Bridge);
	BusAtBarrier2 = OnTriggerRegion(AABB(2325.546,859.912,1046.125,2715.242,1007.095,1123.125), Map.Bus_At_Barrier2);

	Map.cablecar_1_position = -1;
	Map.cablecar_2_position = -1;

	Util.SetGoalOffset( -120, 90, 0, Map.Plant_Barrier_1 );
	//Util.SetGoalOffset( 190, -30, 0, Map.Plant_Barrier_2 );
	//Util.SetGoalOffset( -97, -6, -57, "PLANT_Tunnel_Entrance" );

	SetMapGoalProperties( "ATTACK_.*", {mincamptime=3, maxcamptime=5} );
	SetMapGoalProperties( "DEFEND_.*", {mincamptime=180, maxcamptime=240} );
	SetMapGoalProperties( "MOUNTMG42_.*", {mincamptime=240, maxcamptime=300} );

	MapRoutes =
	{
		CHECKPOINT_firstflag =
		{
			ROUTE_AlliesStartSpawn =
			{
				ROUTE_TunnelEntrance =
				{

				},
				ROUTE_AvalancheWall =
				{

				},
			},
			ROUTE_AlliesStartSpawn1 =
			{
				ROUTE_TunnelEntrance =
				{

				},
				ROUTE_AvalancheWall =
				{

				},
			},
			ROUTE_AlliesStartSpawn2 =
			{
				ROUTE_TunnelEntrance =
				{

				},
				ROUTE_AvalancheWall =
				{

				},
			},
			ROUTE_AlliesStartSpawn3 =
			{
				ROUTE_TunnelEntrance =
				{

				},
				ROUTE_AvalancheWall =
				{

				},
			},
		},
		CHECKPOINT_secondflag =
		{
			ROUTE_AllySpawn1 =
			{
				ROUTE_Tram1 =
				{
					ROUTE_Tram2 =
					{

					},
				},
				ROUTE_AllySpawn1Stairs =
				{
					Weight = 2,
					ROUTE_StoneBridge =
					{
						ROUTE_Constructible =
						{
							Weight = 2,
						},
						ROUTE_ConstructibleLadder =
						{
							ROUTE_ConstructibleLadder1 =
							{
								ROUTE_SteelDoor =
								{

								},
								ROUTE_UpperStairs =
								{
									ROUTE_FlagStairs =
									{

									},
									ROUTE_FlagDoor =
									{
										ROUTE_UpperHealth2 =
										{

										},
									},
								},
							},
						},
					},
				},
			},
		},
		MOUNTMG42_Road_MG =
		{
			ROUTE_AxisPlaneSpawn =
			{
				ROUTE_Back_1 =
				{
					ROUTE_Back_2 =
					{
						ROUTE_Back_3 =
						{
							ROUTE_Back_4 =
							{
								ROUTE_Back_5 =
								{
									ROUTE_Back_6 =
									{
										ROUTE_Back_7 =
										{
											ROUTE_Back_8 =
											{

											},
										},
									},
								},
							},
						},
					},
				},
			},
			ROUTE_AxisPlaneSpawn1 =
			{
				ROUTE_Back_1 =
				{
					ROUTE_Back_2 =
					{
						ROUTE_Back_3 =
						{
							ROUTE_Back_4 =
							{
								ROUTE_Back_5 =
								{
									ROUTE_Back_6 =
									{
										ROUTE_Back_7 =
										{
											ROUTE_Back_8 =
											{

											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		CAPPOINT_Bus =
		{
			ROUTE_BusFuelFlag =
			{
				ROUTE_FFlagDoor =
				{
					ROUTE_FlagDoor =
					{
						Weight = 2,
						ROUTE_UpperHealth2 =
						{
							ROUTE_BackTunnel1 =
							{
								ROUTE_Constructible =
								{
									ROUTE_SideLadder =
									{
										Weight = 2,
										ROUTE_Roof =
										{

										},
									},
									ROUTE_BackFlagWay1 =
									{
										Weight = 3,
										ROUTE_BackFlagWay2 =
										{

										},
									},
									//ROUTE_FrontLadder =
									//{
									//
									//},
								},
							},
						},
					},
					ROUTE_FlagStairs =
					{
						Weight = 2,
						ROUTE_BackTunnel1 =
						{
							ROUTE_Constructible =
							{
								ROUTE_SideLadder =
								{
									Weight = 2,
									ROUTE_Roof =
									{

									},
								},
								//ROUTE_FrontLadder =
								//{
								//
								//},
								ROUTE_BackFlagWay1 =
								{
									Weight = 3,
									ROUTE_BackFlagWay2 =
									{

									},
								},
							},
						},
					},
					ROUTE_UpperStairs =
					{
						ROUTE_jump =
						{
							ROUTE_FrontLadder =
							{

							},
							ROUTE_FrontLadder =
							{
								ROUTE_SideLadder =
								{
									Weight = 2,
									ROUTE_Roof =
									{

									},
								},
								ROUTE_BackFlagWay2 =
								{
									Weight = 3,
								},
								ROUTE_BackFlagWay1 =
								{
									Weight = 2,
									ROUTE_BackFlagWay2 =
									{

									},
								},
							},
						},
					},
				},
				ROUTE_SpiralStairs =
				{
					ROUTE_SpiralStairs2 =
					{
						ROUTE_Window =
						{
							ROUTE_jump =
							{
								ROUTE_FrontLadder =
								{

								},
								ROUTE_FrontLadder =
								{
									ROUTE_SideLadder =
									{
										Weight = 2,
										ROUTE_Roof =
										{

										},
									},
									ROUTE_BackFlagWay2 =
									{
										Weight = 3,
									},
									ROUTE_BackFlagWay1 =
									{
										Weight = 2,
										ROUTE_BackFlagWay2 =
										{

										},
									},
								},
							},
						},
					},
				},
			},
			ROUTE_BusDocFlag =
			{
				ROUTE_FFlagDoor =
				{
					ROUTE_FlagDoor =
					{
						Weight = 2,
						ROUTE_UpperHealth2 =
						{
							ROUTE_BackTunnel1 =
							{
								ROUTE_Constructible =
								{
									ROUTE_SideLadder =
									{
										Weight = 2,
										ROUTE_Roof =
										{

										},
									},
									//ROUTE_FrontLadder =
									//{
									//
									//},
									ROUTE_BackFlagWay1 =
									{
										Weight = 3,
										ROUTE_BackFlagWay2 =
										{

										},
									},
								},
							},
						},
					},
					ROUTE_FlagStairs =
					{
						Weight = 2,
						ROUTE_BackTunnel1 =
						{
							ROUTE_Constructible =
							{
								ROUTE_SideLadder =
								{
									Weight = 2,
									ROUTE_Roof =
									{

									},
								},
								//ROUTE_FrontLadder =
								//{
								//
								//},
								ROUTE_BackFlagWay1 =
								{
									Weight = 3,
									ROUTE_BackFlagWay2 =
									{

									},
								},
							},
						},
					},
					ROUTE_UpperStairs =
					{
						ROUTE_jump =
						{
							ROUTE_FrontLadder =
							{

							},
							ROUTE_FrontLadder =
							{
								ROUTE_SideLadder =
								{
									Weight = 2,
									ROUTE_Roof =
									{

									},
								},
								ROUTE_BackFlagWay2 =
								{
									Weight = 3,
								},
								ROUTE_BackFlagWay1 =
								{
									Weight = 2,
									ROUTE_BackFlagWay2 =
									{

									},
								},
							},
						},
					},
				},
				ROUTE_SpiralStairs =
				{
					ROUTE_SpiralStairs2 =
					{
						ROUTE_Window =
						{
							ROUTE_jump =
							{
								ROUTE_FrontLadder =
								{

								},
								ROUTE_FrontLadder =
								{
									ROUTE_SideLadder =
									{
										Weight = 2,
										ROUTE_Roof =
										{

										},
									},
									ROUTE_BackFlagWay2 =
									{
										Weight = 3,
									},
									ROUTE_BackFlagWay1 =
									{
										Weight = 2,
										ROUTE_BackFlagWay2 =
										{

										},
									},
								},
							},
						},
					},
				},
			},
		},
		DEFEND_Bus_1 =
		{
			ROUTE_AxisCastleSpawn =
			{
				ROUTE_jump =
				{
					ROUTE_FrontLadder =
					{

					},
					ROUTE_FrontLadder =
					{
						ROUTE_BackFlagWay2 =
						{
							Weight = 3,
						},
					},
				},
				ROUTE_UpperStairs =
				{
					Weight = 3,
					ROUTE_FlagStairs =
					{
						ROUTE_BackTunnel1 =
						{
							ROUTE_SideLadder =
							{

							},
							ROUTE_BackFlagWay1 =
							{
								ROUTE_BackFlagWay2 =
								{

								},
							},
						},
					},

				},
			},
			ROUTE_AlliesCastleSpawn =
			{
				ROUTE_BackTunnel1 =
				{
					Weight = 3,
					ROUTE_Constructible =
					{
						ROUTE_SideLadder =
						{

						},
						ROUTE_BackFlagWay1 =
						{
							ROUTE_BackFlagWay2 =
							{

							},
						},
					},
				},
				ROUTE_FlagStairs =
				{
					ROUTE_UpperStairs =
					{
						ROUTE_jump =
						{
							ROUTE_FrontLadder =
							{

							},
							ROUTE_FrontLadder =
							{
								ROUTE_BackFlagWay2 =
								{
									Weight = 3,
								},
							},
						},
					},
				},
			},
			ROUTE_AlliesCastleSpawn1 =
			{
				ROUTE_BackTunnel1 =
				{
					Weight = 3,
					ROUTE_Constructible =
					{
						ROUTE_SideLadder =
						{

						},
						ROUTE_BackFlagWay1 =
						{
							ROUTE_BackFlagWay2 =
							{

							},
						},
					},
				},
				ROUTE_FlagStairs =
				{
					ROUTE_UpperStairs =
					{
						ROUTE_jump =
						{
							ROUTE_FrontLadder =
							{

							},
							ROUTE_FrontLadder =
							{
								ROUTE_BackFlagWay2 =
								{
									Weight = 3,
								},
							},
						},
					},
				},
			},
			ROUTE_AlliesCastleSpawn2 =
			{
				ROUTE_BackTunnel1 =
				{
					Weight = 3,
					ROUTE_Constructible =
					{
						ROUTE_SideLadder =
						{

						},
						ROUTE_BackFlagWay1 =
						{
							ROUTE_BackFlagWay2 =
							{

							},
						},
					},
				},
				ROUTE_FlagStairs =
				{
					ROUTE_UpperStairs =
					{
						ROUTE_jump =
						{
							ROUTE_FrontLadder =
							{

							},
							ROUTE_FrontLadder =
							{
								ROUTE_BackFlagWay2 =
								{
									Weight = 3,
								},
							},
						},
					},
				},
			},
		},
		BUILD_Constructible =
		{
			ROUTE_AxisCastleSpawn =
			{
				ROUTE_UpperStairs =
				{
					ROUTE_FlagStairs =
					{
						Weight = 3,
						ROUTE_BackTunnel1 =
						{
							ROUTE_Constructible =
							{

							},
						},
					},
					ROUTE_FlagDoor =
					{
						ROUTE_UpperHealth2 =
						{
							ROUTE_BackTunnel1 =
							{
								ROUTE_Constructible =
								{

								},
							},
						},
					},
				},
				ROUTE_SteelDoor =
				{
					Weight = 4,
					ROUTE_BackTunnel1 =
					{
						ROUTE_Constructible =
						{

						},
					},
				},
				ROUTE_jump =
				{
					ROUTE_FrontLadder =
					{

					},
				},
			},
		},
		PLANT_Road_MG =
		{
			ROUTE_AxisPlaneSpawn =
			{
				ROUTE_Back_1 =
				{
					ROUTE_Back_2 =
					{
						ROUTE_Back_3 =
						{
							ROUTE_Back_4 =
							{
								ROUTE_Back_5 =
								{
									ROUTE_Back_6 =
									{
										ROUTE_Back_7 =
										{
											ROUTE_Back_8 =
											{

											},
										},
									},
								},
							},
						},
					},
				},
			},
			ROUTE_AxisPlaneSpawn1 =
			{
				ROUTE_Back_1 =
				{
					ROUTE_Back_2 =
					{
						ROUTE_Back_3 =
						{
							ROUTE_Back_4 =
							{
								ROUTE_Back_5 =
								{
									ROUTE_Back_6 =
									{
										ROUTE_Back_7 =
										{
											ROUTE_Back_8 =
											{

											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		PLANT_Hangar =
		{
			ROUTE_Allied5Spawn =
			{
				ROUTE_Back_8 =
				{
					Weight = 3,
					ROUTE_Back_7 =
					{
						ROUTE_Back_6 =
						{
							ROUTE_Back_5 =
							{
								ROUTE_Back_4 =
								{

								},
							},
						},
					},
				},
				ROUTE_FrontBridge_1 =
				{
					ROUTE_FrontBridge_2 =
					{
						ROUTE_Runway_1 =
						{
							Weight = 2,
							ROUTE_Runway_2 =
							{
								ROUTE_Back_5 =
								{
									ROUTE_Back_4 =
									{

									},
								},
							},
						},
						ROUTE_FrontRunway_1 =
						{
							ROUTE_FrontRunway_2 =
							{
								ROUTE_FrontRunway_3 =
								{

								},
							},
						},
					},
				},
			},
			ROUTE_Allied5Spawn1 =
			{
				ROUTE_Back_8 =
				{
					Weight = 3,
					ROUTE_Back_7 =
					{
						ROUTE_Back_6 =
						{
							ROUTE_Back_5 =
							{
								ROUTE_Back_4 =
								{

								},
							},
						},
					},
				},
				ROUTE_FrontBridge_1 =
				{
					ROUTE_FrontBridge_2 =
					{
						ROUTE_Runway_1 =
						{
							Weight = 2,
							ROUTE_Runway_2 =
							{
								ROUTE_Back_5 =
								{
									ROUTE_Back_4 =
									{

									},
								},
							},
						},
						ROUTE_FrontRunway_1 =
						{
							ROUTE_FrontRunway_2 =
							{
								ROUTE_FrontRunway_3 =
								{

								},
							},
						},
					},
				},
			},
			ROUTE_Allied5Spawn2 =
			{
				ROUTE_Back_8 =
				{
					Weight = 3,
					ROUTE_Back_7 =
					{
						ROUTE_Back_6 =
						{
							ROUTE_Back_5 =
							{
								ROUTE_Back_4 =
								{

								},
							},
						},
					},
				},
				ROUTE_FrontBridge_1 =
				{
					ROUTE_FrontBridge_2 =
					{
						ROUTE_Runway_1 =
						{
							Weight = 2,
							ROUTE_Runway_2 =
							{
								ROUTE_Back_5 =
								{
									ROUTE_Back_4 =
									{

									},
								},
							},
						},
						ROUTE_FrontRunway_1 =
						{
							ROUTE_FrontRunway_2 =
							{
								ROUTE_FrontRunway_3 =
								{

								},
							},
						},
					},
				},
			},
			ROUTE_Allied5Spawn3 =
			{
				ROUTE_Back_8 =
				{
					Weight = 3,
					ROUTE_Back_7 =
					{
						ROUTE_Back_6 =
						{
							ROUTE_Back_5 =
							{
								ROUTE_Back_4 =
								{

								},
							},
						},
					},
				},
				ROUTE_FrontBridge_1 =
				{
					ROUTE_FrontBridge_2 =
					{
						ROUTE_Runway_1 =
						{
							Weight = 2,
							ROUTE_Runway_2 =
							{
								ROUTE_Back_5 =
								{
									ROUTE_Back_4 =
									{

									},
								},
							},
						},
						ROUTE_FrontRunway_1 =
						{
							ROUTE_FrontRunway_2 =
							{
								ROUTE_FrontRunway_3 =
								{

								},
							},
						},
					},
				},
			},
		},
		CAPPOINT_Plane =
		{
			ROUTE_FlagBusFuel =
			{
				ROUTE_Back_8 =
				{
					Weight = 2,
					ROUTE_Back_7 =
					{
						ROUTE_Back_6 =
						{
							ROUTE_Back_5 =
							{
								ROUTE_FlagBusFuel2 =
								{
									ROUTE_FlagBusFuel6 =
									{

									},
								},
							},
							ROUTE_FlagBusFuel5 =
							{

							},
						},
					},
				},
				ROUTE_FlagBusFuel3 =
				{
					Weight = 2,
					ROUTE_FlagBusFuel4 =
					{
						ROUTE_Back_6 =
						{
							ROUTE_Back_5 =
							{
								ROUTE_FlagBusFuel2 =
								{
									ROUTE_FlagBusFuel6 =
									{

									},
								},
							},
							ROUTE_FlagBusFuel5 =
							{

							},
						},
					},
				},
				ROUTE_FrontBridge_2 =
				{
					ROUTE_Runway_1 =
					{
						ROUTE_Runway_2 =
						{
							ROUTE_Back_5 =
							{
								ROUTE_FlagBusFuel2 =
								{
									ROUTE_FlagBusFuel6 =
									{

									},
								},
							},
						},
						ROUTE_FlagBusFuel5 =
						{

						},
					},
					ROUTE_FrontRunway_1 =
					{
						ROUTE_FrontRunway_2 =
						{
							ROUTE_FrontRunway_3 =
							{

							},
						},
					},
				},
			},
		},
		FLAG_tcr_fuel_scriptname =
		{
			ROUTE_AlliesCastleSpawn =
			{
				ROUTE_UpperHealth2 =
				{
					//Weight = 2,
					ROUTE_Balcony1 =
					{
						ROUTE_Balcony2 =
						{
							ROUTE_Balcony3 =
							{
								ROUTE_SpiralStairs =
								{

								},
							},
							ROUTE_handrailing =
							{

							},
						},
					},
				},
				ROUTE_FlagStairs =
				{

				},
			},
			ROUTE_AlliesCastleSpawn1 =
			{
				ROUTE_UpperHealth2 =
				{
					//Weight = 2,
					ROUTE_Balcony1 =
					{
						ROUTE_Balcony2 =
						{
							ROUTE_Balcony3 =
							{
								ROUTE_SpiralStairs =
								{

								},
							},
							ROUTE_handrailing =
							{

							},
						},
					},
				},
				ROUTE_FlagStairs =
				{

				},
			},
			ROUTE_AlliesCastleSpawn2 =
			{
				ROUTE_UpperHealth2 =
				{
					//Weight = 2,
					ROUTE_Balcony1 =
					{
						ROUTE_Balcony2 =
						{
							ROUTE_Balcony3 =
							{
								ROUTE_SpiralStairs =
								{

								},
							},
							ROUTE_handrailing =
							{

							},
						},
					},
				},
				ROUTE_FlagStairs =
				{

				},
			},
		},
	};

	MapRoutes.FLAG_tcr_docs_scriptname = MapRoutes.FLAG_tcr_fuel_scriptname;
	MapRoutes.ATTACK_Allied_secondflag_1 = MapRoutes.CHECKPOINT_secondflag;
	MapRoutes.ATTACK_Allied_secondflag_2 = MapRoutes.CHECKPOINT_secondflag;
	MapRoutes.ATTACK_Allied_secondflag_3 = MapRoutes.CHECKPOINT_secondflag;
	MapRoutes.ATTACK_Allied_secondflag_4 = MapRoutes.CHECKPOINT_secondflag;
	MapRoutes.ATTACK_Allied_secondflag_5 = MapRoutes.CHECKPOINT_secondflag;
	MapRoutes.DEFEND_Bus_2 = MapRoutes.DEFEND_Bus_1;
	MapRoutes.DEFEND_Bus_3 = MapRoutes.DEFEND_Bus_1;
	MapRoutes.DEFEND_Bus_4 = MapRoutes.DEFEND_Bus_1;
	MapRoutes.DEFEND_Bus_5 = MapRoutes.DEFEND_Bus_1;
	MapRoutes.DEFEND_Bus_6 = MapRoutes.DEFEND_Bus_1;
	MapRoutes.DEFEND_Bus_7 = MapRoutes.DEFEND_Bus_1;
	MapRoutes.DEFEND_Bus_8 = MapRoutes.DEFEND_Bus_1;
	MapRoutes.MOUNTMG42_Road_MG = MapRoutes.PLANT_Road_MG;

	Util.Routes(MapRoutes);

	SetAvailableMapGoals( TEAM.ALLIES, false, "ROUTE_Tram1" );
	SetAvailableMapGoals( TEAM.ALLIES, false, "ROUTE_Tram2" );
	SetAvailableMapGoals( TEAM.ALLIES, false, "ROUTE_Constructible" );
	SetAvailableMapGoals( TEAM.ALLIES, false, "ROUTE_SteelDoor" );
	SetAvailableMapGoals( TEAM.ALLIES, false, "ROUTE_ConstructibleLadder" );
	SetAvailableMapGoals( TEAM.ALLIES, false, "ROUTE_ConstructibleLadder1" );

	WeaponTable.SetWeaponAvailability(CLASS.SOLDIER, { WEAPON.MP40, WEAPON.THOMPSON }, true);
	WeaponTable.SetWeaponAvailability(CLASS.SOLDIER, WEAPON.FLAMETHROWER, false);

	Util.MapDebugPrint( "OnMapLoad" );
};

global OnBotJoin = function( bot )
{
	bot.TargetBreakableDist = 300.0;

	if ( Map.Allied5Spawn == 0 )
	{
		if ( Map.BusEscaping == 0 )
		{
			if ( Map.SecondFlagAllies == 0 )
			{
				if ( Map.FirstFlagAllies == 0 )
				{
					Util.ChangeSpawn( TEAM.ALLIES, 6 );
					Util.ChangeSpawn( TEAM.AXIS, 8 );
				}
				else
				{
					Util.ChangeSpawn( TEAM.ALLIES, 7 );	//inside hut (cablecar station)
					Util.ChangeSpawn( TEAM.AXIS, 2 );	//Castle
				}
			}
			else
			{
				Util.ChangeSpawn( TEAM.ALLIES, 3 );	//Castle
				Util.ChangeSpawn( TEAM.AXIS, 2 );
			}
		}
		else
		{
			Util.ChangeSpawn( TEAM.ALLIES, 5 );	//near constructible
			Util.ChangeSpawn( TEAM.AXIS, 3 );	//bunker near hangar
		}
	}
	else
	{
		Util.ChangeSpawn( TEAM.ALLIES, 3 );	//hut near bridge
		Util.ChangeSpawn( TEAM.AXIS, 3 );
	}
};
