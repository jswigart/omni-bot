//script created by palota
// cs: for 0.8 you might consider manually creating build goals rather than using paththrough
global Map =
{
	phase = 0,
	gunDamaged = false,
	shipDamaged = false,
	backDestroyed = false,
	sideDestroyed = false,

	ShowMovers = false,
	Movers = { "MOVER_ship", "MOVER_boat_sm" },

	Switches =
	{
		AS_Gun =
		{
			Priority = 0.8,
			WaypointName = "as_gun",
			LimitTeam = (1<<TEAM.AXIS),
			LimitClass = (1<<CLASS.SOLDIER),
		},
		Helicopter_Gun1 =
		{
			Priority = 0.8,
			WaypointName = "heli1",
			LimitTeam = (1<<TEAM.ALLIES),
			LimitBots = 1,
			LimitDistance = 500,
			ExitConditions =
			{
				someFunc = function(bot){ return true; }
			},
		},
		Helicopter_Gun2 =
		{
			Priority = 0.8,
			WaypointName = "heli2",
			LimitTeam = (1<<TEAM.ALLIES),
			LimitBots = 1,
			LimitDistance = 500,
			ExitConditions =
			{
				someFunc = function(bot){ return true; }
			},
		},
		elevator_up_call =
		{
			Enabled = true,
			Priority = 0,
			WaypointName = "elevator_up_call",
		},
		elevator_up_in =
		{
			Enabled = true,
			Priority = 0,
			WaypointName = "elevator_up_in",
			Wait = function()
			{
				sleep(5);
				return true;
			}
		},
		elevator_down_call =
		{
			Enabled = true,
			Priority = 0,
			WaypointName = "elevator_down_call",
		},
		elevator_down_in =
		{
			Enabled = true,
			Priority = 0,
			WaypointName = "elevator_down_in",
			Wait = function()
			{
				sleep(5);
				return true;
			}
		},
	},

	Elevator_Up = function(trigger)
	{
		vel = ToVector(trigger.Action);
		if(vel.y < 0){
			//print("elevator is up");
			sleep(1.7);
			Map.Switches.elevator_up_call.Enabled = false;
			Map.Switches.elevator_up_in.Enabled = true;
			sleep(2);
			Map.Switches.elevator_down_call.Enabled = true;
		}
		else if(vel.y > 0){
			//print("elevator is moving down");
			Map.Switches.elevator_up_in.Enabled = false;
		}
	},

	Elevator_Down = function(trigger)
	{
		vel = ToVector(trigger.Action);
		if(vel.y < 0){
			//print("elevator is down");
			sleep(1.7);
			Map.Switches.elevator_down_call.Enabled = false;
			Map.Switches.elevator_down_in.Enabled = true;
			sleep(2);
			Map.Switches.elevator_up_call.Enabled = true;
		}
		else if(vel.y > 0){
			//print("elevator is moving up");
			Map.Switches.elevator_down_in.Enabled = false;
		}
	},

	EscortVehicle =
	{
		Ship =
		{
			Enabled = false,
			Priority = 0.5,
			EscortVehicleGoalName = "MOVER_ship",
			LimitBots = 4,
		},
	},

	//custom build goal
	NavBuild = function(_this, Enabled)
	{
		//print("NavBuild");
		if (Enabled())
		{
			bot = _this.Bot;
			if(bot.GetTeam()==TEAM.AXIS && bot.GetClass()==CLASS.ENGINEER)
			{
				_this.AddWeaponRequest(Priority.High, WEAPON.PLIERS);
				_this.BlockForWeaponChange(WEAPON.PLIERS);
				wp = _this.CurrentNavigation;
				wpinfo = Util.WpNameInfo(wp);

				for(i=0; i<60 && Enabled(); i+=1)
				{
					bot.MoveTowards(wpinfo.position);
					_this.AddAimRequest(Priority.High, "facing", wpinfo.facing);
					bot.HoldButton(BTN.ATTACK1, 0.5);
					sleep(0.4);
				}
				_this.ReleaseWeaponRequest();
			}
		}
		sleep(6);
	},

	Navigation =
	{
		side_door_build =
		{
			navigate = function(_this) {
				Map.NavBuild(_this, function(){ return Map.sideDestroyed; });
			},
		},
		back_door_build =
		{
			navigate = function(_this) {
				Map.NavBuild(_this, function(){ return Map.backDestroyed; });
			},
		},
	},

	Wait_For_Plane = function(trigger)
	{
	 	SetAvailableMapGoals(TEAM.ALLIES, false, "ATTACK_ship1");
		//print("Wait_For_Plane");
	},

	Get_Explosives_To_Ship = function(trigger)
	{
	 	SetAvailableMapGoals(TEAM.ALLIES, true, "FLAG_box_obj2");
	 	SetAvailableMapGoals(TEAM.ALLIES, true, "CAPPOINT_ship1");
		//print("Get_Explosives_To_Ship");
	},

	SetGun = function()
	{
		if(Map.phase<20)
		{
			Map.Switches.AS_Gun.Enabled = Map.phase>=5 && Map.phase<10 && !Map.gunDamaged && !Map.shipDamaged;
			Map.Switches.Helicopter_Gun1.Enabled = Map.phase<10 && !Map.gunDamaged;
			Map.Switches.Helicopter_Gun2.Enabled = Map.Switches.Helicopter_Gun1.Enabled;
		}
	},

	SetDoor = function(trigger)
	{
	 	SetAvailableMapGoals(TEAM.AXIS, Map.sideDestroyed && Map.phase>=5 && Map.phase<30, "ATTACK_side_door_build");
	 	SetAvailableMapGoals(TEAM.AXIS, Map.backDestroyed && Map.phase>=20, "ATTACK_back_door_build");

	 	b = !Map.sideDestroyed && Map.phase>=10 && Map.phase<20;
	 	SetAvailableMapGoals(TEAM.ALLIES, b, "ATTACK_side_door_out");
	 	if(b){ Util.SetPercentInProgress(70, "FLAG_bomb_pickup"); }
		else { Util.SetMaxUsersInProgress(99, "FLAG_bomb_pickup"); }

	 	b = !Map.backDestroyed && Map.phase>=30;
	 	SetAvailableMapGoals(TEAM.ALLIES, b, "ATTACK_back_door_out");
	 	if(b){ Util.SetPercentInProgress(70, "FLAG_gold"); }
		else { Util.SetMaxUsersInProgress(99, "FLAG_gold"); }
	},

	Escort_Ship = function(trigger)
	{
	 	Map.phase = 5;
	 	SetAvailableMapGoals(TEAM.ALLIES, false, "FLAG_box_obj2");
	 	SetAvailableMapGoals(TEAM.ALLIES, false, "CAPPOINT_ship1");
	 	SetAvailableMapGoals(TEAM.ALLIES, true, "AMMOCAB_side1");
	 	SetAvailableMapGoals(TEAM.ALLIES, true, "HEALTHCAB_side2");
	 	Map.SetGun();
		Map.SetDoor();
		Map.EscortVehicle.Ship.Enabled = true;
		if(ETUtil.CountClass(TEAM.AXIS, CLASS.SOLDIER) == 0)
		{
		 	ETUtil.ChangeClass(TEAM.AXIS, CLASS.MEDIC, CLASS.SOLDIER, false, 1);
		}
		//print("Escort_Ship");
	},

	Gun_Damaged = function(trigger)
	{
		Map.gunDamaged = true;
		Map.SetGun();
		//print("Gun_Damaged");
	},

	Gun_Repaired = function(trigger)
	{
		Map.gunDamaged = false;
		Map.SetGun();
		//print("Gun_Repaired");
	},

	Ship_Damaged = function(trigger)
	{
		Map.shipDamaged = true;
		Map.SetGun();
		//print("Ship_Damaged");
	},

	Ship_Repaired = function(trigger)
	{
		Map.shipDamaged = false;
		Map.SetGun();
		//print("Ship_Repaired");
	},

	SetFuel = function(b)
	{
	 	SetAvailableMapGoals(TEAM.ALLIES, b, "FLAG_bomb_pickup");
	 	SetAvailableMapGoals(TEAM.ALLIES, b, "CAPPOINT_port_fuel");
	 	SetAvailableMapGoals(TEAM.AXIS, b, "DEFEND_fuel.*");
	},

	Get_Fuel = function(trigger)
	{
		Map.EscortVehicle.Ship.Enabled = false;
		Map.SetFuel(true);
	 	SetAvailableMapGoals(TEAM.ALLIES, false, "BUILD_2Allied_Islands_MG42");
 		SetAvailableMapGoals(TEAM.ALLIES, false, "REPAIRMG42_2Allied_Islands_MG42");
	 	SetAvailableMapGoals(TEAM.ALLIES, true, "PLANT_2The_Sewer_Grate");
	 	SetAvailableMapGoals(TEAM.ALLIES, true, "PLANT_2The_Side_Door");
	 	SetGoalPriority("MOUNTMG42_2Allied_Islands_MG42", 0.51, TEAM.ALLIES);
		//print("Get_Fuel");
	},

	Sewer_Grate_Destroyed = function(trigger)
	{
	 	Util.EnableGoal("ROUTE_sewer_grate");
		//print("Sewer_Grate_Destroyed");
	},

	Dam_Lost = function(trigger)
	{
	 	Map.phase = 10;
	 	Map.SetGun();
		Map.SetDoor();
		Wp.SetWaypointFlag("gun_in1", "closed", true);
		Wp.SetWaypointFlag("gun_in2", "closed", true);
	 	Util.EnableGoal("AMMOCAB_cp1");
	 	Util.EnableGoal("HEALTHCAB_cp2");
	 	SetAvailableMapGoals(TEAM.AXIS, true, "AMMOCAB_side1");
	 	SetAvailableMapGoals(TEAM.AXIS, true, "HEALTHCAB_side2");
	 	SetAvailableMapGoals(TEAM.AXIS, false, ".*MG42_dam_south.*");
	 	SetAvailableMapGoals(TEAM.AXIS, false, ".*MG42_dam_east_mg2");
		SetAvailableMapGoals(TEAM.AXIS, false, "BUILD_2The_Anti_Ship_Gun");
	 	SetAvailableMapGoals(TEAM.AXIS, false, "ATTACK_dam.*");
	 	SetAvailableMapGoals(TEAM.AXIS, false, "SNIPE_dam.*");
	 	SetAvailableMapGoals(TEAM.AXIS, false, "AMMOCAB_dam1");
	 	SetAvailableMapGoals(TEAM.ALLIES, true, ".*MG42_bunker_mg");
		ETUtil.ChangeClass(TEAM.AXIS, CLASS.MEDIC, CLASS.SOLDIER, true, 1);
		//print("Dam_Lost");
	},

	Side_Door_Destroyed = function(trigger)
	{
		Map.sideDestroyed = true;
		Map.SetDoor();
	 	Util.EnableGoal("ROUTE_side_door");
	 	Util.EnableGoal("ROUTE_fuel_door");
	 	Util.EnableGoal("ROUTE_fuel_shaft");
	 	SetAvailableMapGoals(TEAM.ALLIES, true, ".*Command_Post");
		//print("Side_Door_Destroyed");
	},

	Side_Door_Built = function(trigger)
	{
		Map.sideDestroyed = false;
		Map.SetDoor();
	 	Util.DisableGoal("ROUTE_side_door");
	 	Util.DisableGoal("ROUTE_fuel_door");
	 	Util.DisableGoal("ROUTE_fuel_shaft");
		//print("Side_Door_Built");
	},

	Fuel_Taken = function(trigger)
	{
	 	SetGoalPriority("DEFEND_fuel9", 0.55, TEAM.AXIS);
		//print("Fuel_Taken");
	},

	Fuel_Returned = function(trigger)
	{
	 	SetGoalPriority("DEFEND_fuel9", 0.49, TEAM.AXIS);
		//print("Fuel_Returned");
	},

	Fuel_Captured = function(trigger)
	{
		if(trigger.Action=="allied_complete")
		{
			Map.phase=20;
			Map.SetFuel(false);
			Map.SetDoor();
		 	SetAvailableMapGoals(TEAM.AXIS, false, "PLANT_2Allied_Islands_MG42");
		 	SetAvailableMapGoals(TEAM.ALLIES, false, "MOUNTMG42_2Allied_Islands_MG42");
			SetAvailableMapGoals(TEAM.AXIS, true, "BUILD_2Axis_MG42_Beach");
			SetAvailableMapGoals(TEAM.AXIS, true, "REPAIRMG42_2Axis_MG42_Beach");
			SetAvailableMapGoals(TEAM.AXIS, true, "EXPLODE_2Canal_Boat_Stuffs_Construction");
		 	SetAvailableMapGoals(TEAM.AXIS, true, "ATTACK_boat1.*");
		 	SetAvailableMapGoals(TEAM.ALLIES, true, "BUILD_2Canal_Boat_Stuffs_Construction");
		 	SetAvailableMapGoals(TEAM.ALLIES, true, "DEFEND_boat1.*");
			//print("Fuel_Captured");
		}
	},

 	Boat_Moving =
	{
		TriggerOnEntity = GetGoal("MOVER_boat_sm").GetEntity(),
		OnEnter = function(ent)
		{
		 	SetAvailableMapGoals(TEAM.ALLIES, false, "ATTACK_boat");
			print("Boat_Moving");
		},
		OnExit = function(ent) {},
	},

 	Boat_Under_Bridge =
	{
		TriggerOnEntity = GetGoal("MOVER_boat_sm").GetEntity(),
		OnEnter = function(ent)
		{
		 	SetAvailableMapGoals(TEAM.AXIS, true, "ATTACK_boat2.*");
		 	SetAvailableMapGoals(TEAM.ALLIES, true, "DEFEND_boat2.*");
			print("Boat_Under_Bridge");
		},
		OnExit = function(ent) {},
	},

	Boat_Built = function(trigger)
	{
		if(Map.triggerBoat1==null){
			Map.triggerBoat1 = OnTriggerRegion(Util.WpNameInfo("boat1").position, 200, Map.Boat_Moving);
			Map.triggerBoat2 = OnTriggerRegion(Util.WpNameInfo("boat2").position, 200, Map.Boat_Under_Bridge);
		}
		SetAvailableMapGoals(TEAM.AXIS, true, "BUILD_2the_Axis_South_East_MG_nest");
	 	SetAvailableMapGoals(TEAM.AXIS, true, "MOUNTMG42_2Axis_MG42_Beach.*");
	 	SetAvailableMapGoals(TEAM.ALLIES, true, "ATTACK_boat");
		//print("Boat_Built");
	},

	Boat_Destroyed = function(trigger)
	{
	 	SetAvailableMapGoals(TEAM.AXIS, false, "MOUNTMG42_2Axis_MG42_Beach.*");
	 	SetAvailableMapGoals(TEAM.AXIS, false, "ATTACK_boat2.*");
	 	SetAvailableMapGoals(TEAM.ALLIES, false, "DEFEND_boat2.*");
		//print("Boat_Destroyed");
	},

	Get_Explosives_To_Missile = function(trigger)
	{
		Map.phase=30;
		DeleteTriggerRegion(Map.triggerBoat1);
		DeleteTriggerRegion(Map.triggerBoat2);
		//Util.AddInvVehicle("MOVER_boat_sm");
		Map.SetDoor();
	 	Util.DisableGoal("AMMOCAB_side1");
	 	Util.DisableGoal("HEALTHCAB_side2");
	 	Util.EnableGoal("AMMOCAB_missile_ammo");
	 	Util.EnableGoal("HEALTHCAB_missile_health");
	 	Util.EnableGoal("AMMOCAB_bunker1");
	 	Util.EnableGoal("HEALTHCAB_bunker2");
	 	Util.EnableGoal("AMMOCAB_back1");
	 	Util.EnableGoal("HEALTHCAB_back2");
		SetAvailableMapGoals(TEAM.AXIS, false, "EXPLODE_2Canal_Boat_Stuffs_Construction");
	 	SetAvailableMapGoals(TEAM.AXIS, false, ".*MG42_dam_east_mg1");
	 	SetAvailableMapGoals(TEAM.AXIS, false, "ATTACK_boat.*");
	 	SetAvailableMapGoals(TEAM.ALLIES, false, "DEFEND_boat.*");
	 	SetAvailableMapGoals(TEAM.ALLIES, false, "PLANT_2The_Side_Door");
	 	SetAvailableMapGoals(TEAM.ALLIES, false, "MOVER_ship");
	 	SetAvailableMapGoals(TEAM.ALLIES, false, "BUILD_allies_assault_boat");
	 	SetAvailableMapGoals(TEAM.ALLIES, false, "BUILD_2Canal_Boat_Stuffs_Construction");
	 	SetAvailableMapGoals(TEAM.ALLIES, false, ".*MG42_bunker_mg");
	 	SetAvailableMapGoals(TEAM.AXIS, true, "DEFEND_missile.*");
	 	SetAvailableMapGoals(TEAM.AXIS, true, "DEFEND_door_back.*");
	 	SetAvailableMapGoals(TEAM.AXIS, Map.backDestroyed, "DEFEND_back.*");
	 	SetAvailableMapGoals(TEAM.AXIS, true, "MOUNTMG42_2Axis_MG42_Beach.*");
	 	SetAvailableMapGoals(TEAM.AXIS, true, ".*MG42_mg42_2");
	 	SetAvailableMapGoals(TEAM.AXIS, true, ".*MG42_mg42_2_1");
	 	SetAvailableMapGoals(TEAM.ALLIES, true, "FLAG_gold");
	 	SetAvailableMapGoals(TEAM.ALLIES, true, "CAPPOINT_missile.*");
		SetAvailableMapGoals(TEAM.ALLIES, true, "PLANT_2The_Back_Door");
	 	SetAvailableMapGoals(TEAM.ALLIES, true, "PLANT_2Axis_MG42_Beach");
		SetAvailableMapGoals(TEAM.ALLIES, true, "PLANT_2the_Axis_South_East_MG_nest");
		//print("Get_Explosives_To_Missile");
	},

	Back_Door_Destroyed = function(trigger)
	{
		Map.backDestroyed=true;
		Map.SetDoor();
	 	Util.EnableGoal("ROUTE_back_door");
		Wp.SetWaypointFlag("back_door_axis", "closed", true);
	 	SetAvailableMapGoals(TEAM.AXIS, Map.phase>=30, "DEFEND_back.*");
		//print("Back_Door_Destroyed");
	},

	Back_Door_Built = function(trigger)
	{
		Map.backDestroyed=false;
		Map.SetDoor();
	 	Util.DisableGoal("ROUTE_back_door");
	 	SetAvailableMapGoals(TEAM.AXIS, false, "DEFEND_back.*");
		//print("Back_Door_Built");
	},

	Arm_Bomb = function(trigger)
	{
	 	SetAvailableMapGoals(TEAM.ALLIES, false, "FLAG_gold");
	 	SetAvailableMapGoals(TEAM.ALLIES, false, "CAPPOINT_missile.*");
	 	SetAvailableMapGoals(TEAM.ALLIES, true, "PLANT_2The_Missile_Prototype");
	 	SetAvailableMapGoals(TEAM.ALLIES, true, "ATTACK_missile.*");
		//print("Arm_Bomb");
	},
};

global OnMapLoad = function()
{
	OnTrigger("^6Plane was on his way whit ^3The Explosives", Map.Wait_For_Plane);
	OnTrigger("^3The Explosives ^6landed safely on the Center Island !!!!", Map.Get_Explosives_To_Ship);
	OnTrigger("^3The Anti-Ship Gun ^2has been damaged!", Map.Gun_Damaged);
	OnTrigger("^3The Anti-Ship Gun ^2has been repaired!", Map.Gun_Repaired);
	OnTrigger("^6The 4 Explosives was load onto The Ship!!!!", Map.Escort_Ship);
	OnTrigger("^3The Ship ^2has been damaged", Map.Ship_Damaged);
	OnTrigger("^3The Ship ^2has been repaired", Map.Ship_Repaired);
	OnTrigger("^dAllies have loaded The ^3Explosives ^2onto the ^3Port Station", Map.Get_Fuel);
	OnTrigger("^1Axis Team ^3lost ^6Dam_Spawn.", Map.Dam_Lost);
	//OnTrigger("^3The Explosives ready to load in to the canal boat!!", Map.);
	//OnTrigger("^dThe Explosives was in the Crane and on his way to the Canal Boat (waiting 30sec)", Map.);
	OnTrigger("^3The Sewer Grate has been destroyed!", Map.Sewer_Grate_Destroyed);
	OnTrigger("^dAllies have destroyed ^3The SideDoor", Map.Side_Door_Destroyed);
	OnTrigger("^dAllies have destroyed ^3The SideDoor Barricade", Map.Side_Door_Destroyed);
	OnTrigger("^1Axis have built the ^3SideDoor Barricade", Map.Side_Door_Built);
	OnTrigger("Allies have stolen Fuel Can!", Map.Fuel_Taken);
	OnTrigger("Flag returned bomb_pickup!", Map.Fuel_Returned);
	OnTrigger("bomb_pickup", Map.Fuel_Captured);
	OnTrigger("^dAllies have built The 3Canal Boat!", Map.Boat_Built);
	OnTrigger("^3The Canal Boat ^2has been destroyed!", Map.Boat_Destroyed);
	//OnTrigger("^3... But reach enought to land on the beach!", Map.);
	OnTrigger("^dAllies have escorted ^3The Canal Boat ^2and secured ^3The Explosives "/*"^2onto ^3The Beach ^2carefully!"*/, Map.Get_Explosives_To_Missile);
	OnTrigger("^dAllies have destroyed ^3The BackDoor", Map.Back_Door_Destroyed);
	OnTrigger("Allies have destroyed the BackDoor Barricade", Map.Back_Door_Destroyed);
	OnTrigger("^1Axis have built ^3The BackDoor Barricade", Map.Back_Door_Built);
	OnTrigger("^6The bomb is ready to be armed!!!!", Map.Arm_Bomb);
	//OnTrigger("^3Alert AxisTeam: ^2intruder ^3detected On the ^62nd Floor ^3Missile Basement!", Map.);
	//OnTrigger("^3Alert AxisTeam: ^dintruder ^3detected On the ^61st Floor ^3Missile Basement!", Map.);
	//OnTrigger("^6The first Explosive charge has been placed!!!!", Map.);
	//OnTrigger("^6The 4th Explosive charge has been placed!!!!", Map.);
	OnTrigger("elevatordoor_up_goto", Map.Elevator_Up);
	OnTrigger("elevatordoor_down_goto", Map.Elevator_Down);

	Util.DisableGoal(".*", true);
 	Util.DisableGoal("ROUTE_sewer_grate");
 	Util.DisableGoal("ROUTE_side_door");
 	Util.DisableGoal("ROUTE_fuel_door");
 	Util.DisableGoal("ROUTE_fuel_shaft");
 	SetAvailableMapGoals(TEAM.ALLIES, false, "ROUTE_back_door");

 	SetAvailableMapGoals(TEAM.AXIS, true, ".*MG42_dam.*");
 	SetAvailableMapGoals(TEAM.AXIS, true, "BUILD_2The_Anti_Ship_Gun");
 	SetAvailableMapGoals(TEAM.AXIS, true, "PLANT_2Allied_Islands_MG42");
 	SetAvailableMapGoals(TEAM.AXIS, true, "EXPLODE_2Canal_Boat_Stuffs_Construction");
 	SetAvailableMapGoals(TEAM.AXIS, true, ".*Command_Post");
 	SetAvailableMapGoals(TEAM.AXIS, true, "ATTACK_dam.*");
 	SetAvailableMapGoals(TEAM.AXIS, true, "SNIPE_dam.*");
 	SetAvailableMapGoals(TEAM.AXIS, true, "AMMOCAB_dam1");

 	SetAvailableMapGoals(TEAM.ALLIES, true, "MOVER_ship");
 	SetAvailableMapGoals(TEAM.ALLIES, true, "ATTACK_ship1");
 	SetAvailableMapGoals(TEAM.ALLIES, true, "BUILD_2Allied_Islands_MG42");
 	SetAvailableMapGoals(TEAM.ALLIES, true, "MOUNTMG42_2Allied_Islands_MG42");
 	SetAvailableMapGoals(TEAM.ALLIES, true, "REPAIRMG42_2Allied_Islands_MG42");
 	SetAvailableMapGoals(TEAM.ALLIES, true, "BUILD_allies_assault_boat");

 	SetGoalPriority("BUILD_6The_Command_Post", 0.85, TEAM.AXIS);
 	SetGoalPriority("BUILD_6The_Command_Post", 0.7, TEAM.ALLIES);
 	SetGoalPriority("PLANT_6The_Command_Post", 0.555, TEAM.AXIS, CLASS.ENGINEER);
 	SetGoalPriority("PLANT_6The_Command_Post", 0.7, TEAM.ALLIES, CLASS.ENGINEER);
 	SetGoalPriority("MOUNTMG42_2Allied_Islands_MG42", 0.69, TEAM.ALLIES);
 	SetGoalPriority("CAPPOINT_missile.*", 0.69, TEAM.ALLIES);
 	SetGoalPriority("ATTACK_boat", 0.65, TEAM.ALLIES);
 	SetGoalPriority("PLANT_2The_Back_Door", 0.85, TEAM.ALLIES);

 	SetGoalPriority("ATTACK_side_door_build", 0, TEAM.AXIS);
 	SetGoalPriority("ATTACK_side_door_build", 0.9, TEAM.AXIS, CLASS.ENGINEER);
 	SetGoalPriority("ATTACK_back_door_build", 0, TEAM.AXIS);
 	SetGoalPriority("ATTACK_back_door_build", 0.9, TEAM.AXIS, CLASS.ENGINEER);

	Map.SetGun();

	foreach (id and goal in { ".*MG42.*", "PLANT_Command_Post" }){
		Util.SetMaxUsersInProgress(1, goal);
	}

 	SetMapGoalProperties("DEFEND_.*", {mincamptime=60, maxcamptime=250} );

	Wp.SetWaypointFlag("gun_in1", "closed", false);
	Wp.SetWaypointFlag("gun_in2", "closed", false);
	Wp.SetWaypointFlag("back_door_axis", "closed", false);

	Util.SetGoalOffset(10, -10, 0, "BUILD_2Axis_MG42_Beach");
	Util.SetGoalOffset(0, -15, 0, "MOUNTMG42_dam_east_mg1");
	Util.SetGoalOffset(15, 0, 0, "MOUNTMG42_dam_east_mg2");
	Util.SetGoalOffset(0, 60, 0, "PLANT_2the_Axis_South_East_MG_nest");
	Util.AddUseWp("PLANT_2The_Side_Door", "side_door");
	Util.AddUseWp("PLANT_2The_Side_Door", "side_door_in");
	Util.AddUseWp("PLANT_2The_Back_Door", "back_door");
	Util.AddUseWp("PLANT_2The_Back_Door", "back_door_in");

	MapRoutes =
	{
		CAPPOINT_ship1 = {
			ROUTE_explosives_drop = {
				ROUTE_water1 = {},
				ROUTE_water2 = {},
			}
		},
		FLAG_bomb_pickup = {
			ROUTE_port_spawn = {
				ROUTE_side_door = { Weight=9,
					ROUTE_fuel_door = {},
					ROUTE_fuel_shaft = {},
				},
				ROUTE_sewer_grate = {
					ROUTE_bunker_bridge = {
						ROUTE_fuel_stairs = {},
						ROUTE_fuel_up1 = {},
						ROUTE_fuel_up2 = {},
					}
				},
			},
		},
		CAPPOINT_port_fuel = {
			ROUTE_fuel = {
				ROUTE_fuel_door = { Weight=6 },
				ROUTE_fuel_shaft = { Weight=6 },
				ROUTE_fuel_stairs = {},
				ROUTE_fuel_up1 = {},
				ROUTE_fuel_up2 = {},
			},
		},
		BUILD_6The_Command_Post = {
			ROUTE_beach_spawn = {
				ROUTE_sewer = {},
			},
		},
		CAPPOINT_missile1 = {
			ROUTE_beach_spawn = {
				ROUTE_back_door = { Weight=4,
					ROUTE_back_down = { Weight=3 },
					ROUTE_back_stairs1 = {},
					ROUTE_back_stairs2 = {},
				},
				ROUTE_bunker_stairs1 = {
					ROUTE_missile_east = {},
				},
				ROUTE_bunker_stairs2 = {
					ROUTE_missile_west = {},
				},
				ROUTE_sewer = { Weight=0.5,
					ROUTE_bunker_bridge = { ROUTE_bunker_stairs1 = {}},
				},
			},
		},
	};
	MapRoutes.CAPPOINT_missile2 = MapRoutes.CAPPOINT_missile1;
	MapRoutes.PLANT_2The_Missile_Prototype = MapRoutes.CAPPOINT_missile1;
	MapRoutes.ATTACK_missile5 = MapRoutes.CAPPOINT_missile1;
	MapRoutes.ATTACK_missile6 = MapRoutes.CAPPOINT_missile1;
	MapRoutes.PLANT_6The_Command_Post = MapRoutes.BUILD_6The_Command_Post;

	Util.Routes(MapRoutes);
	Util.UpdateSwitchData();
};

global OnBotJoin = function( bot )
{
	bot.TargetBreakableDist = 100.0;
};
