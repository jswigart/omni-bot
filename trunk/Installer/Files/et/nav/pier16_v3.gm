//==========================================================================================
//
//	pier16_v3.gm
//
//	Who			When		What
//------------------------------------------------------------------------------------------
// Blindman     		12/2/09	 	draft
//
//==========================================================================================
//

// cs: all the switch scripting should probably just be re-done. it's a complicated mess to follow

global Map =
{
	Navigation =
	{
		ladder =
		{
			navigate = function(_this)
			{
				_this.Bot.HoldButton(BTN.FORWARD, 5);
				sleep(3);
			},
		},
		l1 =
		{
			navigate = function(_this)
			{
				_this.Bot.HoldButton(BTN.FORWARD, 3);
				sleep(3);
			},
		},

		l2 =
		{
			navigate = function(_this)
			{
				_this.Bot.HoldButton(BTN.FORWARD, 3);
				sleep(3);
			},
		},

		strafe_l_point =
		{
			navigate = function(_this)
			{
				_this.Bot.HoldButton(BTN.STRAFE_L, 1.2);
				sleep(2);
			},
		},
	},

	Switches =
	{
		door1 =
		{
			WaypointName = "door1",
			Enabled = true,
			LimitBots = 1,
			LimitTeam = (1<<TEAM.ALLIES), //only axis can use it
			LimitClass = (1<<CLASS.COVERTOPS) | (1<<CLASS.SOLDIER),
			AimPosition = Vector3(-36.376,1980.125,-1.020),
			ExitConditions =
			{
				someFunc = function(bot)
				{
					return true; //as soon as they hit switch, return true
				},
			},
		},

		door2 =
		{
			// cs: no pathtrough setup, so i disconnected the links
			WaypointName = "door2",
			Priority = 0,
			Enabled = true,
			LimitBots = 2,
			LimitTeam = (1<<TEAM.AXIS), //only axis can use it
			AimPosition = Vector3(-1335.771,2448.125,-6.912),
			Wait = function()
			{
				if ( Map.Door2Status == 0 )
				{
					//wait 0.25 secs while the door opens
					sleep(0.25);
					return true;
				}
				//always return false unless the door is open:
				return false;
			},
		},

		cb_switch =
		{
			WaypointName = "cb_switch",
			Enabled = true,
			Priority = 0,
			LimitBots = 1,
			LimitTeam = (1<<TEAM.AXIS), //only axis can use it

			Wait = function() // optional. used to have the bot wait a bit for slow moving doors / elevators
			{
				// cs: ffs sdoor_trigger -> cb_switch -> door 1 status. how about we name these consistently
				if ( Map.Door1Status == 1 )
				{
					//wait 1.0 secs while the door opens
					sleep(1.0);
					return true;
				}
				//always return false unless the door is open:
				return false;
			},
		},

		south_door =
		{
			WaypointName = "south_door",
			Enabled = true,
			Priority = 0,
			LimitBots = 1,
			LimitTeam = (1<<TEAM.ALLIES), //only axis can use it

			Wait = function() // optional. used to have the bot wait a bit for slow moving doors / elevators
			{
				if ( Map.Door4Status == 1 )
				{
					//wait 1.0 secs while the door opens
					sleep(1.0);
					return true;
				}
				//always return false unless the door is open:
				return false;
			},
		},

		cb_exit =
		{
			WaypointName = "cb_exit",
			Enabled = true,
			Priority = 0.80,
			LimitBots = 2,
		},
	},

	Flag_generator_battery = "FLAG_generator_battery",
	Cappoint_337 = "CAPPOINT_337",
	Build_Command_Post = "BUILD_Command_Post",
	Build_Cracked_Wall = "BUILD_Cracked_Wall",
	Build_East_Assault_Ramp = "BUILD_East_Assault_Ramp",
	Build_West_Assault_Ramp = "BUILD_West_Assault_Ramp",
	Plant_Command_Post = "PLANT_Command_Post",
	Plant_Cracked_Wall = "PLANT_Cracked_Wall",
	Plant_East_Assault_Ramp = "PLANT_East_Assault_Ramp",
	Plant_East_Hull = "PLANT_East_Hull",
	Plant_Main_Warehouse_Entrance = "PLANT_Main_Warehouse_Entrance",
	Plant_Tunnel_Support_Pillar = "PLANT_Tunnel_Support_Pillar",
	Plant_West_Assault_Ramp = "PLANT_West_Assault_Ramp",
	Plant_West_Hull = "PLANT_West_Hull",
	DontDispenseAmmo = true,
	DontDispenseHealth = true,
	DoorStatus == 0,
	Door2Status = 0,
	Door1Status == 0,
	Door4Status == 0,

	Command_Post_Built = function( trigger )
	{
		if ( TestMap )
			{ return; }

		Util.MapDebugPrint("Command_Post_Built");
	},

	Cracked_Wall_Built = function( trigger )
	{
		if ( TestMap )
			{ return; }

		Util.MapDebugPrint("Command_Post_Built");
	},

	East_Assault_Ramp_Built = function( trigger )
	{
		SetAvailableMapGoals( TEAM.ALLIES, true, "PLANT_East_Hull" );
		SetAvailableMapGoals( TEAM.ALLIES, true, "PLANT_West_Hull" );
		SetAvailableMapGoals( TEAM.AXIS, true, "DEFEND_DYNAEAST.*" );
		SetAvailableMapGoals( TEAM.AXIS, true, "DEFEND_DYNAWEST.*" );
		SetAvailableMapGoals( TEAM.AXIS, false, "DEFEND_def.*" );
//~		SetAvailableMapGoals( TEAM.AXIS, false, "CAMP_boat.*" );

		Util.MapDebugPrint("East_Assault_Ramp_Built");
	},

	West_Assault_Ramp_Built = function( trigger )
	{
		SetAvailableMapGoals( TEAM.AXIS, false, "DEFEND_def.*" );
		SetAvailableMapGoals( TEAM.AXIS, true, "DEFEND_DYNAEAST.*" );
		SetAvailableMapGoals( TEAM.AXIS, true, "DEFEND_DYNAWEST.*" );
		SetAvailableMapGoals( TEAM.ALLIES, true, "PLANT_East_Hull" );
		SetAvailableMapGoals( TEAM.ALLIES, true, "PLANT_West_Hull" );

		Util.MapDebugPrint("West_Assault_Ramp_Built");
	},

	Command_Post_Destroyed = function( trigger )
	{
		if ( TestMap )
			{ return; }

		Util.MapDebugPrint("Command_Post_Destroyed");
	},

	Cracked_Wall_Destroyed = function( trigger )
	{
		SetAvailableMapGoals( TEAM.ALLIES, false, "PLANT_Cracked_Wall" );

		Util.MapDebugPrint("Cracked_Wall_Destroyed");
	},

	East_Assault_Ramp_Destroyed = function( trigger )
	{
		if ( TestMap )
			{ return; }

		Util.MapDebugPrint("East_Assault_Ramp_Destroyed");
	},

	East_Hull_Destroyed = function( trigger )
	{
		SetAvailableMapGoals( TEAM.ALLIES, false, "ATTACK_east.*" );
		SetAvailableMapGoals( TEAM.AXIS, false, "DEFEND_DYNAEAST.*" );

		Util.MapDebugPrint("East_Hull_Destroyed");
	},

	Main_Warehouse_Entrance_Destroyed = function( trigger )
	{
		SetAvailableMapGoals( TEAM.AXIS, true, "DEFEND_pillar.*" );
		SetAvailableMapGoals( TEAM.AXIS, true, "DEFEND_stairs" );
		ETUtil.SwitchWeapon(WEAPON.FLAMETHROWER);
		Map.Switches.door2.Enabled = false;
		SetAvailableMapGoals( TEAM.ALLIES, true, "PLANT_Cracked_Wall" );
		SetAvailableMapGoals( TEAM.ALLIES, true, "ATTACK_p.*" );
		SetAvailableMapGoals( TEAM.ALLIES, true, "PLANT_Tunnel_Support_Pillar" );
		SetAvailableMapGoals( TEAM.AXIS, false, "DEFEND_ddoor.*" );
		SetAvailableMapGoals( TEAM.ALLIES, false, "ATTACK_MAINDOOR_.*" );
		SetAvailableMapGoals( TEAM.AXIS, false, "CALLARTILLERY_maindoor.*" );
		SetAvailableMapGoals( TEAM.ALLIES, true, "ATTACK_dyno.*" );

		ETUtil.EnableGoal("ATTACK_DYNAPILAR1"); //enables for both teams
		Util.MapDebugPrint("Main_Warehouse_Entrance_Destroyed");
	},

	Tunnel_Support_Pillar_Destroyed = function( trigger )
	{
		SetAvailableMapGoals( TEAM.AXIS, false, "DEFEND_pillar.*" );
		SetAvailableMapGoals( TEAM.AXIS, false, "DEFEND_stairs" );
		SetAvailableMapGoals( TEAM.ALLIES, false, "ATTACK_p.*" );
		SetAvailableMapGoals( TEAM.ALLIES, true, "CAMP_ramp.*" );
		SetAvailableMapGoals( TEAM.ALLIES, true, "BUILD_East_Assault_Ramp" );
		SetAvailableMapGoals( TEAM.ALLIES, true, "BUILD_West_Assault_Ramp" );
		SetAvailableMapGoals( TEAM.AXIS, true, "PLANT_East_Assault_Ramp" );
		SetAvailableMapGoals( TEAM.AXIS, true, "PLANT_West_Assault_Ramp" );
		SetAvailableMapGoals( TEAM.AXIS, true, "ATTACK_cb" );
//~		SetAvailableMapGoals( TEAM.AXIS, true, "CAMP_boat.*" );
		SetAvailableMapGoals( TEAM.ALLIES, true, "FLAG_generator_battery" );
		SetAvailableMapGoals( TEAM.ALLIES, true, "CAPPOINT_337" );
		SetAvailableMapGoals( TEAM.ALLIES, true, "ATTACK_east.*" );
		SetAvailableMapGoals( TEAM.ALLIES, true, "ATTACK_west.*" );
		SetAvailableMapGoals( TEAM.AXIS, true, "DEFEND_def.*" );
		SetAvailableMapGoals( TEAM.ALLIES, false, "ATTACK_dyno.*" );
		Map.Switches.door2.Enabled = false;
		Map.Switches.door1.Enabled = false;
		Util.KillTeam (2);
		Util.KillTeam (1);
		ETUtil.DisableGoal("ATTACK_DYNAPILAR1"); //enables for both teams

		Util.MapDebugPrint("Tunnel_Support_Pillar_Destroyed");
	},

	West_Assault_Ramp_Destroyed = function( trigger )
	{
		if ( TestMap )
			{ return; }

		Util.MapDebugPrint("West_Assault_Ramp_Destroyed");
	},

	West_Hull_Destroyed = function( trigger )
	{
		SetAvailableMapGoals( TEAM.ALLIES, false, "ATTACK_west.*" );
		SetAvailableMapGoals( TEAM.AXIS, false, "DEFEND_DYNAWEST.*" );

		Util.MapDebugPrint("West_Hull_Destroyed");
	},

	generator_battery_Taken = function( trigger )
	{
		if ( TestMap )
			{ return; }

		Util.MapDebugPrint("generator_battery_Taken");
	},

	CAPPOINT_337_Captured = function( trigger )
	{
		if ( TestMap )
			{ return; }

		Util.MapDebugPrint("CAPPOINT_337_Captured");
	},

	pillar_plant = function( trigger )
	{
		if ( TestMap )
			{ return; }

		Util.MapDebugPrint("pillar_plant");
	},

	door_open = function(trigger)
	{
		if ( TestMap )
			{ return; }

		vel = ToVector(trigger.Action);

		if ( vel.z < 0 )
		{
			// cs: why the need for a second switch? if it's because availablility was wrong
			// for the original, see the next comment.
			SetAvailableMapGoals( TEAM.AXIS, true, "SWITCH_axisclose" );
			
			// cs: why is this setting door 1? shouldn't it be door?
			Map.Switches.door1.Enabled = false;
			Map.DoorStatus = 1;
			Util.MapDebugPrint("Open", true);
		}
		else if ( vel.z > 0 )
		{
			Map.Switches.door1.Enabled = true;
			SetAvailableMapGoals( TEAM.AXIS, false, "SWITCH_axisclose" );
			Map.DoorStatus = 0;
			Util.MapDebugPrint("^1Closed", true);
		}
	},

	dontgo_pushed = function(trigger)
	{
		if ( TestMap )
			{ return; }

		vel = ToVector(trigger.Action);

		if ( vel.y > 0 )
		{
			Util.DisableGoal("SWITCH_dontgo");
			Util.EnableGoal("SWITCH_reaper");
			Util.DisableGoal("ATTACK_cb.*");
			Util.DisableGoal("SWITCH_bell1.*");
			SetAvailableMapGoals( TEAM.ALLIES, true, "CAMP_bucket.*" );
			SetAvailableMapGoals( TEAM.AXIS, true, "CAMP_bucket.*" );
			SetAvailableMapGoals( TEAM.ALLIES, false, "CAMP_jukebox.*" );
			SetAvailableMapGoals( TEAM.AXIS, false, "CAMP_jukebox.*" );
			Util.MapDebugPrint("dontgo pushed");
		}
	},

	reaper_pushed = function(trigger)
	{
		if ( TestMap )
			{ return; }

		vel = ToVector(trigger.Action);

		if ( vel.y > 0 )
		{
			Util.DisableGoal("SWITCH_reaper");
			Util.EnableGoal("SWITCH_dontgo");
			Util.EnableGoal("SWITCH_bell1.*");
			SetAvailableMapGoals( TEAM.ALLIES, false, "CAMP_bucket.*" );
			SetAvailableMapGoals( TEAM.AXIS, false, "CAMP_bucket.*" );
			SetAvailableMapGoals( TEAM.ALLIES, true, "CAMP_jukebox.*" );
			SetAvailableMapGoals( TEAM.AXIS, true, "CAMP_jukebox.*" );
			Util.MapDebugPrint("reaper pushed");
		}
	},

	sdoor_open = function(trigger)
	{
		if ( TestMap )
			{ return; }

		vel = ToVector(trigger.Action);

		if ( vel.y > 0 )
		{
			Map.Switches.cb_switch.Enabled = false;
			Map.Door1Status = 1;
			Util.MapDebugPrint( "S_Open", true );
		}
		else if ( vel.y < 0 )
		{
				Map.Switches.cb_switch.Enabled = true;
				Map.Door1Status = 0;
				Util.MapDebugPrint("^8S_Closed", true);
		}
	},

	ssdoor_open = function(trigger)
	{
		if ( TestMap )
			{ return; }

		vel = ToVector(trigger.Action);

		if ( vel.y < 0 )
		{
			Map.Switches.south_door.Enabled = false;
			Map.Door4Status = 1;
			Util.MapDebugPrint( "ss_Open", true );
		}
		else if ( vel.y > 0 )
		{
			Map.Switches.south_door.Enabled = true;
			Map.Door4Status = 0;
			Util.MapDebugPrint("^8ss_Closed", true);
		}
	},

	side_open = function(trigger)
	{
		if ( TestMap )
			{ return; }

		vel = ToVector(trigger.Action);

		if ( vel.y > 0 )
		{
			Map.Switches.door2.Enabled = false;
			Map.Door2Status = 1;
			Util.MapDebugPrint( "side_Open", true );
		}
		else if ( vel.y < 0 )
		{
			Map.Switches.door2.Enabled = true;
			Map.Door2Status = 0;
			Util.MapDebugPrint("^8side_Closed",true);
		}
	},
};

global OnMapLoad = function()
{
	OnTrigger( "MISSING_STRING", Map.Command_Post_Built );
	OnTrigger( "MISSING_STRING", Map.Cracked_Wall_Built );
	OnTrigger( "Allies have built the East Assault Ramp!", Map.East_Assault_Ramp_Built );
	OnTrigger( "Allies have built the West Assault Ramp!" , Map.West_Assault_Ramp_Built );
	OnTrigger( "MISSING_STRING", Map.Command_Post_Destroyed );
	OnTrigger( "Allies have access to the Side Warehouse Door!", Map.Cracked_Wall_Destroyed );
	OnTrigger( "Axis have destroyed the East Assault Ramp!" , Map.East_Assault_Ramp_Destroyed );
	OnTrigger( "Allies have destroyed the East Hull!", Map.East_Hull_Destroyed );
	OnTrigger( "Allies have blown up the Main Warehouse Door!", Map.Main_Warehouse_Entrance_Destroyed );
	OnTrigger( "Time limit bonus: +5 minutes", Map.Tunnel_Support_Pillar_Destroyed );
//~	OnTrigger( "Allies have destroyed the tunnel support and secured the Warehouse!", Map.Tunnel_Support_Pillar_Destroyed );
	OnTrigger( "Axis have destroyed the West Assault Ramp!", Map.West_Assault_Ramp_Destroyed );
	OnTrigger( "Allies have destroyed the West Hull!", Map.West_Hull_Destroyed );
	OnTrigger( "Allies have taken the generator battery!", Map.generator_battery_Taken );
	OnTrigger( "Allies have successfully powered the generator! Fuel Depot accessible!", Map.CAPPOINT_337_Captured );
	OnTrigger( "Planted at the Tunnel Support Pillar.", Map.pillar_plant );
	OnTrigger( "auto_door_switch_goto", Map.door_open );
	OnTrigger( "secret_door_north_goto", Map.sdoor_open );
	OnTrigger( "secret_door_south_goto", Map.ssdoor_open );
	OnTrigger( "axiswall_door_right_start", Map.side_open );

	OnTrigger( "button_4_goto", Map.dontgo_pushed );
	OnTrigger( "button_2_goto", Map.reaper_pushed );
//~	OnTrigger( "tas_shipyard_allies_intodepot", Map.CAPPOINT_337_Captured );

	SetAvailableMapGoals( TEAM.AXIS, false, ".*" );
	SetAvailableMapGoals( TEAM.ALLIES, false, ".*" );
	Map.Switches.door1.Enabled = true;
	Map.Switches.door2.Enabled = true;
	Map.Switches.cb_switch.Enabled = true;
	Map.Switches.cb_exit.Enabled = true;

	SetAvailableMapGoals( TEAM.ALLIES, true, "ATTACK_MAINDOOR_.*" );
	Util.EnableGoal("SWITCH_dontgo");
	Util.EnableGoal("ATTACK_cb.*");
	SetAvailableMapGoals( TEAM.ALLIES, true, Map.Plant_Main_Warehouse_Entrance );

	SetAvailableMapGoals( TEAM.AXIS, true, "DEFEND_ddoor.*" );
	SetAvailableMapGoals( TEAM.AXIS, true, "CALLARTILLERY_maindoor.*" );

	Util.SetMaxUsers( 1, "DEFEND_.*" );
	Util.SetMaxUsers( 1, "ATTACK_.*" );
	Util.SetMaxUsers( 1, "SWITCH_.*" );
	Util.SetMaxUsers( 1, "FLAG_generator_battery" );
	Util.SetGoalPosition( 3465.6, 4498.4, 59.202, "PLANT_West_Assault_Ramp" ) ;

	SetMapGoalProperties( "DEFEND_.*", {MinCampTime=30, MaxCampTime=90} );
	SetMapGoalProperties( "MOUNT_.*", {MinCampTime=30, MaxCampTime=90} );
	SetMapGoalProperties( "MOBILEMG42_.*", {MinCampTime=30, MaxCampTime=90} );
	SetMapGoalProperties( "MOUNTMG42_.*", {MinCampTime=30, MaxCampTime=90} );
	SetMapGoalProperties( "ATTACK_.*", {MinCampTime=30, MaxCampTime=90} );

	Util.EnableGoal("ROUTE_.*"); //enables for both teams
//	Util.LimitToClass("PLANT_East_Assault_Ramp" , TEAM.AXIS, CLASS.COVERTOPS);
//	Util.LimitToClass("PLANT_West_Assault_Ramp" , TEAM.AXIS, CLASS.ENGINEER);
	SetGoalPriority( "PLANT_West_Assault_Ramp", 0.45 , TEAM.AXIS, CLASS.ENGINEER);

	Util.UpdateSwitchData();

	Util.MapDebugPrint("OnMapLoad");
};

global OnBotJoin = function( bot )
{
	 bot.TargetBreakableDist = 100.0;
};
