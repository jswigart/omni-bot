//script created by palota
global Map =
{
	safeIsDestroyed=false,
	safePlantedTime=null,
	threadid_Safe=null,

	IsSafePlanted = function()
	{
		if(Map.safePlantedTime==null || (Map.safePlantedTime - GetGameTimeLeft() > 30)){
			Map.safePlantedTime=null;
			return false;
		}
		return true;
	},

	Navigation =
	{
		// cs: note: a user defined plant goal will NOT work in 0.8 because the OID does not define a targetEnt
		safe =
		{
			navigate = function(_this)
			{
				if (!Map.safeIsDestroyed)
				{
					bot = _this.Bot;
					if(bot.GetTeam()==TEAM.AXIS && bot.GetClass()==CLASS.ENGINEER)
					{
						wpinfo = Util.WpNameInfo("safe");
						bot.RemoveState("PlantExplosive"); //to prevent bot endlessly arming dynamite
						for(i=0; i<9 && !Map.IsSafePlanted(); i+=1)
						{
							dyn = bot.GetNearest(CAT.PROJECTILE, CLASS.DYNAMITE);
							if(dyn==null){
								//print("plant");
								_this.Goto(wpinfo.position);
								_this.AddAimRequest(Priority.High, "facing", wpinfo.facing);
								_this.AddWeaponRequest(Priority.High, WEAPON.DYNAMITE );
								_this.BlockForWeaponChange( WEAPON.DYNAMITE );
								sleep(0.5);
								bot.FireWeapon(); //plant dynamite
								sleep(2);
							}else{
								//print("fuse");
								bot.HoldButton(BTN.CROUCH, 20);
								sleep(0.1);
								botPos = bot.GetPosition();
								_this.AddWeaponRequest(Priority.High, WEAPON.PLIERS );
								_this.BlockForWeaponChange( WEAPON.PLIERS );
								bot.MoveTowards(botPos);
								_this.AddAimRequest(Priority.High, "facing", GetEntPosition(dyn) - botPos);
								bot.HoldButton(BTN.ATTACK1, 15);
								for(j=0; j<60 && !Map.IsSafePlanted(); i+=1){ //wait until it's armed
									sleep(0.25);
								}
								bot.ReleaseButton(BTN.ATTACK1,BTN.CROUCH);
								//print("done");
							}
						}
						_this.ReleaseWeaponRequest();
						_this.Goto(Util.WpNameInfo("safe2").position); //escape from the dynamite
					}
				}
			},
		},

		ladder_down =  //roof
		{
			navigate = function(_this)
			{
				wpinfo = Util.WpNameInfo("ladder_roof");
				_this.AddAimRequest(Priority.High, "facing", wpinfo.facing);
				_this.Bot.HoldButton(BTN.CROUCH, BTN.FORWARD, 3.5);
				sleep(3.5);
			}
		},
	},

	Gold_Taken = function( trigger )
	{
		if(!Map.safeIsDestroyed){ Map.Safe_Destroyed(); }
		Util.EnableGoal("DEFEND_truck.*");
		SetAvailableMapGoals( TEAM.AXIS, false, "DEFEND_truck1");
		SetAvailableMapGoals( TEAM.AXIS, false, "DEFEND_truck4");
		SetAvailableMapGoals( TEAM.ALLIES, false, "DEFEND_truck5");
		SetAvailableMapGoals( TEAM.ALLIES, false, "DEFEND_safe.*");
	},

	Gold_Returned = function( trigger )
	{
		Util.DisableGoal("DEFEND_truck.*");
		SetAvailableMapGoals( TEAM.ALLIES, true, "DEFEND_safe.*");
	},

	//this map has no trigger for destroying the safe
	Watch_Safe = function()
	{
		pos1 = Util.WpNameInfo("safe").position;
		pos2 = Util.WpNameInfo("gold").position;

		while(!Map.safeIsDestroyed)
		{
			if(!Map.IsSafePlanted())
			{
				//dynamite has been defused
				SetAvailableMapGoals( TEAM.AXIS, true, "ATTACK_safe");
			}
			//print("Watch_Safe");
			sleep(18);
			tr = TraceLine(pos1, pos2, null, TRACE.SOLID, 0, true);
			if(tr.fraction == 1){ Map.Safe_Destroyed(); }
		}
	},

	Safe_Planted = function( trigger )
	{
		Map.safePlantedTime = GetGameTimeLeft();
		SetAvailableMapGoals( TEAM.AXIS, false, "ATTACK_safe"); //there is a dynamite
		SetAvailableMapGoals( TEAM.ALLIES, false, "DEFEND_safe8");
		if(Map.threadid_Safe==null){ Map.threadid_Safe=thread(Map.Watch_Safe); }
	},

	Safe_Destroyed = function()
	{
		Map.safeIsDestroyed = true;
		SetAvailableMapGoals( TEAM.AXIS, true, "FLAG_Gold");
		SetAvailableMapGoals( TEAM.AXIS, false, "ATTACK_safe.*");
		Util.MapDebugPrint( "Safe_Destroyed" );
	},
};

global OnMapLoad = function()
{
	OnTrigger( "Axis have stolen Gold!", Map.Gold_Taken );
	OnTrigger( "Flag returned Gold!", Map.Gold_Returned );
	OnTrigger( "Planted at The Safe.", Map.Safe_Planted );

	SetAvailableMapGoals( TEAM.AXIS, false, "REPAIRMG.*");
	SetAvailableMapGoals( TEAM.ALLIES, false, "CAPPOINT.*");
	Util.DisableGoal("DEFEND_truck.*");
 	SetGoalPriority("ATTACK_safe", 0, TEAM.AXIS);
 	SetGoalPriority("ATTACK_safe.*", 0.2, TEAM.AXIS, CLASS.ENGINEER);
 	SetGoalPriority("ATTACK_safe", 0.9, TEAM.AXIS, CLASS.ENGINEER);

	SetAvailableMapGoals( TEAM.AXIS, false, "FLAG_Gold");
 	SetGoalPriority("MOUNTMG42.*", 0, TEAM.AXIS, CLASS.ENGINEER);
 	SetGoalPriority("MOBILEMG.*", 0.6, TEAM.AXIS);

	Util.SetMaxUsersInProgress(1, "SNIPE.*");
	Util.SetMaxUsersInProgress(1, "MOUNTMG42.*");

	SetMapGoalProperties( "DEFEND.*", {mincamptime=40, maxcamptime=150} );
 	SetMapGoalProperties( "FLAME_.*", {mincamptime=30, maxcamptime=150} );
 	SetMapGoalProperties( "MOUNTMG42_.*", {mincamptime=90, maxcamptime=300} );

	MapRoutes =
	{
		FLAG_Gold = {
			ROUTE_axis_spawn = {
				ROUTE_north1 = { ROUTE_floor1 = {}},
				ROUTE_north3 = { ROUTE_floor2 = {}},
				ROUTE_north4 = { ROUTE_floor2 = {}},
				ROUTE_sewer_south = { Weight=3,
					ROUTE_shaft1 = {},
					ROUTE_shaft2 = {},
				},
				ROUTE_roof = {},
				ROUTE_south_west = { ROUTE_marijuana = { ROUTE_floor1 = {}}},
				ROUTE_disco = { ROUTE_floor2 = {}},
			}
		},
		CAPPOINT_van = {
			ROUTE_gold1 = {
				ROUTE_north1 = {},
				ROUTE_north3 = {},
				ROUTE_north4 = { Weight=2 },
				ROUTE_sewer_south = { Weight=3, ROUTE_sewer_north = {}},
			}
		},
		DEFEND_safe1 = {
			ROUTE_allied_spawn = {
				ROUTE_back = { Weight=2 },
				ROUTE_entrance = {},
				ROUTE_allies2 = {},
			}
		},
		DEFEND_truck1 = {
			ROUTE_allies_passage = {},
			ROUTE_north1 = {},
			ROUTE_north3 = {},
		},
	};
	MapRoutes.ATTACK_safe = MapRoutes.FLAG_Gold;
	MapRoutes.ATTACK_safe3 = MapRoutes.ATTACK_safe;
	MapRoutes.ATTACK_safe4 = MapRoutes.ATTACK_safe;
	MapRoutes.DEFEND_safe2 = MapRoutes.DEFEND_safe1;
	MapRoutes.DEFEND_safe5 = MapRoutes.DEFEND_safe1;
	MapRoutes.DEFEND_safe7 = MapRoutes.DEFEND_safe1;
	MapRoutes.DEFEND_safe8 = MapRoutes.DEFEND_safe1;
	MapRoutes.DEFEND_truck3 = MapRoutes.DEFEND_truck1;
	MapRoutes.DEFEND_truck4 = MapRoutes.DEFEND_truck1;
	Util.Routes(MapRoutes);
};

global OnBotJoin = function( bot )
{
	bot.TargetBreakableDist = 200.0;
};
