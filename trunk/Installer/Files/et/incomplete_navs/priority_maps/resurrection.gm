//========================================================================================================
//
//	1944 Nordwind Final - 1944_nordwind.gm
//
//	Who  		When			What
//--------------------------------------------------------------------------------------------------------
//	Mateos		~2009			Updated ailmanki waypoints for OB 0.71
//	Crapshoot	~2010			Conversion of my unfinished 0.71 waypoints to the beta 0.8
//	Mateos		21/05/2011		Conversion of the final 0.71 waypoints to 0.81
//
//========================================================================================================

/****************************************************
Original waypoints by ailmanki (12 July 2007)
Pathing updated and script by >M@t£o$<
Correspondant WAY file size : 85,9 Ko (87 978 octets)
Last Update : 21 May 2011
****************************************************/

global Map =
{
	Debug = 0,
	// Set Talk to false if you don't want the bots to talk:
	Talk = true,
	ShowMovers = false,

	Allied_Command_Post_Dyno = 0,
	Axis_Command_Post_Dyno = 0,
	Basement_Bridge_Dyno = 0,
	Crypt_Gate_Dyno = 0,
	Dock_Dyno = 0,
	catacomb_door_Dyno = 0,
	main_gate_power_Dyno = 0,
	waterway_door_Dyno = 0,

	Movers =
	{
		"MOVER_train2",
	},

	EscortVehicle =
	{
		Boat =
		{
			Enabled = false,
			Priority = 1.1,
			EscortVehicleGoalName = "MOVER_train2",
			ButtonPress = BTN.JUMP,
			LimitBots = 2,
			LimitTeam = Util.AllTeams,
			Offset =
			{
				Vector3(0,0,100),
			}
		},
	},

	// *** TRIGGER CALLBACKS ***
	Allied_Command_Post_Built = function( trigger )
	{
		if ( TestMap )
			{ return; }

		if ( Map.Debug )
			{ Util.MapDebugPrint( "Allied_Command_Post_Built" ); }
	},

	Axis_Command_Post_Built = function( trigger )
	{
		if ( TestMap )
			{ return; }

		if ( Map.Debug )
			{ Util.MapDebugPrint( "Axis_Command_Post_Built" ); }
	},

	Basement_Bridge_Built = function( trigger )
	{
		if ( TestMap )
			{ return; }

		SetAvailableMapGoals( TEAM.AXIS, true, "PLANT_Basement_Bridge" );

		if ( Map.Debug )
			{ Util.MapDebugPrint( "Basement_Bridge_Built" ); }
	},

	Crypt_Gate_Built = function( trigger )
	{
		if ( TestMap )
			{ return; }

		SetAvailableMapGoals( TEAM.ALLIES, false, "ROUTE_CryptGate1" );

		if ( Map.Debug )
			{ Util.MapDebugPrint( "Crypt_Gate_Built" ); }
	},

	Dock_Built = function( trigger )
	{
		if ( TestMap )
			{ return; }

		SetAvailableMapGoals( TEAM.AXIS, true, "DEFEND_start4" );

		SetAvailableMapGoals( TEAM.ALLIES, true, "PLANT_waterway_door" );

		if ( Map.Debug )
			{ Util.MapDebugPrint( "Dock_Built" ); }
	},

	Allied_Command_Post_Planted = function( trigger )
	{
		if ( TestMap )
			{ return; }

		Map.Allied_Command_Post_Dyno += 1;
		SetAvailableMapGoals( TEAM.AXIS, false, "PLANT_Allied_Command_Post" );

		if ( Map.Debug )
			{ Util.MapDebugPrint( "Allied_Command_Post_Planted" ); }
	},

	Axis_Command_Post_Planted = function( trigger )
	{
		if ( TestMap )
			{ return; }

		Map.Axis_Command_Post_Dyno += 1;
		SetAvailableMapGoals( TEAM.ALLIES, false, "PLANT_Axis_Command_Post" );

		if ( Map.Debug )
			{ Util.MapDebugPrint( "Axis_Command_Post_Planted" ); }
	},

	Basement_Bridge_Planted = function( trigger )
	{
		if ( TestMap )
			{ return; }

		Map.Basement_Bridge_Dyno += 1;
		SetAvailableMapGoals( TEAM.AXIS, false, "PLANT_Basement_Bridge" );

		if ( Map.Debug )
			{ Util.MapDebugPrint( "Basement_Bridge_Planted" ); }
	},

	Crypt_Gate_Planted = function( trigger )
	{
		if ( TestMap )
			{ return; }

		Map.Crypt_Gate_Dyno += 1;
		SetAvailableMapGoals( TEAM.ALLIES, false, "PLANT_Crypt_Gate" );

		if ( Map.Debug )
			{ Util.MapDebugPrint( "Crypt_Gate_Planted" ); }
	},

	Dock_Planted = function( trigger )
	{
		if ( TestMap )
			{ return; }

		Map.Dock_Dyno += 1;
		SetAvailableMapGoals( TEAM.AXIS, false, "PLANT_Dock" );

		if ( Map.Debug )
			{ Util.MapDebugPrint( "Dock_Planted" ); }
	},

	catacomb_door_Planted = function( trigger )
	{
		if ( TestMap )
			{ return; }

		Map.catacomb_door_Dyno += 1;
		SetAvailableMapGoals( TEAM.ALLIES, false, "PLANT_catacomb_door" );

		if ( Map.Debug )
			{ Util.MapDebugPrint( "catacomb_door_Planted" ); }
	},

	main_gate_power_Planted = function( trigger )
	{
		if ( TestMap )
			{ return; }

		Map.main_gate_power_Dyno += 1;
		SetAvailableMapGoals( TEAM.ALLIES, false, "PLANT_main_gate_power" );

		if ( Map.Debug )
			{ Util.MapDebugPrint( "main_gate_power_Planted" ); }
	},

	waterway_door_Planted = function( trigger )
	{
		if ( TestMap )
			{ return; }

		Map.waterway_door_Dyno += 1;
		SetAvailableMapGoals( TEAM.ALLIES, false, "PLANT_waterway_door" );

		if ( Map.Debug )
			{ Util.MapDebugPrint( "waterway_door_Planted" ); }
	},

	Allied_Command_Post_Defused = function( trigger )
	{
		if ( TestMap )
			{ return; }

		Map.Allied_Command_Post_Dyno -= 1;
		if ( Map.Allied_Command_Post_Dyno < 1 )
			{ SetAvailableMapGoals( TEAM.AXIS, true, "PLANT_Allied_Command_Post" ); }

		if ( Map.Debug )
			{ Util.MapDebugPrint( "Allied_Command_Post_Defused" ); }
	},

	Axis_Command_Post_Defused = function( trigger )
	{
		if ( TestMap )
			{ return; }

		Map.Axis_Command_Post_Dyno -= 1;
		if ( Map.Axis_Command_Post_Dyno < 1 )
			{ SetAvailableMapGoals( TEAM.ALLIES, true, "PLANT_Axis_Command_Post" ); }

		if ( Map.Debug )
			{ Util.MapDebugPrint( "Axis_Command_Post_Defused" ); }
	},

	Basement_Bridge_Defused = function( trigger )
	{
		if ( TestMap )
			{ return; }

		Map.Basement_Bridge_Dyno -= 1;
		if ( Map.Basement_Bridge_Dyno < 1 )
			{ SetAvailableMapGoals( TEAM.AXIS, true, "PLANT_Basement_Bridge" ); }

		if ( Map.Debug )
			{ Util.MapDebugPrint( "Basement_Bridge_Defused" ); }
	},

	Crypt_Gate_Defused = function( trigger )
	{
		if ( TestMap )
			{ return; }

		Map.Crypt_Gate_Dyno -= 1;
		if ( Map.Crypt_Gate_Dyno < 1 )
			{ SetAvailableMapGoals( TEAM.ALLIES, true, "PLANT_Crypt_Gate" ); }

		if ( Map.Debug )
			{ Util.MapDebugPrint( "Crypt_Gate_Defused" ); }
	},

	Dock_Defused = function( trigger )
	{
		if ( TestMap )
			{ return; }

		Map.Dock_Dyno -= 1;
		if ( Map.Dock_Dyno < 1 )
			{ SetAvailableMapGoals( TEAM.AXIS, true, "PLANT_Dock" ); }

		if ( Map.Debug )
			{ Util.MapDebugPrint( "Dock_Defused" ); }
	},

	catacomb_door_Defused = function( trigger )
	{
		if ( TestMap )
			{ return; }

		Map.catacomb_door_Dyno -= 1;
		if ( Map.catacomb_door_Dyno < 1 )
			{ SetAvailableMapGoals( TEAM.ALLIES, true, "PLANT_catacomb_door" ); }

		if ( Map.Debug )
			{ Util.MapDebugPrint( "catacomb_door_Defused" ); }
	},

	main_gate_power_Defused = function( trigger )
	{
		if ( TestMap )
			{ return; }

		Map.main_gate_power_Dyno -= 1;
		if ( Map.main_gate_power_Dyno < 1 )
			{ SetAvailableMapGoals( TEAM.ALLIES, true, "PLANT_main_gate_power" ); }

		if ( Map.Debug )
			{ Util.MapDebugPrint( "main_gate_power_Defused" ); }
	},

	waterway_door_Defused = function( trigger )
	{
		if ( TestMap )
			{ return; }

		Map.waterway_door_Dyno -= 1;
		if ( Map.waterway_door_Dyno < 1 )
			{ SetAvailableMapGoals( TEAM.ALLIES, true, "PLANT_waterway_door" ); }

		if ( Map.Debug )
			{ Util.MapDebugPrint( "waterway_door_Defused" ); }
	},

	Allied_Command_Post_Destroyed = function( trigger )
	{
		if ( TestMap )
			{ return; }

		if ( Map.Debug )
			{ Util.MapDebugPrint( "Allied_Command_Post_Destroyed" ); }
	},

	Axis_Command_Post_Destroyed = function( trigger )
	{
		if ( TestMap )
			{ return; }

		if ( Map.Debug )
			{ Util.MapDebugPrint( "Axis_Command_Post_Destroyed" ); }
	},

	Basement_Bridge_Destroyed = function( trigger )
	{
		if ( TestMap )
			{ return; }

		if ( Map.Debug )
			{ Util.MapDebugPrint( "Basement_Bridge_Destroyed" ); }
	},

	Crypt_Gate_Destroyed = function( trigger )
	{
		if ( TestMap )
			{ return; }

		SetAvailableMapGoals( TEAM.AXIS, true, "PLANTMINE_Obj.*" );
		SetAvailableMapGoals( TEAM.AXIS, true, "PLANTMINE_Taken.*" );

		SetAvailableMapGoals( TEAM.ALLIES, true, "ROUTE_CryptGate1" );

		if ( Map.Debug )
			{ Util.MapDebugPrint( "Crypt_Gate_Destroyed" ); }
	},

	Dock_Destroyed = function( trigger )
	{
		if ( TestMap )
			{ return; }

		SetAvailableMapGoals( TEAM.AXIS, false, "DEFEND_start4" );

		if ( Map.Debug )
			{ Util.MapDebugPrint( "Dock_Destroyed" ); }
	},

	catacomb_door_Destroyed = function( trigger )
	{
		if ( TestMap )
			{ return; }

		SetAvailableMapGoals( TEAM.AXIS, true, "DEFEND_Delta.*" );
		SetAvailableMapGoals( TEAM.AXIS, true, "PLANTMINE_Obj.*" );
		SetAvailableMapGoals( TEAM.AXIS, true, "PLANTMINE_Taken.*" );
		SetAvailableMapGoals( TEAM.AXIS, false, "DEFEND_Bravo.*" );

		SetAvailableMapGoals( TEAM.ALLIES, true, "ROUTE_Ladder1" );

		if ( Map.Debug )
			{ Util.MapDebugPrint( "catacomb_door_Destroyed" ); }
	},

	main_gate_power_Destroyed = function( trigger )
	{
		if ( TestMap )
			{ return; }

		Wp.SetWaypointFlag( "WaterwayClosed", "closed", false );

		SetAvailableMapGoals( TEAM.AXIS, true, "DEFEND_Alpha.*" );
		SetAvailableMapGoals( TEAM.AXIS, true, "DEFEND_AxisFlag" );
		SetAvailableMapGoals( TEAM.AXIS, true, "DEFEND_Catacomb.*" );
		SetAvailableMapGoals( TEAM.AXIS, true, "DEFEND_DoorDestroyed" );
		SetAvailableMapGoals( TEAM.AXIS, true, "MOUNTMG42_HouseMG42" );
		SetAvailableMapGoals( TEAM.AXIS, true, "BUILD_Crypt_Gate" );
		SetAvailableMapGoals( TEAM.AXIS, true, "BUILD_Axis_Command_Post" );
		SetAvailableMapGoals( TEAM.AXIS, true, "MOBILEMG42_EntranceMobileMG42" );
		SetAvailableMapGoals( TEAM.AXIS, false, "MOUNTMG42_StartMG42" );
		SetAvailableMapGoals( TEAM.AXIS, false, "DEFEND_start.*" );
		SetAvailableMapGoals( TEAM.AXIS, false, "DEFEND_High" );
		SetAvailableMapGoals( TEAM.AXIS, false, "DEFEND_DoorDestroyed" );

		SetAvailableMapGoals( TEAM.ALLIES, true, "ATTACK_Charlie.*" );
		SetAvailableMapGoals( TEAM.ALLIES, true, "CHECKPOINT_room_flag" );
		SetAvailableMapGoals( TEAM.ALLIES, true, "BUILD_Allied_Command_Post" );
		SetAvailableMapGoals( TEAM.ALLIES, true, "PLANT_Crypt_Gate" );
		SetAvailableMapGoals( TEAM.ALLIES, true, "PLANT_catacomb_door" );
		SetAvailableMapGoals( TEAM.ALLIES, true, "PLANT_Axis_Command_Post" );
		SetAvailableMapGoals( TEAM.ALLIES, false, "ATTACK_Echo.*" );

		if (Map.Talk)
		{
			foreach ( id and bot in BotTable )
			{
				if ( bot.GetTeam() == TEAM.AXIS )
				{
					r = RandRange(0,10);
					if( r < 2 )
					{
						bot.SayVoice(VOICE.REINFORCE_DEF);
					}
					else if( r > 8 )
					{
						bot.SayVoice(VOICE.DEFEND_OBJECTIVE);
					}
				}
				if ( bot.GetTeam() == TEAM.ALLIES )
				{
					r = RandRange(0,10);
					if( r < 2 )
					{
						bot.SayVoice(VOICE.LETS_GO);
					}
					else if( r > 8 )
					{
						sleep(1.2);
						bot.SayVoice(VOICE.G_CHEER);
					}
				}
			}
		}

		if ( Map.Debug )
			{ Util.MapDebugPrint( "main_gate_power_Destroyed" ); }
	},

	waterway_door_Destroyed = function( trigger )
	{
		if ( TestMap )
			{ return; }

		SetAvailableMapGoals( TEAM.ALLIES, true, "BUILD_Basement_Bridge" );

		if ( Map.Debug )
			{ Util.MapDebugPrint( "waterway_door_Destroyed" ); }
	},

	Book_of_the_Resurrection_Taken = function( trigger )
	{
		if ( TestMap )
			{ return; }

		SetAvailableMapGoals( TEAM.AXIS, true, "ATTACK_Echo.*" );
		SetAvailableMapGoals( TEAM.AXIS, true, "DEFEND_Alpha.*" );
		SetAvailableMapGoals( TEAM.AXIS, false, "DEFEND_Bravo.*");
		SetAvailableMapGoals( TEAM.AXIS, false, "DEFEND_Delta.*" );
		SetAvailableMapGoals( TEAM.AXIS, false, "DEFEND_Catacomb.*");

		if (Map.Talk)
		{
			foreach ( id and bot in BotTable )
			{
				if ( bot.GetTeam() == TEAM.AXIS )
				{
					r = RandRange(0,10);
					if( r < 2 )
					{
						bot.SayVoice(VOICE.G_NEGATIVE);
					}
					else if( r > 8 )
					{
						bot.SayTeam("All to the Boat!!!");
					}
				}
				if ( bot.GetTeam() == TEAM.ALLIES )
				{
					r = RandRange(0,10);
					if( r < 2 )
					{
						bot.SayVoice(VOICE.MOVE);
					}
				}
			}
		}

		Util.MapDebugPrint( "Book_of_the_Resurrection_Taken" );
	},

	Book_of_the_Resurrection_Returned = function( trigger )
	{
		if ( TestMap )
			{ return; }

		SetAvailableMapGoals( TEAM.AXIS, true, "DEFEND_Bravo.*");
		SetAvailableMapGoals( TEAM.AXIS, true, "DEFEND_Delta.*" );
		SetAvailableMapGoals( TEAM.AXIS, true, "DEFEND_Catacomb.*");
		SetAvailableMapGoals( TEAM.AXIS, false, "ATTACK_Echo.*" );
		SetAvailableMapGoals( TEAM.AXIS, false, "DEFEND_Alpha.*" );

		if (Map.Talk)
		{
			foreach ( id and bot in BotTable )
			{
				if ( bot.GetTeam() == TEAM.AXIS )
				{
					r = RandRange(0,10);
					if( r < 2 )
					{
						bot.SayVoice(VOICE.G_GOODGAME);
					}
					else if( r > 8 )
					{
						bot.SayVoice(VOICE.DEFEND_OBJECTIVE);
					}
				}
			}
		}

		Util.MapDebugPrint( "Book_of_the_Resurrection_Returned" );
	},

	Book_of_the_Resurrection_Secured = function( trigger )
	{
		if ( TestMap )
			{ return; }

		Util.DisableGoal( ".*", true );	// All but Routes
		Util.EnableGoal( "MOVER_train2", true );
		Map.EscortVehicle.Boat.Enabled = true;

		SetAvailableMapGoals( TEAM.AXIS, true, "DEFEND_End.*" );

		SetAvailableMapGoals( TEAM.ALLIES, true, "DEFEND_start.*" );

		//Close useless "DEFEND_start.*" spots
		SetAvailableMapGoals( TEAM.ALLIES, false, "DEFEND_start1" );
		SetAvailableMapGoals( TEAM.ALLIES, false, "DEFEND_start2" );
		SetAvailableMapGoals( TEAM.ALLIES, false, "DEFEND_start4" );

		if (Map.Talk)
		{
			foreach ( id and bot in BotTable )
			{
				if ( bot.GetTeam() == TEAM.AXIS )
				{
					r = RandRange(0,10);
					if( r < 2 )
					{
						bot.SayVoice(VOICE.G_NEGATIVE);
					}
					else if( r > 8 )
					{
						bot.SayTeam("All to the Boat!!!");
					}
				}
				if ( bot.GetTeam() == TEAM.ALLIES )
				{
					r = RandRange(0,10);
					if( r < 2 )
					{
						bot.SayVoice(VOICE.G_GOODGAME);
					}
					else if( r > 8 )
					{
						sleep(1.2);
						bot.SayVoice(VOICE.ESCORT_VEHICLE);
					}
				}
			}
		}

		Util.MapDebugPrint( "Book_of_the_Resurrection_Secured" );
	},

	room_flag_Axis_Captured = function( trigger )
	{
		if ( TestMap )
			{ return; }

		SetAvailableMapGoals( TEAM.AXIS, true, "PLANT_Dock" );
		SetAvailableMapGoals( TEAM.AXIS, true, "DEFEND_Alpha.*" );
		SetAvailableMapGoals( TEAM.AXIS, true, "DEFEND_AxisFlag" );
		SetAvailableMapGoals( TEAM.AXIS, true, "DEFEND_DoorDestroyed" );
		SetAvailableMapGoals( TEAM.AXIS, true, "MOBILEMG42_EntranceMobileMG42" );

		SetAvailableMapGoals( TEAM.ALLIES, true, "BUILD_Dock" );
		SetAvailableMapGoals( TEAM.ALLIES, true, "PLANT_waterway_door" );
		SetAvailableMapGoals( TEAM.ALLIES, true, "CHECKPOINT_room_flag" );

		if ( Map.Debug )
			{ Util.MapDebugPrint( "room_flag_Axis_Captured" ); }
	},

	room_flag_Allies_Captured = function( trigger )
	{
		if ( TestMap )
			{ return; }

		SetAvailableMapGoals( TEAM.AXIS, true, "DEFEND_Bravo.*" );
		SetAvailableMapGoals( TEAM.AXIS, true, "CHECKPOINT_room_flag" );
		SetAvailableMapGoals( TEAM.AXIS, false, "PLANT_Dock" );
		SetAvailableMapGoals( TEAM.AXIS, false, "DEFEND_Alpha.*" );
		SetAvailableMapGoals( TEAM.AXIS, false, "DEFEND_AxisFlag" );
		SetAvailableMapGoals( TEAM.AXIS, false, "DEFEND_DoorDestroyed" );
		SetAvailableMapGoals( TEAM.AXIS, false, "MOBILEMG42_EntranceMobileMG42" );

		SetAvailableMapGoals( TEAM.ALLIES, false, "BUILD_Dock" );
		SetAvailableMapGoals( TEAM.ALLIES, false, "PLANT_waterway_door" );

		if ( Map.Debug )
			{ Util.MapDebugPrint( "room_flag_Allies_Captured" ); }
	},

	AlliesWin = function( trigger )
	{
		if ( TestMap )
			{ return; }

		if (Map.Talk)
		{
			foreach ( id and bot in BotTable )
			{
				if ( bot.GetTeam() == TEAM.AXIS )
				{
					r = RandRange(0,10);
					if( r < 2 )
					{
						bot.SayVoice(VOICE.G_NEGATIVE);
					}
					else if( r > 8 )
					{
						bot.Say("Verdammt!");
					}
				}
				if ( bot.GetTeam() == TEAM.ALLIES )
				{
					r = RandRange(0,10);
					if( r < 2 )
					{
						bot.SayVoice(VOICE.G_GOODGAME);
					}
					else if( r > 8 )
					{
						sleep(1.2);
						bot.SayVoice(VOICE.G_CHEER);
					}
				}
			}
		}

		if ( Map.Debug )
			{ Util.MapDebugPrint( "AlliesWin" ); }
	},
};

global OnMapLoad = function()
{
	if ( TestMapOn )
		{ Util.AutoTestMap(); }

	// *** TRIGGERS ***
	OnTrigger( "Allied Command Post constructed. Charge speed increased!", Map.Allied_Command_Post_Built );
	OnTrigger( "Axis Command Post constructed. Charge speed increased!", Map.Axis_Command_Post_Built );
	OnTrigger( "Basement Bridge has been constructed.", Map.Basement_Bridge_Built );
	OnTrigger( "Gate to Crypt has been constructed.", Map.Crypt_Gate_Built );
	OnTrigger( "Dock to waterway door has been constructed.", Map.Dock_Built );
	OnTrigger( "Planted at the Allied Command Post.", Map.Allied_Command_Post_Planted );
	OnTrigger( "Planted at the Axis Command Post.", Map.Axis_Command_Post_Planted );
	OnTrigger( "Planted at Basement Bridge.", Map.Basement_Bridge_Planted );
	OnTrigger( "Planted at Crypt Gate.", Map.Crypt_Gate_Planted );
	OnTrigger( "Planted at Dock.", Map.Dock_Planted );
	OnTrigger( "Planted at the catacomb door.", Map.catacomb_door_Planted );
	OnTrigger( "Planted at the main gate power.", Map.main_gate_power_Planted );
	OnTrigger( "Planted at the waterway door.", Map.waterway_door_Planted );
	OnTrigger( "Defused at the Allied Command Post.", Map.Allied_Command_Post_Defused );
	OnTrigger( "Defused at the Axis Command Post.", Map.Axis_Command_Post_Defused );
	OnTrigger( "Defused at Basement Bridge.", Map.Basement_Bridge_Defused );
	OnTrigger( "Defused at Crypt Gate.", Map.Crypt_Gate_Defused );
	OnTrigger( "Defused at Dock.", Map.Dock_Defused );
	OnTrigger( "Defused at the catacomb door.", Map.catacomb_door_Defused );
	OnTrigger( "Defused at the Main Gate Power.", Map.main_gate_power_Defused );
	OnTrigger( "Defused at the waterway door.", Map.waterway_door_Defused );
	OnTrigger( "Axis team has destroyed the Allied Command Post!", Map.Allied_Command_Post_Destroyed );
	OnTrigger( "Allied team has destroyed the Axis Command Post!", Map.Axis_Command_Post_Destroyed );
	OnTrigger( "Basement Bridge has been destroyed.", Map.Basement_Bridge_Destroyed );
	OnTrigger( "Gate to Crypt has been destroyed.", Map.Crypt_Gate_Destroyed );
	OnTrigger( "Dock to waterway door has been destroyed.", Map.Dock_Destroyed );
	OnTrigger( "Allies Breached the catacomb tunnel entrance", Map.catacomb_door_Destroyed );
	OnTrigger( "The Main Gate has been breached!", Map.main_gate_power_Destroyed );
	OnTrigger( "Allies Breached the waterway entrance", Map.waterway_door_Destroyed );
	OnTrigger( "Allies have stolen Book of the Resurrection!", Map.Book_of_the_Resurrection_Taken );
	OnTrigger( "Axis have returned Book of the Resurrection!", Map.Book_of_the_Resurrection_Returned );
	OnTrigger( "Allied team is escaping with the Book!", Map.Book_of_the_Resurrection_Secured );
	OnTrigger( "Axis reclaims the Forward room!", Map.room_flag_Axis_Captured );
	OnTrigger( "Allies capture the Forward room!", Map.room_flag_Allies_Captured );
	OnTrigger( "Allied team escaped with the Book!", Map.AlliesWin );

	// *** CLEAR ALL GOALS FOR BOTH TEAMS ***
	Util.DisableGoal( ".*", true );	// All but Routes

	// *** AXIS GOALS ***
	SetAvailableMapGoals( TEAM.AXIS, true, "PLANT_Dock" );
	SetAvailableMapGoals( TEAM.AXIS, true, "MOUNTMG42_StartMG42" );
	SetAvailableMapGoals( TEAM.AXIS, true, "DEFEND_start.*" );
	SetAvailableMapGoals( TEAM.AXIS, true, "DEFEND_High" );
	SetAvailableMapGoals( TEAM.AXIS, false, "DEFEND_start4" );

	// *** ALLIED GOALS ***
	SetAvailableMapGoals( TEAM.ALLIES, true, "BUILD_Dock" );
	SetAvailableMapGoals( TEAM.ALLIES, true, "ATTACK_Echo.*" );
	SetAvailableMapGoals( TEAM.ALLIES, true, "CAPPOINT_Boat" );
	SetAvailableMapGoals( TEAM.ALLIES, true, "PLANT_main_gate_power" );
	SetAvailableMapGoals( TEAM.ALLIES, true, "FLAG_Book_Of_The_Resurrection" );

	// *** AXIS GOALS PRIORITY ***
	SetGoalPriority( "MOUNTMG42_.*", 0.3 );
	SetGoalPriority( "DEFEND_.*", 0.4 );
	SetGoalPriority( "DEFEND_start3", 1.0 );
	SetGoalPriority( "DEFEND_start6", 1.0 );
	SetGoalPriority( "DEFEND_start4", 1.5 );
	SetGoalPriority( "DEFEND_High", 2.0 );
	SetGoalPriority( "DEFEND_AxisFlag", 2.0 );
	SetGoalPriority( "DEFEND_Catacomb.*", 2.0 );
	SetGoalPriority( "DEFEND_DoorDestroyed", 2.0 );
	SetGoalPriority( "DEFEND_Delta.*", 2.25 );
	SetGoalPriority( "PLANTMINE_.*", 2.5 );
	SetGoalPriority( "PLANT_Allied_Command_Post", 2.6 );
	SetGoalPriority( "PLANT_Dock", 2.7 );
	SetGoalPriority( "PLANT_Basement_Bridge", 2.7 );
	SetGoalPriority( "BUILD_Crypt_Gate", 3.0 );

	// *** ALLIED GOALS PRIORITY ***
	SetGoalPriority( "ATTACK_.*", 0.4 );
	SetGoalPriority( "PLANT_Axis_Command_Post", 0.5 );
	SetGoalPriority( "BUILD_Basement_Bridge", 0.6 );
	SetGoalPriority( "PLANT_Crypt_Gate", 0.7 );
	SetGoalPriority( "PLANT_catacomb_door", 0.7 );
	SetGoalPriority( "BUILD_Dock", 0.8 );
	SetGoalPriority( "PLANT_waterway_door", 0.8 );
	SetGoalPriority( "PLANT_main_gate_power", 0.8 );

	// *** GOALS PROPERTIES ***
	Util.AddInvVehicle( "MOVER_train2" );

	Util.SetMaxUsersInProgress( 1, "BUILD.*" );
	Util.SetMaxUsersInProgress( 1, "PLANT.*" );
	Util.SetMaxUsersInProgress( 1, "DEFEND_.*" );
	Util.SetMaxUsersInProgress( 1, "ATTACK_.*" );
	Util.SetMaxUsersInProgress( 1, "REPAIR.*" );
	Util.SetMaxUsersInProgress( 1, "MOUNTMG42_.*" );
	Util.SetMaxUsersInProgress( 1, "MOBILEMG42_.*" );
	Util.SetMaxUsersInProgress( 1, "CHECKPOINT_.*" );

	SetMapGoalProperties( "ATTACK_.*", {mincamptime=60, maxcamptime=120});
	SetMapGoalProperties( "DEFEND_.*", {mincamptime=60, maxcamptime=120});
	SetMapGoalProperties( "MOBILEMG42_.*", {mincamptime=60, maxcamptime=120});

	//Closed the side path, bots directly take obj...
	Wp.SetWaypointFlag( "WaterwayClosed", "closed", true );

	// *** ROUTES ***
	MapRoutes =
	{
		CAPPOINT_Boat =
		{
			ROUTE_BookTaken =
			{
				ROUTE_CryptGate1 =
				{
					ROUTE_CryptGate2 =
					{
						ROUTE_CryptGate3 =
						{
							ROUTE_Escape = {},
						}
					},
				},
				ROUTE_Ladder1 =
				{
					ROUTE_Ladder2 =
					{
						ROUTE_CryptGate2 =
						{
							ROUTE_CryptGate3 =
							{
								ROUTE_Escape = {},
							}
						},
					},
				},
			},
		},
	};

	Util.Routes(MapRoutes);
	SetAvailableMapGoals( TEAM.ALLIES, true, "ROUTE.*" );
	SetAvailableMapGoals( TEAM.ALLIES, false, "ROUTE_Ladder1" );

	Util.MapDebugPrint( "Omni-bot map script for Resurrection Final by >M@t£o$<." );
};

global OnBotJoin = function( bot )
{
	bot.TargetBreakableDist = 300.0;

	weaps = { WEAPON.THOMPSON, WEAPON.MP40, WEAPON.SHOTGUN, WEAPON.M97, WEAPON.M7, WEAPON.GARAND, WEAPON.K43, WEAPON.BAR, WEAPON.STEN, WEAPON.MP34, WEAPON.BAR, WEAPON.STG44, WEAPON.FG42};

	foreach( id and weap in weaps )
	{
		w = bot.GetWeapon(weap);
		w.PrimaryFire.SetTargetBias(CLASS.BREAKABLE, 1.2);
	}

	w = bot.GetWeapon(WEAPON.KNIFE);
	w.PrimaryFire.SetDesirabilityRange(0, 48, 0.6);
};