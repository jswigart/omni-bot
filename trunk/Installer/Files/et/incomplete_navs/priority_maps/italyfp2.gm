// cs: this map needs routing 
//MickyP: MISSING STRINGS defined.

global Map =
{
	ShowMovers = false,
	Ammo_Cabinet_supply = "AMMOCAB_supply",
	Ammo_Cabinet_t14 = "AMMOCAB_t14",
	Health_Cabinet_health = "HEALTHCAB_health",
	Health_Cabinet_t13 = "HEALTHCAB_t13",
	Checkpoint_flag = "CHECKPOINT_flag",
	Flag_jeep_gold = "FLAG_jeep_gold",
	Build_1st_Ramp = "BUILD_1st_Ramp",
	Build_2nd_Ramp = "BUILD_2nd_Ramp",
	Build_Command_Post = "BUILD_Command_Post",
	Build_Jeep = "BUILD_Jeep",
	Build_Jeep_Barrier = "BUILD_Jeep_Barrier",
	Build_Ladder = "BUILD_Ladder",
	Build_Market_Gate = "BUILD_Market_Gate",
	Build_Tower_Wall = "BUILD_Tower_Wall",
	Plant_1st_Ramp = "PLANT_1st_Ramp",
	Plant_2nd_Ramp = "PLANT_2nd_Ramp",
	Plant_Command_Post = "PLANT_Command_Post",
	Plant_Jeep = "PLANT_Jeep",
	Plant_Jeep_Barrier = "PLANT_Jeep_Barrier",
	Plant_Ladder = "PLANT_Ladder",
	Plant_Market_Gate = "PLANT_Market_Gate",
	Plant_Tower_Wall = "PLANT_Tower_Wall",
	Mount_Gold_MG = "MOUNTMG42_473",
	Mount_Barrier_MG = "MOUNTMG42_miscmg",
	Repair_Gold_MG = "REPAIRMG42_473",
	Repair_Barrier_MG = "REPAIRMG42_miscmg",
	Mover_jeep_mover = "MOVER_jeep_mover",

	Movers =
	{
		"MOVER_jeep_mover",
	},

	RideVehicle =
	{
		Jeep =
		{
			Enabled = true,
			Priority = 0.8,
			Stance = BTN.CROUCH,
			LimitTeam = (1<<TEAM.ALLIES),
			LimitClass = Util.AllClasses,
			RideVehicleGoalName = "MOVER_jeep_mover",
			SeatRadius = 50,
			Seat =
			{
				{
					BoardPosition = Vector3(0,100,20),
					FacePosition = Vector3(0,100,90),
					RidePosition = Vector3(0,35,72),
				},
			},
		},
	},

	EscortVehicle =
	{
		Jeep =
		{
			Enabled = false,
			EscortVehicleGoalName = "MOVER_jeep_mover",
			LimitTeam = (1<<TEAM.ALLIES),
			LimitBots = 2,
			Priority = 0.65,
			Offset =
			{
				Vector3(-20,-160,20),
				Vector3(20,-160,20),
			}
		},
	},

	JeepAtMarketGate =
 	{
 		TriggerOnEntity = GetGoal("MOVER_jeep_mover").GetEntity(),
 		OnEnter = function(ent)
 		{
 			Util.MapDebugPrint(GetEntName(ent),"entered JeepAtMarketGate trigger");
			Map.RideVehicle.Jeep.Enabled = false;
			Util.MapDebugPrint( "JeepAtMarketGate" );
 		},
 		OnExit = function(ent)
 		{
			Util.MapDebugPrint(GetEntName(ent),"exited JeepAtMarketGate trigger");
 		},
	},

	MarketGatePassed =
 	{
 		Name="MarketGatePassed",
 		TriggerOnEntity = GetGoal("MOVER_jeep_mover").GetEntity(),
 		OnEnter = function(ent)
 		{
 			Util.MapDebugPrint(GetEntName(ent),"MarketGatePassed");
			Map.RideVehicle.Jeep.Enabled = true;
			SetAvailableMapGoals( TEAM.AXIS, false, "BUILD_Market_Gate" );
 		},
 		OnExit = function(ent)
 		{
			Util.MapDebugPrint(GetEntName(ent),"exited aabb trigger");

 		},
	},

	BarrierPassed =
 	{
 		Name="BarrierPassed",
 		TriggerOnEntity = GetGoal("MOVER_jeep_mover").GetEntity(),
 		OnEnter = function(ent)
 		{
 			Util.MapDebugPrint(GetEntName(ent),"BarrierPassed");
			Map.RideVehicle.Jeep.Enabled = true;
			SetAvailableMapGoals( TEAM.AXIS, false, "BUILD_Jeep_Barrier" );
 		},
 		OnExit = function(ent)
 		{
			Util.MapDebugPrint(GetEntName(ent),"exited aabb trigger");
 		},
	},

	Ramp1Passed =
 	{
 		Name="Ramp1Passed",
 		TriggerOnEntity = GetGoal("MOVER_jeep_mover").GetEntity(),
 		OnEnter = function(ent)
 		{
 			Util.MapDebugPrint(GetEntName(ent),"Ramp1Passed");
			SetAvailableMapGoals( TEAM.AXIS, false, "PLANT_1st_Ramp" );
			SetAvailableMapGoals( TEAM.ALLIES, false, "BUILD_1st_Ramp" );
 		},
 		OnExit = function(ent)
 		{
			Util.MapDebugPrint(GetEntName(ent),"exited aabb trigger");
			SetAvailableMapGoals( TEAM.ALLIES, true, Map.Mount_Gold_MG );
			SetAvailableMapGoals( TEAM.AXIS, true, Map.Mount_Gold_MG );
			SetAvailableMapGoals( TEAM.AXIS, false, "ATTACK_.*" );
			SetAvailableMapGoals( TEAM.AXIS, true, "ATTACK_gold.*" );
		},
	},

	Ramp2Passed =
 	{
 		Name="Ramp2Passed",
 		TriggerOnEntity = GetGoal("MOVER_jeep_mover").GetEntity(),
 		OnEnter = function(ent)
 		{
 			Util.MapDebugPrint(GetEntName(ent),"Ramp2Passed");
			SetAvailableMapGoals( TEAM.ALLIES, false, "BUILD_2nd_Ramp" );
			SetAvailableMapGoals( TEAM.ALLIES, false, Map.Mount_Barrier_MG );
			SetAvailableMapGoals( TEAM.AXIS, false, "PLANT_2nd_Ramp" );
			SetAvailableMapGoals( TEAM.AXIS, false, Map.Mount_Barrier_MG );
 		},
 		OnExit = function(ent)
 		{
			Util.MapDebugPrint(GetEntName(ent),"exited aabb trigger");
 		},
	},

	Escape2 =
 	{
 		TriggerOnEntity = GetGoal("MOVER_jeep_mover").GetEntity(),
 		OnEnter = function(ent)
 		{
 			Util.MapDebugPrint(GetEntName(ent),"Escape2");
			SetAvailableMapGoals( TEAM.AXIS, false, "ATTACK_.*" );
			SetAvailableMapGoals( TEAM.AXIS, true, "ATTACK_escape2.*" );
			SetAvailableMapGoals( TEAM.ALLIES, false, "ATTACK_.*" );
			SetAvailableMapGoals( TEAM.ALLIES, true, "ATTACK_escape2.*" );
 		},
 		OnExit = function(ent)
 		{
			Util.MapDebugPrint(GetEntName(ent),"exited aabb trigger");
 		},
	},

	Escape3 =
 	{
 		TriggerOnEntity = GetGoal("MOVER_jeep_mover").GetEntity(),
 		OnEnter = function(ent)
 		{
 			Util.MapDebugPrint(GetEntName(ent),"Escape3");
			SetAvailableMapGoals( TEAM.AXIS, false, "ATTACK_.*" );
			SetAvailableMapGoals( TEAM.AXIS, true, "ATTACK_escape3.*" );
			SetAvailableMapGoals( TEAM.ALLIES, false, "ATTACK_.*" );
			SetAvailableMapGoals( TEAM.ALLIES, true, "ATTACK_escape3.*" );
 		},
 		OnExit = function(ent)
 		{
			Util.MapDebugPrint(GetEntName(ent),"exited aabb trigger");
 		},
	},

	Escape4 =
 	{
 		TriggerOnEntity = GetGoal("MOVER_jeep_mover").GetEntity(),
 		OnEnter = function(ent)
 		{
 			Util.MapDebugPrint(GetEntName(ent),"Escape4");
			SetAvailableMapGoals( TEAM.AXIS, false, Map.Mount_Barrier_MG );
			SetAvailableMapGoals( TEAM.AXIS, false, "ATTACK_.*" );
			SetAvailableMapGoals( TEAM.AXIS, true, "ATTACK_escape4.*" );
			SetAvailableMapGoals( TEAM.ALLIES, false, Map.Mount_Barrier_MG );
			SetAvailableMapGoals( TEAM.ALLIES, false, "ATTACK_.*" );
			SetAvailableMapGoals( TEAM.ALLIES, true, "ATTACK_escape4.*" );
 		},
 		OnExit = function(ent)
 		{
			Util.MapDebugPrint(GetEntName(ent),"exited aabb trigger");
 		},
	},

	BUILD_1st_Ramp_Built = function( trigger )
	{
		if ( TestMap )
			{ return; }

		Util.MapDebugPrint( "BUILD_1st_Ramp_Built" );
	},

	BUILD_2nd_Ramp_Built = function( trigger )
	{
		if ( TestMap )
			{ return; }

		Util.MapDebugPrint( "BUILD_2nd_Ramp_Built" );
	},


	BUILD_Jeep_Built = function( trigger )
	{
		if ( TestMap )
			{ return; }

		Util.MapDebugPrint( "BUILD_Jeep_Built" );
	},

	BUILD_Jeep_Barrier_Built = function( trigger )
	{
		if ( TestMap )
			{ return; }

		// Set pos. of plant goal to one of three predefined map positions
		// so bots won't get killed by the barbed wire
		rnd = RandInt(1,3);
		if ( rnd == 1 )
		{
			Util.SetGoalPosition( -235, 1938, -200, Map.Plant_Jeep_Barrier );
		}
		else if ( rnd == 2 )
		{
			Util.SetGoalPosition( -38, 1962, -200, Map.Plant_Jeep_Barrier );
		}
		else
		{
			Util.SetGoalPosition( -45, 2080, -200, Map.Plant_Jeep_Barrier );
		}
		Util.MapDebugPrint( "BUILD_Jeep_Barrier_Built" );
	},

	BUILD_Ladder_Built = function( trigger )
	{
		if ( TestMap )
			{ return; }

		Util.MapDebugPrint( "BUILD_Ladder_Built" );
	},

	BUILD_Market_Gate_Built = function( trigger )
	{
		if ( TestMap )
			{ return; }

		Util.MapDebugPrint( "BUILD_Market_Gate_Built" );
	},

	BUILD_Tower_Wall_Built = function( trigger )
	{
		if ( TestMap )
			{ return; }

		Util.MapDebugPrint( "BUILD_Tower_Wall_Built" );
	},

	PLANT_1st_Ramp_Destroyed = function( trigger )
	{
		if ( TestMap )
			{ return; }

		Util.MapDebugPrint( "PLANT_1st_Ramp_Destroyed" );
	},

	PLANT_2nd_Ramp_Destroyed = function( trigger )
	{
		if ( TestMap )
			{ return; }

		Util.MapDebugPrint( "PLANT_2nd_Ramp_Destroyed" );
	},

	PLANT_Jeep_Destroyed = function( trigger )
	{
		if ( TestMap )
			{ return; }

		Util.MapDebugPrint( "PLANT_Jeep_Destroyed" );
	},

	PLANT_Jeep_Barrier_Destroyed = function( trigger )
	{
		if ( TestMap )
			{ return; }

		Util.MapDebugPrint( "PLANT_Jeep_Barrier_Destroyed" );
	},

	PLANT_Ladder_Destroyed = function( trigger )
	{
		if ( TestMap )
			{ return; }

		Util.MapDebugPrint( "PLANT_Ladder_Destroyed" );
	},

	PLANT_Market_Gate_Destroyed = function( trigger )
	{
		if ( TestMap )
			{ return; }

		Map.RideVehicle.Jeep.Enabled = true;
		Util.MapDebugPrint( "PLANT_Market_Gate_Destroyed" );
	},

	PLANT_Tower_Wall_Destroyed = function( trigger )
	{
		if ( TestMap )
			{ return; }
		// wall isn't repairable
		SetAvailableMapGoals( TEAM.AXIS, false, "BUILD_Tower_Wall" );
		Util.MapDebugPrint( "PLANT_Tower_Wall_Destroyed" );
	},

	FLAG_jeep_gold_Taken = function( trigger )
	{
		if ( TestMap )
			{ return; }

		Util.MapDebugPrint( "FLAG_jeep_gold_Taken" );
	},

	flag_Axis_Captured = function( trigger )
	{
		if ( TestMap )
			{ return; }

		Util.MapDebugPrint( "flag_Axis_Captured" );
	},

	flag_Allies_Captured = function( trigger )
	{
		if ( TestMap )
			{ return; }

		Util.MapDebugPrint( "flag_Allies_Captured" );
	},

	BUILD_Command_Post_Built = function( trigger )
	{
		if ( TestMap )
			{ return; }

		SetAvailableMapGoals( TEAM.ALLIES, true, "AMMOCAB_supply" );
		SetAvailableMapGoals( TEAM.ALLIES, true, "HEALTHCAB_health" );
		SetAvailableMapGoals( TEAM.AXIS, true, "AMMOCAB_supply" );
		SetAvailableMapGoals( TEAM.AXIS, true, "HEALTHCAB_health" );

		Util.MapDebugPrint( "BUILD_Command_Post_Built" );
	},

	PLANT_Command_Post_Destroyed = function( trigger )
	{
		if ( TestMap )
			{ return; }

		SetAvailableMapGoals( TEAM.ALLIES, false, "AMMOCAB_supply" );
		SetAvailableMapGoals( TEAM.ALLIES, false, "HEALTHCAB_health" );
		SetAvailableMapGoals( TEAM.AXIS, false, "AMMOCAB_supply" );
		SetAvailableMapGoals( TEAM.AXIS, false, "HEALTHCAB_health" );

		Util.MapDebugPrint( "PLANT_Command_Post_Destroyed" );
	},

	GoldAccessible = function( trigger )
	{
		if ( TestMap )
			{ return; }

		SetGoalPriority( "CHECKPOINT_flag", 0.5 );
		SetAvailableMapGoals( TEAM.ALLIES, false, "BUILD_Ramp" );
		SetAvailableMapGoals( TEAM.ALLIES, false, "BUILD_Ramp_1" );
		SetAvailableMapGoals( TEAM.ALLIES, false, "PLANT_Jeep_Barrier" );
		SetAvailableMapGoals( TEAM.AXIS, false, "BUILD_Jeep_Barrier" );
		SetAvailableMapGoals( TEAM.AXIS, false, "PLANT_Ramp" );
		SetAvailableMapGoals( TEAM.AXIS, false, "PLANT_Ramp_1" );
		SetAvailableMapGoals( TEAM.AXIS, true, "ATTACK_gold.*" );
		Map.RideVehicle.Jeep.Enabled = false;
		Util.MapDebugPrint( "GoldAccessible" );
	},

	GoldSecured = function( trigger )
	{
		if ( TestMap )
			{ return; }

		//Map.EscortVehicle.Jeep.Enabled = true;
		Map.RideVehicle.Jeep.Enabled = true;
		SetAvailableMapGoals( TEAM.ALLIES, true, Map.Mount_Barrier_MG );
		SetAvailableMapGoals( TEAM.ALLIES, false, Map.Mount_Gold_MG );
		SetAvailableMapGoals( TEAM.ALLIES, true, "ATTACK_escape1_.*" );
		SetAvailableMapGoals( TEAM.AXIS, true, Map.Mount_Barrier_MG );
		SetAvailableMapGoals( TEAM.AXIS, false, Map.Mount_Gold_MG );
		SetAvailableMapGoals( TEAM.AXIS, false, "ATTACK_gold.*" );
		SetAvailableMapGoals( TEAM.AXIS, true, "ATTACK_escape1_.*" );
		escape2 = OnTriggerRegion(AABB(295,920,-210, 435,1075,-136), Map.Escape2); //corner
		escape3 = OnTriggerRegion(AABB(-1175,1240,-210, -988,1390,-136), Map.Escape3); //bridge
		escape4 = OnTriggerRegion(AABB(-1330,-25,-210, -1186,-36,-136), Map.Escape4); //last corner
		Util.MapDebugPrint( "GoldSecured" );
	},
};

global OnMapLoad = function()
{
	if ( TestMapOn )
		{ Util.AutoTestMap(); }

	OnTrigger( "Lower Ramp constructed!", Map.BUILD_1st_Ramp_Built );
	OnTrigger( "Upper Ramp constructed!", Map.BUILD_2nd_Ramp_Built );
	OnTrigger( "Jeep repaired!", Map.BUILD_Jeep_Built );
	OnTrigger( "Jeep Barrier built!", Map.BUILD_Jeep_Barrier_Built );
	OnTrigger( "Ladder to balcony has been built near the Tower!", Map.BUILD_Ladder_Built );
	OnTrigger( "Market Gate built!", Map.BUILD_Market_Gate_Built );
	OnTrigger( "Market Gate destroyed!", Map.BUILD_Tower_Wall_Built );
	OnTrigger( "Lower Ramp destroyed!", Map.PLANT_1st_Ramp_Destroyed );
	OnTrigger( "Lower Ramp destroyed!", Map.PLANT_2nd_Ramp_Destroyed );
	OnTrigger( "Jeep damaged", Map.PLANT_Jeep_Destroyed );
	OnTrigger( "Upper Ramp destroyed!", Map.PLANT_Jeep_Barrier_Destroyed );
	OnTrigger( "Ladder to balcony has been destroyed!", Map.PLANT_Ladder_Destroyed );
	OnTrigger( "Axis Command Post destroyed!", Map.PLANT_Command_Post_Destroyed );
	OnTrigger( "Allied Command Post destroyed!", Map.PLANT_Command_Post_Destroyed );
	OnTrigger( "Allied Command Post constructed. Charge speed increased!", Map.BUILD_Command_Post_Built );
	OnTrigger( "Axis Command Post constructed. Charge speed increased!", Map.BUILD_Command_Post_Built );
	OnTrigger( "Market Gate destroyed!", Map.PLANT_Market_Gate_Destroyed );
	OnTrigger( "Allies have made a hole in the Tower Wall", Map.PLANT_Tower_Wall_Destroyed );
	OnTrigger( "Allies have stolen the first goldcrate!", Map.FLAG_jeep_gold_Taken );
	OnTrigger( "Axis have captured the Market Place!", Map.flag_Axis_Captured );
	OnTrigger( "Allies have captured the Market Place!", Map.flag_Allies_Captured );
	OnTrigger( "goldrush_allies_gold_get", Map.GoldAccessible );
	OnTrigger( "Allies have stolen the second goldcrate!", Map.GoldSecured );

	SetAvailableMapGoals( TEAM.ALLIES, false, "AMMOCAB_supply" ); // only enabled when command post is built
	SetAvailableMapGoals( TEAM.ALLIES, false, "HEALTHCAB_health" );
	SetAvailableMapGoals( TEAM.ALLIES, false, Map.Mount_Gold_MG );
	SetAvailableMapGoals( TEAM.ALLIES, false, "ATTACK_.*" );

	SetAvailableMapGoals( TEAM.AXIS, false, Map.Mount_Gold_MG );
	SetAvailableMapGoals( TEAM.AXIS, false, "AMMOCAB_supply" );
	SetAvailableMapGoals( TEAM.AXIS, false, "HEALTHCAB_health" );
	SetAvailableMapGoals( TEAM.AXIS, false, "ATTACK_.*" );
	// Don't plant as position is not updated from mapscript
	SetAvailableMapGoals( TEAM.AXIS, false, "PLANT_Jeep" );

	SetGoalPriority( "CHECKPOINT_flag", 0.7 );
	SetGoalPriority( "PLANT_Market_Gate", 0.92 );
	SetGoalPriority( "PLANT_Jeep_Barrier", 0.91 );
	// Covert ops can't destroy the ramp:
	SetGoalPriority( "PLANT_1st_Ramp", 0.0, TEAM.AXIS, CLASS.COVERTOPS );
	SetGoalPriority( "PLANT_2nd_Ramp", 0.0, TEAM.AXIS, CLASS.COVERTOPS );

	Util.SetGoalOffset( 0,10,-10, "PLANT_Tower_Wall" );

	jeep0 = OnTriggerRegion(AABB(-150,-650,-180, 30,-500,-120), Map.JeepAtMarketGate);
	jeep1 = OnTriggerRegion(AABB(123.944,-672.875,-199.875,194.344,-504.221,-125.875), Map.MarketGatePassed);
	jeep2 = OnTriggerRegion(AABB(-273.875,2080.943,-210.875,21.875,2193.165,-125.875), Map.BarrierPassed);
	jeep3 = OnTriggerRegion(AABB(-231.874,3144.365,-84.875,-19.279,3216.411,0.125), Map.Ramp1Passed);
	jeep4 = OnTriggerRegion(AABB(255.253,3112.707,-0.875,338.375,3360.874,73.125), Map.Ramp2Passed);
	Util.MapDebugPrint( "Omni-bot map script for Streets of Italy loaded" );
};

global OnBotJoin = function( bot )
{
	bot.TargetBreakableDist = 200.0;
	bot.MaxViewDistance = 2500;
};
