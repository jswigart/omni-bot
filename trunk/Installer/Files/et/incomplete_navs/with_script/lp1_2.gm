// crapshoot: all this handcar function hacks should be replaced with escort or ride goal

/*******************************************************************************
  Filename: lp1_2.gm  (Pitch Black Winter)

  Created by: Advieszeur

  Last Updated: FRY, 16 Februari 2008 
  Updated by: 

  Change log: Tweaking and stuckage fixing.

--------------------------------------------------------------------------------
To do: Not build gate when HC is past gate


--------------------------------------------------------------------------------
*** MAP GOALS ***

   // Steal - return
	FLAG_Bomb_Parts

   //MG-Objects
	MOUNTMG42_mg42_bank
	REPAIRMG42_mg42_bank

    /// ALLIES GOALS  ///
	BUILD_Bomb_Assembly_Area		//Bomb crates open
	BUILD_Bomb_Assembly_Area_1		//Bomb Construct
	BUILD_Fuse_Box	//Sidedoor wires
	PLANT_Weapons_Hold	//Weapon hold door
	PLANT_Depot_Main_Gates		//Train barrier gate

   ///  AXIS GOALS   ///

	BUILD_Depot_Main_Gates			//Train barrier gate

	//PLANT_abomb_const
	//PLANT_open_crates
	//PLANT_wires_construct


***************************************************************************************/

// =======================================================
// =========  GLOBAL  MAP  ===============================
// =======================================================


global Map =
{
	prev_pos = 0,
	BombBuild = false,
	GateBuild = false,

 	Switches =
    {
        OpenBox =
        {
			Enabled = true,
			Priority = 0.85,
            WaypointName = "wirebox",
            LimitTeam = (1<<TEAM.ALLIES), 		//Allies only
			LimitClass = (1<<CLASS.ENGINEER),
	     	LimitBots = 1, 
        },
    }, 
	
	fuse_panel_start = function( trigger )
	{
		Map.Switches.OpenBox.Enabled = false; 
		SetAvailableMapGoals(TEAM.ALLIES, true, "BUILD_Fuse_Box");
	},

    // TRAIN (HandCar) STUFF

  	Movers =
  	{
    		//retain the handcar as a mover  (Mover not a goal in the map)
    		//"MAP_MOVER_tank",
  	},

  	handcar_set = function( track_pos )
  	{
		if ( TestMap ) { return; }

		attack_nr = track_pos - 1;

		hc_attack = "ATTACK_a_tr"+ attack_nr;	//vorige pos
		hc_attack2 = "ATTACK_a_tr"+ track_pos;	//Huidige pos

		SetAvailableMapGoals(TEAM.ALLIES, false, "ATTACK_a_tr.*"); 			//Attack handcar disabled
		SetAvailableMapGoals(TEAM.AXIS, false, "ATTACK_a_tr.*"); 			//Attack handcar disabled

		SetAvailableMapGoals(TEAM.ALLIES, true, hc_attack); 				//Special Attack handcar enabled
		SetAvailableMapGoals(TEAM.ALLIES, true, hc_attack2); 				//Special Attack handcar enabled
		if ( track_pos > 8 )  
		{
			SetAvailableMapGoals(TEAM.AXIS, true, hc_attack); 	//Special Attack handcar enabled
			SetAvailableMapGoals(TEAM.AXIS, true, hc_attack2); 	//Special Attack handcar enabled
		}

		if ( track_pos > 1 ) 	//Backwards to bay
		{
			SetAvailableMapGoals(TEAM.ALLIES, false, "ATTACK_a_tr_start"); 		//Special Attack handcar enabled
		}

		//Backwards moving Handcar
		if ( track_pos == 20 && Map.prev_pos > 20) 	//Backwards to bay
		{
			//Fight at bay
			SetAvailableMapGoals(TEAM.ALLIES, true, "ATTACK_a_hc_bay.*"); 			//attack bay track
			SetAvailableMapGoals(TEAM.AXIS, true, "DEFEND_d_hc_bay.*"); 			//defend bay track
			SetAvailableMapGoals(TEAM.ALLIES, false, "ATTACK_a_hc_gate.*"); 		//Attack gate track		
			SetAvailableMapGoals(TEAM.AXIS, false, "DEFEND_d_hc_gate.*"); 			//defend gate track
			SetAvailableMapGoals(TEAM.AXIS, false, "SNIPE_s_trainyard.*"); 	//Sniperspots axis trainyard
			print( "Backwards return to bay");
		}

		if ( track_pos == 37 && Map.prev_pos > 37) 	//Backwards to gate
		{
			//Fight at gate
			SetAvailableMapGoals(TEAM.ALLIES,true , "ATTACK_a_hc_gate.*"); 		//attack track track
			SetAvailableMapGoals(TEAM.AXIS, true, "DEFEND_d_hc_gate.*"); 		//defend track track
			SetAvailableMapGoals(TEAM.ALLIES, false, "ATTACK_a_hc_trainyard.*"); 	//Attack yard track		
			SetAvailableMapGoals(TEAM.AXIS, false, "DEFEND_d_hc_trainyard.*"); 		//defend yard track
			print( "Backwards return to gate");
		}

		//Forwards moving Handcar
		if ( track_pos == 24 && Map.prev_pos < 24) 	//Forwards to gate
		{
			//Fight at gate
			SetAvailableMapGoals(TEAM.ALLIES, false, "ATTACK_a_hc_bay.*"); 			//attack bay track
			SetAvailableMapGoals(TEAM.AXIS, false, "DEFEND_d_hc_bay.*"); 			//defend bay track
			SetAvailableMapGoals(TEAM.ALLIES, true, "ATTACK_a_hc_gate.*"); 			//Attack gate track		
			SetAvailableMapGoals(TEAM.AXIS, true, "DEFEND_d_hc_gate.*"); 			//defend gate track
			SetAvailableMapGoals(TEAM.AXIS, true, "SNIPE_s_trainyard.*"); 	//Sniperspots axis trainyard
			print( "Forward to gate");
		}

		if ( track_pos == 39 && Map.prev_pos <39 ) 	//Forwards to trainyard
		{
			//Fight at Trainyard
			//SetAvailableMapGoals(TEAM.ALLIES,true , "ATTACK_a_hc_gate.*"); 		//attack track track
			//SetAvailableMapGoals(TEAM.AXIS, true, "DEFEND_d_hc_gate.*"); 		//defend track track
			SetAvailableMapGoals(TEAM.ALLIES, false, "ATTACK_a_hc_trainyard.*"); 	//Attack yard track		
			SetAvailableMapGoals(TEAM.AXIS, false, "DEFEND_d_hc_trainyard.*"); 	//defend yard track
			print( "Forward to Trainyard");
		}

		Map.prev_pos = track_pos ;

		print( "Attack Hand car at: ", hc_attack);
	},

	//Special Handcar Attack related to HC position  (for jumping on vehicle)
  	handcar_pos1  = function( trigger)  { if ( TestMap ) { return; } Map.handcar_set(1); },
  	handcar_pos2  = function( trigger)  { if ( TestMap ) { return; } Map.handcar_set(2); },
  	handcar_pos3  = function( trigger)  { if ( TestMap ) { return; } Map.handcar_set(3); },
  	handcar_pos4  = function( trigger)  { if ( TestMap ) { return; } Map.handcar_set(4); },
  	handcar_pos5  = function( trigger)  { if ( TestMap ) { return; } Map.handcar_set(5); },
  	handcar_pos6  = function( trigger)  { if ( TestMap ) { return; } Map.handcar_set(6); },
  	handcar_pos7  = function( trigger)  { if ( TestMap ) { return; } Map.handcar_set(7); },
  	handcar_pos8  = function( trigger)  { if ( TestMap ) { return; } Map.handcar_set(8); },
  	handcar_pos9  = function( trigger)  { if ( TestMap ) { return; } Map.handcar_set(9); },
  	handcar_pos10 = function( trigger)  { if ( TestMap ) { return; } Map.handcar_set(10);},
  	handcar_pos11 = function( trigger)  { if ( TestMap ) { return; } Map.handcar_set(11);},
  	handcar_pos12 = function( trigger)  { if ( TestMap ) { return; } Map.handcar_set(12);},
  	handcar_pos13 = function( trigger)  { if ( TestMap ) { return; } Map.handcar_set(13);},
  	handcar_pos14 = function( trigger)  { if ( TestMap ) { return; } Map.handcar_set(14);},
  	handcar_pos15 = function( trigger)  { if ( TestMap ) { return; } Map.handcar_set(15);},
  	handcar_pos16 = function( trigger)  { if ( TestMap ) { return; } Map.handcar_set(16);},
  	handcar_pos17 = function( trigger)  { if ( TestMap ) { return; } Map.handcar_set(17);},
  	handcar_pos18 = function( trigger)  { if ( TestMap ) { return; } Map.handcar_set(18);},
  	handcar_pos19 = function( trigger)  { if ( TestMap ) { return; } Map.handcar_set(19);},
  	handcar_pos20 = function( trigger)  { if ( TestMap ) { return; } Map.handcar_set(20);},
  	handcar_pos21 = function( trigger)  { if ( TestMap ) { return; } Map.handcar_set(21);},
  	handcar_pos22 = function( trigger)  { if ( TestMap ) { return; } Map.handcar_set(22);},
  	handcar_pos23 = function( trigger)  { if ( TestMap ) { return; } Map.handcar_set(23);},
  	handcar_pos24 = function( trigger)  { if ( TestMap ) { return; } Map.handcar_set(24);},
  	handcar_pos25 = function( trigger)  { if ( TestMap ) { return; } Map.handcar_set(25);},
  	handcar_pos26 = function( trigger)  { if ( TestMap ) { return; } Map.handcar_set(26);},
  	handcar_pos27 = function( trigger)  { if ( TestMap ) { return; } Map.handcar_set(27);},
  	handcar_pos28 = function( trigger)  { if ( TestMap ) { return; } Map.handcar_set(28);},
  	handcar_pos29 = function( trigger)  { if ( TestMap ) { return; } Map.handcar_set(29);},
  	handcar_pos30 = function( trigger)  { if ( TestMap ) { return; } Map.handcar_set(30);},
  	handcar_pos31 = function( trigger)  { if ( TestMap ) { return; } Map.handcar_set(31);},
  	handcar_pos32 = function( trigger)  { if ( TestMap ) { return; } Map.handcar_set(32);},
  	handcar_pos33 = function( trigger)  { if ( TestMap ) { return; } Map.handcar_set(33);},
  	handcar_pos34 = function( trigger)  { if ( TestMap ) { return; } Map.handcar_set(34);},
  	handcar_pos35 = function( trigger)  { if ( TestMap ) { return; } Map.handcar_set(35);},
  	handcar_pos36 = function( trigger)  { if ( TestMap ) { return; } Map.handcar_set(36);},
  	handcar_pos37 = function( trigger)  { if ( TestMap ) { return; } Map.handcar_set(37);},
  	handcar_pos38 = function( trigger)  { if ( TestMap ) { return; } Map.handcar_set(38);},
  	handcar_pos39 = function( trigger)  { if ( TestMap ) { return; } Map.handcar_set(39);},
  	handcar_pos40 = function( trigger)  { if ( TestMap ) { return; } Map.handcar_set(40);},
  	handcar_pos41 = function( trigger)  { if ( TestMap ) { return; } Map.handcar_set(41);},
  	handcar_pos42 = function( trigger)  { if ( TestMap ) { return; } Map.handcar_set(42);},
  	handcar_pos43 = function( trigger)  { if ( TestMap ) { return; } Map.handcar_set(43);},
  	handcar_pos44 = function( trigger)  { if ( TestMap ) { return; } Map.handcar_set(44);},


    //Doors
	wires_construct_Built = function( trigger )
	{
		if ( TestMap ) { return; }

		print( "wires_construct_Built" );
	},


	wh_door_script_Destroyed = function( trigger )
	{
		if ( TestMap ) { return; }

  		SetAvailableMapGoals(TEAM.ALLIES, true, "CAPPOINT_bomb_parts");  			//bring bomb parts here
		SetAvailableMapGoals(TEAM.ALLIES, true, "FLAG_Bomb_Parts"); 			//Bomb Parts
		SetAvailableMapGoals(TEAM.AXIS, true, "FLAG_Bomb_Parts"); 			//Bomb Parts
		SetAvailableMapGoals(TEAM.AXIS, true, "DEFEND_d_bay1"); 				//Defend bomb delivery

		print( "wh_door_script_Destroyed" );
	},


    //Bomb parts stealing
 	Allies_bomb_parts_stolen = function( trigger )
 	{
		if ( TestMap ) { return; }

		//Weapon Hold
		Wp.SetWaypointFlag("c_mg_wh","closed",true);

		SetAvailableMapGoals(TEAM.ALLIES, false, "ATTACK_a_wh.*"); 				//Attack Weapon hold
		SetAvailableMapGoals(TEAM.AXIS, false, "DEFEND_d_wh.*"); 				//Defend Weapon hold

		//Assembly area
		SetAvailableMapGoals(TEAM.ALLIES, true, "ATTACK_a_assembly.*"); 			//Attack Weapon hold
		SetAvailableMapGoals(TEAM.AXIS, true, "DEFEND_d_assembly.*"); 				//Defend Weapon hold
		SetAvailableMapGoals(TEAM.AXIS, true, "SNIPE_s_bay.*"); 			//Sniperspots bay


		//Boathouse objects
		Wp.SetWaypointFlag("c_mg_boathouse","closed",false);
		Wp.SetWaypointFlag("c_health_boathouse","closed",false);
		Wp.SetWaypointFlag("c_ammo_boathouse","closed",false);

 		print( "Allies_bomb_parts_stolen" );
 	},

	Allies_bomb_parts_returned = function( trigger )
 	{
		if ( TestMap ) { return; }

		//WeaponHold
		Wp.SetWaypointFlag("c_mg_wh","closed",false);

		SetAvailableMapGoals(TEAM.ALLIES, true, "ATTACK_a_wh.*"); 				//Attack Weapon hold
		SetAvailableMapGoals(TEAM.AXIS, true, "DEFEND_d_wh.*"); 				//Defend Weapon hold

		//Assembly area
		SetAvailableMapGoals(TEAM.ALLIES, false, "ATTACK_a_assembly.*"); 			//Attack Weapon hold
		SetAvailableMapGoals(TEAM.AXIS, false, "DEFEND_d_assembly.*"); 				//Defend Weapon hold

		//Wp.SetWaypointFlag("c_health_boathouse","closed",false);
		//Wp.SetWaypointFlag("c_ammo_boathouse","closed",false);
		//Wp.SetWaypointFlag("c_health_cola","closed",false);

 		print( "Allies_bomb_parts_return" );
 	},


    //Secured and building bomb

	open_crates_Built = function( trigger )
	{
		if ( TestMap ) { return; }

		print( "open_crates_Built" );
	},


	abomb_const_Built = function( trigger )
	{
		if ( TestMap ) { return; }

		//Switching Defend / Attack Goals

		Map.BombBuild = true;

		//Assembly area
		SetAvailableMapGoals(TEAM.ALLIES, false, "ATTACK_a_assembly.*"); 			//Attack Weapon hold
		SetAvailableMapGoals(TEAM.AXIS, false, "DEFEND_d_assembly.*"); 				//Defend Weapon hold
		SetAvailableMapGoals(TEAM.AXIS, false, "DEFEND_d_bay1"); 
		SetAvailableMapGoals(TEAM.ALLIES, true, "ATTACK_a_tr1"); 				//First handcar attack
		SetAvailableMapGoals(TEAM.ALLIES, true, "ATTACK_a_tr_start"); 				//Special Attack handcar start
		SetAvailableMapGoals(TEAM.AXIS, false, "SNIPE_s_bay.*"); 			//Sniperspots bay

		//Gate
		SetAvailableMapGoals(TEAM.AXIS, true, "BUILD_Depot_Main_Gates"); 			//Gate barrier
		SetAvailableMapGoals(TEAM.ALLIES, true, "PLANT_Depot_Main_Gates"); 			//Gate barrier

		//crapshoot: what is this?
		//if ( Map.GateBuild ) 
		//	{ SetAvailableMapGoals(TEAM.ALLIES, true, "PLANT_t1155"); }	//Extra Dyno other side of gate

		//Mg - Ammo and health
		Wp.SetWaypointFlag("c_mg_rail","closed",false);
		Wp.SetWaypointFlag("c_health_cola","closed",false);
		Wp.SetWaypointFlag("c_mg_boathouse","closed",true);
	    Wp.SetWaypointFlag("c_mg_wh","closed",true);
	    Wp.SetWaypointFlag("c_health_boathouse","closed",true);
	    Wp.SetWaypointFlag("c_ammo_boathouse","closed",true);


		//Track Attack, Defend
		SetAvailableMapGoals(TEAM.ALLIES, true, "ATTACK_a_hc_bay.*"); 			//attack bay track
		SetAvailableMapGoals(TEAM.AXIS, true, "DEFEND_d_hc_bay.*"); 			//defend bay track
		SetAvailableMapGoals(TEAM.ALLIES, true, "SNIPE_s_hc_bay.*"); 		//Sniperspots allies bay
		SetAvailableMapGoals(TEAM.AXIS, true, "SNIPE_s_gate.*"); 		//Sniperspots axis gate

		print( "abomb_const_Built" );
	},


	Allies_bomb_parts_secured = function( trigger )
 	{
		if ( TestMap ) { return; }

  		SetAvailableMapGoals(TEAM.ALLIES, true, "BUILD_Bomb_Assembly_Area");  		//Open bomb crates
  		SetAvailableMapGoals(TEAM.ALLIES, true, "BUILD_Bomb_Assembly_Area_1");  		//Assemble bomb

		//Block waypoints
		//Mg - Ammo and health
		Wp.SetWaypointFlag("c_mg_rail","closed",false);
		Wp.SetWaypointFlag("c_health_cola","closed",false);
		Wp.SetWaypointFlag("c_mg_boathouse","closed",true);
	    Wp.SetWaypointFlag("c_mg_wh","closed",true);
	    Wp.SetWaypointFlag("c_health_boathouse","closed",true);
	    Wp.SetWaypointFlag("c_ammo_boathouse","closed",true);
 
 		print( "Allies_bomb_parts_secured" );
 	},

    //Gate (trainbarrier)
	gates_Built = function( trigger )
	{
		if ( TestMap ) { return; }

		Map.GateBuild = true;

		//crapshoot: what is this?
		//if ( Map.BombBuild ) 
		//	{ SetAvailableMapGoals(TEAM.ALLIES, true, "PLANT_t1155"); }	//Extra Dyno other side of gate


		print( "gates_Built" );
	},

	gates_Destroyed = function( trigger )
	{
		if ( TestMap ) { return; }

		Map.GateBuild = false;

		//crapshoot: what is this?
		//SetAvailableMapGoals(TEAM.ALLIES, false, "PLANT_t1155"); 	//Extra Dyno other side of gate

		print( "gates_Destroyed" );
	},
};


// =======================================================
// =========  ON MAP LOAD ================================
// =======================================================

global OnMapLoad = function()
{

	if ( TestMapOn )  { ETUtil.AutoTestMap(); }

	//SET GOALS AVAILABLE
  	ETUtil.DisableGoal(".*");   				//disable all
  
    ETUtil.EnableGoal("MOUNTMG42_.*");   				//enable MG	
    ETUtil.EnableGoal("REPAIRMG42_mg42_.*");   				//enable MG	   
  	
   //crapshoot: what is this?
   //Extra Gate Dyno goal
	//Util.SetPositionGoal( "PLANT_t1155", "PLANT_Depot_Main_Gates" );

   //MOVE GOALS FOR BETTER REACHABLE
   	Util.SetGoalOffset( 0, 10, -100, "PLANT_Weapons_Hold" );
	Util.SetGoalOffset( 40, 100, -100, "PLANT_Depot_Main_Gates" );

	//crapshoot: what is this?
	//Util.SetGoalOffset( -40, 100, -100, "PLANT_t1155" );

    //GOAL PROPERTIES	
    SetMapGoalProperties( "ATTACK_.*", {mincamptime=9, maxcamptime=9});
	SetMapGoalProperties( "DEFEND_.*", {mincamptime=9999, maxcamptime=99999});
    SetMapGoalProperties( "SNIPE_.*", {mincamptime=999, maxcamptime=9999});
    SetMapGoalProperties( "MOUNTMG42_.*", {mincamptime=999, maxcamptime=9999});


  	SetGoalPriority( "ATTACK_a_tr.*", 5.0 );		//Special Attack for jumping on vehicle

	// Max users per goal
  	//Util.SetMaxUsersInProgress( 2, ".*" );
	Util.SetMaxUsersInProgress( 2, "ATTACK_a_tr.*" );

	Util.SetMaxUsersInProgress( 1, "MOUNTMG42_.*" );
  	Util.SetMaxUsersInProgress( 1, "MOUNTMG42_.*" );

   //SET GOALS AT START
	Wp.SetWaypointFlag("c_health_station","closed",false);
	Wp.SetWaypointFlag("c_ammo_station","closed",false);
	Wp.SetWaypointFlag("c_mg_wh","closed",false);

	//ALLIES GOALS
  	SetAvailableMapGoals(TEAM.ALLIES, true, "PLANT_Weapons_Hold");  	//Weapon hold door
	SetAvailableMapGoals(TEAM.ALLIES, true, "ATTACK_a_wh.*"); 				//Attack Weapon hold
	SetAvailableMapGoals(TEAM.ALLIES, true, "GO.*"); 					//Attack Weapon hold
	SetAvailableMapGoals(TEAM.ALLIES, true, "ROUTE_.*");  					//ROUTES

	//AXIS GOALS
	SetAvailableMapGoals(TEAM.AXIS, true, "DEFEND_d_wh.*"); 				//Defend Weapon hold

    //BLOCKED waypoints
	Wp.SetWaypointFlag("c_mg_boathouse","closed",true);
	Wp.SetWaypointFlag("c_mg_rail","closed",true);
	Wp.SetWaypointFlag("c_mg_wh","closed",false);
	Wp.SetWaypointFlag("c_health_boathouse","closed",true);
	Wp.SetWaypointFlag("c_ammo_boathouse","closed",true);
	Wp.SetWaypointFlag("c_health_cola","closed",true);
	

	//*************    TRIGGERS  ***************************************

	OnTrigger( "slide_left_goto", Map.wires_construct_Built );
	OnTrigger( "the Weapons Hold Destroyed.", Map.wh_door_script_Destroyed );
	OnTrigger( "Allies have stolen the Bomb Parts!", Map.Allies_bomb_parts_stolen );
	OnTrigger( "Axis have returned the Bomb Parts!", Map.Allies_bomb_parts_returned );
	OnTrigger( "The bomb parts have been secured in the Assemby Area", Map.Allies_bomb_parts_secured );
	OnTrigger( "The Allies have opened the crates and are assembling the bomb!", Map.open_crates_Built );
	OnTrigger( "The Bomb has been assembled", Map.abomb_const_Built );
	OnTrigger( "The Main Gates have been constructed.", Map.gates_Built );
	OnTrigger( "The Main Gates have been destroyed.", Map.gates_Destroyed );
	OnTrigger( "slide_left_goto", Map.wires_construct_Built );
	OnTrigger( "fuse_panel_start", Map.fuse_panel_start );
	//OnTrigger( "fuse_panel_stop", Map.fuse_panel_stop );
	
	//Hand Car triggers
	OnTrigger( "track 1" , Map.handcar_pos1  );
	OnTrigger( "track 2" , Map.handcar_pos2  );
	OnTrigger( "track 3" , Map.handcar_pos3  );
	OnTrigger( "track 4" , Map.handcar_pos4  );
	OnTrigger( "track 5" , Map.handcar_pos5  );
	OnTrigger( "track 6" , Map.handcar_pos6  );
	OnTrigger( "track 7" , Map.handcar_pos7  );
	OnTrigger( "track 8" , Map.handcar_pos8  );
	OnTrigger( "track 9" , Map.handcar_pos9  );
	OnTrigger( "track 10", Map.handcar_pos10 );
	OnTrigger( "track 11", Map.handcar_pos11 );
	OnTrigger( "track 12", Map.handcar_pos12 );
	OnTrigger( "track 13", Map.handcar_pos13 );
	OnTrigger( "track 14", Map.handcar_pos14 );
	OnTrigger( "track 15", Map.handcar_pos15 );
	OnTrigger( "track 16", Map.handcar_pos16 );
	OnTrigger( "track 17", Map.handcar_pos17 );
	OnTrigger( "track 18", Map.handcar_pos18 );
	OnTrigger( "track 19", Map.handcar_pos19 );
	OnTrigger( "track 20", Map.handcar_pos20 );
	OnTrigger( "track 21", Map.handcar_pos21 );
	OnTrigger( "track 22", Map.handcar_pos22 );
	OnTrigger( "track 23", Map.handcar_pos23 );
	OnTrigger( "track 24", Map.handcar_pos24 );
	OnTrigger( "track 25", Map.handcar_pos25 );
	OnTrigger( "track 26", Map.handcar_pos26 );
	OnTrigger( "track 27", Map.handcar_pos27 );
	OnTrigger( "track 28", Map.handcar_pos28 );
	OnTrigger( "track 29", Map.handcar_pos29 );
	OnTrigger( "track 30", Map.handcar_pos30 );
	OnTrigger( "track 31", Map.handcar_pos31 );
	OnTrigger( "track 32", Map.handcar_pos32 );
	OnTrigger( "track 33", Map.handcar_pos33 );
	OnTrigger( "track 34", Map.handcar_pos34 );
	OnTrigger( "track 35", Map.handcar_pos35 );
	OnTrigger( "track 36", Map.handcar_pos36 );
	OnTrigger( "track 37", Map.handcar_pos37 );
	OnTrigger( "track 38", Map.handcar_pos38 );
	OnTrigger( "track 39", Map.handcar_pos39 );
	OnTrigger( "track 40", Map.handcar_pos40 );
	OnTrigger( "track 41", Map.handcar_pos41 );
	OnTrigger( "track 42", Map.handcar_pos42 );
	OnTrigger( "track 43", Map.handcar_pos43 );
	OnTrigger( "track 44", Map.handcar_pos44 );


	//~SetAvailableMapGoals( TEAM.ALLIES, false, ".*" );
	//~SetAvailableMapGoals( TEAM.AXIS, false, ".*" );


// "Allied team has escaped with the A-Bomb!"
//"Axis have secured the Trainyard."
//Planted at the Weapons Hold.`


   // ********************************************************
   // *****  ROUTES   ****************************************
   // ********************************************************

 	
	print("Configuring Routes");
	
	MapRoutes =
	{
            //Goal: Secure the bomb parts
        	CAPPOINT_bomb_parts = 
        	{ 
                    ROUTE_r_bomb_parts = 
                    {
                        ROUTE_r_bomb_a1 = 
                        { 
                            ROUTE_r_bomb_a12 = { ROUTE_r_bomb_a13  =  {}, },
                            ROUTE_r_bomb_a2 = 
                            {
                                ROUTE_r_bomb_a22  = 
                                {
                                    ROUTE_r_bomb_a3a  =  {},
                                    ROUTE_r_bomb_a4  = 
                                    {
                                        ROUTE_r_bomb_a4a  =  {},
                                        ROUTE_r_bomb_a4b  =  {},
                                    },
                                },
                                ROUTE_r_bomb_a3  =  
                                {
                                    ROUTE_r_bomb_a3a  =  {},
                                    ROUTE_r_bomb_a4  = 
                                    {
                                        ROUTE_r_bomb_a4a  =  {},
                                        ROUTE_r_bomb_a4b  =  {},
                                    },
                                },    
                            },
                        },
                        ROUTE_r_bomb_b1 = 
                        {    
                            ROUTE_r_bomb_b2 = 
                            { 
                                ROUTE_r_bomb_a22  = 
                                {
                                    ROUTE_r_bomb_a3a  =  {},
                                    ROUTE_r_bomb_a4  = 
                                    {
                                        ROUTE_r_bomb_a4a  =  {},
                                        ROUTE_r_bomb_a4b  =  {},
                                    },
                                },
                            }, 
                        },
                    },
        	},
                 
            //Goal: 
    	}; 


	// Copy routes

	print( "Routes loaded" );

	Util.UpdateSwitchData();
	Util.Routes(MapRoutes);

	print( "OnMapLoad" );
};




// =======================================================
// =========  BOT  JOIN    ===============================
// =======================================================

global OnBotJoin = function( bot )
{

	bot.TargetBreakableDist = 100.0;
	bot.MaxViewDistance = 2000.0;
	team = bot.GetTeam();
	class = bot.GetClass();

  	if( bot.CanSnipe() )
  	{
		print("Sniper joined");
    		bot.MaxViewDistance = 3000;
  	}
};


// =======================================================
// =========  BOT  LEAVE   ===============================
// =======================================================

global OnBotLeave = function( bot )
{
	//Killing existing threads
  	//if(bot.WaypointThread1)    {  threadKill(bot.WaypointThread1);  }
  	//if(bot.WaypointThread2)    {  threadKill(bot.WaypointThread2);  }
  	//if(bot.WaypointThread3)    {  threadKill(bot.WaypointThread3);  }

    	print("Killing Threads of bot: ", bot.name);
};

// =======================================================
// =========  THREADS     ================================
// =======================================================