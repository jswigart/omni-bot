// cs: this probably needs re-done entirely. i know it was a lot of work, but it's a huge hack.

/* MLB_Egypt.gm 
 	omni-bot version 0.66

 	Author: Advieszeur  
 	Updated: may, 2 2008
 
 	Last Changes: may, 2 2008

//////////////////////////////////////////////////////////////////////////////////////////////////////

*/


global Map =
{
	BuildTime = false,
	BoatAtWp = 1,                  //Position of the boat
	Lift_phase  = 0,                // face 0 of 6 phases boatlifting

	//BoatIsBuild = false,
	
	BarrierIsBuild = false, 		//Is Barrier build
	LowerGate = "close",
	UpperGate = "close",	

	BoatAtBarrier   = false,		//Boat is at flooddoor 
	BoatAtLowerGate  = false,		//Boat is at flooddoor 
	BoatInLift = false,            	//Boat good between flooddoors
	BoatAtEnd = false,            	//Boat at the end of route
	
	BoatAttack = true,	
    BoatIsDamaged = false,        	// Boat is damaged	
    BoatIsMoving = false,          	// Boat is moving
    ThreadStop = false,			//For stopping the threads

  	Movers =   
    {
        "MOVER_boat",      		//retain the boat as a mover
  	},
  	
	//Switches
     Switches =
     {

     	Lowergate =
     	{
     		WaypointName = "sw_lowergate",
     		LimitTeam = 0, 
     		LimitClass = (1<<CLASS.ENGINEER) | (1<<CLASS.MEDIC) | (1<<CLASS.FIELDOPS) 
			 								 | (1<<CLASS.SOLDIER) | (1<<CLASS.COVERTOPS),  
			LimitBots = 2, 
			LimitDistance = 1,		//nor radius at start
    		ExitConditions =  {
        		someFunc = function(bot)  {  return true; },
     		},
     	},
 	
    	Waterpump =
     	{
     		WaypointName = "sw_water",
     		LimitTeam = 0, 
     		LimitClass = (1<<CLASS.ENGINEER) | (1<<CLASS.MEDIC) | (1<<CLASS.FIELDOPS) 
			 								 | (1<<CLASS.SOLDIER) | (1<<CLASS.COVERTOPS),
			LimitBots = 2, 
			LimitDistance = 1,		//nor radius at start			
    		ExitConditions =  {
        		someFunc = function(bot)  {  return true; },
     		},
     	},

    	Uppergate =
     	{
     		WaypointName = "sw_uppergate",
     		LimitTeam = 0, 
     		LimitClass = (1<<CLASS.ENGINEER) | (1<<CLASS.MEDIC) | (1<<CLASS.FIELDOPS) 
			 								 | (1<<CLASS.SOLDIER) | (1<<CLASS.COVERTOPS),
			LimitBots = 2, 
			LimitDistance = 1,		//nor radius at start			
    		ExitConditions =  {
        		someFunc = function(bot)  {  return true; },
     		},
     	},
     	
    	FireGun =
     	{
     		WaypointName = "FireGun",
     		LimitTeam = 0, 
     		LimitClass = (1<<CLASS.ENGINEER) | (1<<CLASS.MEDIC) | (1<<CLASS.FIELDOPS) 
			 								 | (1<<CLASS.SOLDIER) | (1<<CLASS.COVERTOPS),
			LimitBots = 3, 
    		ExitConditions =  {
        		someFunc = function(bot)  {  return true; },
     		},
     	}, 
     	
    	BoatStart =
     	{
     		WaypointName = "a_boat_1",
     		LimitTeam = (1<<TEAM.AXIS), 
     		LimitClass = (1<<CLASS.ENGINEER) | (1<<CLASS.MEDIC) | (1<<CLASS.FIELDOPS) 
			 								 | (1<<CLASS.SOLDIER) | (1<<CLASS.COVERTOPS),
			LimitBots = 2, 
    		ExitConditions =  {
        		someFunc = function(bot)  {  return true; },
     		},
     	}, 
     	
    	LiftMagnet =
     	{
     		WaypointName = "constructMagnet1",
     		LimitTeam = 0, 
     		LimitClass = (1<<CLASS.ENGINEER),
     		PressOnce = true, 
			LimitBots = 2, 
    		ExitConditions =  {
        		someFunc = function(bot)  {  return true; },
     		},
     	},      	
		 		 		  		     	
	},	


	resetGoals = function()   {	
     	//DEFEND
		SetAvailableMapGoals( TEAM.AXIS, false, "DEFEND_.*" );
		SetAvailableMapGoals( TEAM.ALLIES, false, "DEFEND_.*" );
     	//ATTACK
		SetAvailableMapGoals( TEAM.AXIS, false, "ATTACK_.*" );
		SetAvailableMapGoals( TEAM.ALLIES, false, "ATTACK_.*" );
     	//SNIPE
		SetAvailableMapGoals( TEAM.AXIS, false, "SNIPE_x.*" );
		SetAvailableMapGoals( TEAM.ALLIES, false, "SNIPE_l.*" );
     	//ARTY
		SetAvailableMapGoals( TEAM.AXIS, false, "CALLARTILLERY_.*" );
		SetAvailableMapGoals( TEAM.ALLIES, false, "CALLARTILLERY_.*" );
		
		//Re - enable boat attack	
		if (Map.BoatAttack)  {
			AttackPoint =  "ATTACK_a_boat_" + Map.BoatAtWp;
			SetAvailableMapGoals( TEAM.AXIS, true, AttackPoint );			
		}

		bprint( "Reset Goals done" );
	},  	


    //==== Boat things  ===========================

 	//boat Past barrier
	Past_Barrier = function( trigger )   {
		if ( TestMap )  { return; }
		Map.BoatAtBarrier = false;
		Map.resetGoals();		//Reset goals		
		//Axis
		SetAvailableMapGoals( TEAM.AXIS, true, "ATTACK_a_barrier2_.*" );
		SetAvailableMapGoals( TEAM.AXIS, true, "SNIPE_s_barrier2_x.*" );
		SetAvailableMapGoals( TEAM.AXIS, false, "MOUNTMG42_473" );
		SetAvailableMapGoals( TEAM.AXIS, false, "REPAIRMG42_473" );
		SetAvailableMapGoals( TEAM.AXIS, false, "PLANT_boat_barrier" );
		SetAvailableMapGoals( TEAM.AXIS, false, "PLANT_temple_entrance_door" );		
		//Allies
		SetAvailableMapGoals( TEAM.ALLIES, true, "DEFEND_d_barrier2_.*" );
		SetAvailableMapGoals( TEAM.ALLIES, true, "SNIPE_s_barrier2_l.*" );			
		SetAvailableMapGoals( TEAM.ALLIES, false, "BUILD_boat_barrier" ); 
		
		//crapshoot: no GO goals in 0.7
		//Set the extra used goal back to it's original
		//Util.SetPositionGoal( "PLANT_temple_entrance_door", "GO_TempleWall" );
		
		bprint( "Boat past barrier" );
	}, 
	 
 	//boat Past barrier2
	Past_Barrier2 = function( trigger )   {
		if ( TestMap )  { return; }
		Map.resetGoals();		//Reset goals
		//Axis
		SetAvailableMapGoals( TEAM.AXIS, true, "ATTACK_a_flooddoor_.*" );
		SetAvailableMapGoals( TEAM.AXIS, true, "SNIPE_s_flooddoor_x.*" );
		SetAvailableMapGoals( TEAM.AXIS, true, "BUILD_generator" );
		SetAvailableMapGoals( TEAM.ALLIES, true, "PLANT_generator" ); 
		SetAvailableMapGoals( TEAM.AXIS, false, "MOUNTMG42_473" );
		SetAvailableMapGoals( TEAM.AXIS, false, "REPAIRMG42_473" );						
		//Allies
		SetAvailableMapGoals( TEAM.ALLIES, true, "DEFEND_d_flooddoor.*" );
		SetAvailableMapGoals( TEAM.ALLIES, true, "SNIPE_s_flooddoor_l.*" );
		SetAvailableMapGoals( TEAM.ALLIES, true, "ROUTE_r_spawn_l3" );				
		//Switch activate
		Map.Switches.Uppergate.LimitTeam =  (1<<TEAM.AXIS);						

		bprint( "Boat past second barrier, enable switch and generator" );
	}, 
	 
 	//boat Past the lower gate
	Past_LowerGate = function( trigger )   {
		if ( TestMap )  { return; }
		Map.BoatAtLowerGate = false;
		bprint( "Boat past lower gate" );
	}, 
	
	//boat Past the upper gate
	Past_UpperGate = function( trigger )   {
		if ( TestMap )  { return; }
		Map.BoatInLift = false;
		Map.Switches.Uppergate.LimitTeam =  0;   
        Map.Switches.Lowergate.LimitTeam =  0;  
	    Map.Switches.Waterpump.LimitTeam =  0;
		//Map.Switches.LiftMagnet.LimitTeam =  0;  //extra magnet for engi bots	
		
		Map.resetGoals();		//Reset goals
		//Axis
		SetAvailableMapGoals( TEAM.AXIS, false, "BUILD_generator" );
		SetAvailableMapGoals( TEAM.AXIS, true, "ATTACK_a_temple_.*" );
		SetAvailableMapGoals( TEAM.AXIS, true, "SNIPE_s_temple_x.*" );	
		SetAvailableMapGoals( TEAM.AXIS, true, "MOUNTMG42_268" );
		SetAvailableMapGoals( TEAM.AXIS, true, "REPAIRMG42_268" );				
		//Allies
		SetAvailableMapGoals( TEAM.ALLIES, false, "PLANT_generator" );		
		SetAvailableMapGoals( TEAM.ALLIES, true, "DEFEND_d_temple_.*" );
		SetAvailableMapGoals( TEAM.ALLIES, true, "SNIPE_s_temple_l.*" );
				
		bprint( "Boat past Upper gate" );		
	},
	
	//boat in the boat lift	
    BoatPos_inlift   = function( trigger) {
        if ( Map.BoatInLift ) { return; }        
        Map.BoatInLift = true;
		Map.BoatAttack = false;        
        Map.Switches.Lowergate.LimitTeam = (1<<TEAM.AXIS);  
        //Enable Generator
		SetAvailableMapGoals( TEAM.AXIS, true, "BUILD_generator" );
		SetAvailableMapGoals( TEAM.ALLIES, true, "PLANT_generator" );         
		bprint( "Boat is in lift" );		               
    },	 
	   
	boat_Damaged = function( trigger )   {
		if ( TestMap )  { return; }
		//change goals for special waypoints
		ConstructPoint =  "GO_g_repair_" + Map.BoatAtWp;
		AttackPoint =  "ATTACK_a_boat_" + Map.BoatAtWp;
		Map.BoatIsDamaged = true;
		Map.BoatAttack = false;
		
        //Use other constructgoal        		
		Util.SetPositionGoal( "BUILD_scaffolding", ConstructPoint);		
		
		SetAvailableMapGoals( TEAM.AXIS, true, "PLANT_generator" );	
		SetAvailableMapGoals( TEAM.AXIS, true, ConstructPoint );		
		SetAvailableMapGoals( TEAM.AXIS, false, AttackPoint );
			
        
        //No constructpoint:                     	
		if ( Map.BoatAtWp == 46 && Map.Lift_phase != 3)  //Wait for lowerdoor 
            {   SetAvailableMapGoals( TEAM.AXIS, false, "PLANT_generator" );   }        
        
 		if ( Map.BoatInLift && Map.Lift_phase != 6)  //Wait for upperdoor 
            {   SetAvailableMapGoals( TEAM.AXIS, false, "PLANT_generator" );   } 
			
		if (Map.BoatAtLowerGate && Map.LowerGate == "close")  
			{  SetAvailableMapGoals( TEAM.AXIS, false, "PLANT_generator" );  } 			      	

		bprint( "Constructpoint = ", ConstructPoint );		
		bprint( "boat_Damaged" );
		
	},

	boat_Repaired = function( trigger )   {
		if ( TestMap )  { return; }
		//change goals for special waypoints
		ConstructPoint =  "GO_g_repair_"  + Map.BoatAtWp;
		AttackPoint =  "ATTACK_a_boat_" + Map.BoatAtWp;	
		Map.BoatIsDamaged = false;
		Map.BoatAttack = true; 	       	
		SetAvailableMapGoals( TEAM.AXIS, false, "BUILD_scaffolding" );
		SetAvailableMapGoals( TEAM.AXIS, false, ConstructPoint );							
		SetAvailableMapGoals( TEAM.AXIS, true, AttackPoint );
		
        
        //No attackpoints:
		//Wait for build boat barrier 
        if (Map.BoatAtBarrier && Map.BarrierIsBuild) 
			{Map.BoatAttack = false; bprint( "1" );}
		//Wait for closed lowerdoor 
		if (Map.BoatAtLowerGate && Map.LowerGate == "close")  
			{Map.BoatAttack = false; bprint( "2" );} 
        //Wait for closed upperdoor
 		if ( Map.BoatInLift && Map.UpperGate == "close")  
			{Map.BoatAttack = false; bprint( "3" ); } 
		//Boat route finished
		if (Map.BoatAtEnd) 					 
			{Map.BoatAttack = false; bprint( "4" ); } 
		//Attackpoint disable
		if (!Map.BoatAttack)  {					  
             SetAvailableMapGoals( TEAM.AXIS, false, AttackPoint );
			 bprint( "Attack disabled" );   
		}
		//Util.ResetGoals(); 
		bprint( "boat_Repaired" );
	},


	brickwall_Down = function( trigger )   {
		if ( TestMap )  { return; }
		SetAvailableMapGoals( TEAM.AXIS, true, "ROUTE_.*" );
		SetAvailableMapGoals( TEAM.ALLIES, true, "ROUTE_.*" );
		bprint( "Brick wall shot down" );
	},

	
	//Boat lift
	generator_Built = function( trigger )   {
		if ( TestMap )  { return; }
		Map.Switches.Uppergate.LimitDistance = 3000;
		Map.Switches.Lowergate.LimitDistance = 3000;
		Map.Switches.Waterpump.LimitDistance = 3000;
		bprint( "generator_Built" );
	},
	
	generator_Destroyed = function( trigger )   {
		if ( TestMap )  { return; }
		Map.Switches.Uppergate.LimitDistance = 1;
		Map.Switches.Lowergate.LimitDistance = 1;
		Map.Switches.Waterpump.LimitDistance = 1;
		bprint( "generator_Destroyed" );
	},	
	
	//Ship lifting  (6 faces - 2x 3 buttons)
	upper_gate_Closed = function( trigger )   {
		if ( TestMap )  { return; }

		Map.UpperGate = "close";
		if ( Map.BoatInLift ) {
		    Map.Lift_phase = 5;
            Map.BoatAttack = false;           
			SetAvailableMapGoals( TEAM.AXIS, false, AttackPoint );		    
        	Map.Switches.Uppergate.LimitTeam = (1<<TEAM.AXIS);   
        	Map.Switches.Lowergate.LimitTeam =  0;  
	        Map.Switches.Waterpump.LimitTeam =  0;				
		} else {
		    Map.Lift_phase = 1;
        	Map.Switches.Uppergate.LimitTeam = (1<<TEAM.ALLIES);   
        	Map.Switches.Lowergate.LimitTeam = 0;  
	        Map.Switches.Waterpump.LimitTeam =  (1<<TEAM.AXIS);			
		}

		bprint( "upper_gate_Closed" );
	},	
	
	upper_gate_Opened = function( trigger )   {
		if ( TestMap )  { return; }

		Map.UpperGate = "open";
		//crapshoot: no GO goals in 0.7
		//ConstructPoint =  "GO_g_repair_"  + Map.BoatAtWp;
		AttackPoint =  "ATTACK_a_boat_" + Map.BoatAtWp;	
				
		if ( Map.BoatInLift ) {
		    Map.Lift_phase = 6;
        	Map.Switches.Uppergate.LimitTeam = (1<<TEAM.ALLIES);   
        	Map.Switches.Lowergate.LimitTeam =  0;  
	        Map.Switches.Waterpump.LimitTeam =  0;
	        //Disable Generator
			SetAvailableMapGoals( TEAM.AXIS, false, "BUILD_generator" );
			SetAvailableMapGoals( TEAM.ALLIES, false, "PLANT_generator" );
			//crapshoot: no GO goals in 0.7 
			//Util.SetPositionGoal( "BUILD_scaffolding", ConstructPoint);
											         
		    if ( Map.BoatIsDamaged )  { 
				bprint( "Repair the boat!" ); 
				Map.BoatAttack = false;	
        		//Use other constructgoal        								
                SetAvailableMapGoals( TEAM.AXIS, true, "BUILD_scaffolding" );
			//crapshoot: no GO goals in 0.7 
			//SetAvailableMapGoals( TEAM.AXIS, true, ConstructPoint );			   
            }  else  {               
                Map.BoatAttack = true;
                bprint( "Escort the boat!" ); 
				SetAvailableMapGoals( TEAM.AXIS, true, AttackPoint );   
            }                         				
		} else {
		    Map.Lift_phase = 0;
        	Map.Switches.Uppergate.LimitTeam = (1<<TEAM.AXIS);   
        	Map.Switches.Lowergate.LimitTeam = 0;  
	        Map.Switches.Waterpump.LimitTeam = 0;			
		}

		bprint( "upper_gate_Opened" );
	},			

	waterlevel_Lowered = function( trigger )   {
		if ( TestMap )  { return; }

		if ( Map.BoatInLift ) {
		    Map.Lift_phase = 4;
        	Map.Switches.Uppergate.LimitTeam =  0;   
        	Map.Switches.Lowergate.LimitTeam =  (1<<TEAM.ALLIES);  
	        Map.Switches.Waterpump.LimitTeam =  (1<<TEAM.AXIS);				
		} else {
		    Map.Lift_phase = 2;
        	Map.Switches.Uppergate.LimitTeam = 0;  			 
        	Map.Switches.Lowergate.LimitTeam = (1<<TEAM.AXIS);  
	        Map.Switches.Waterpump.LimitTeam = (1<<TEAM.ALLIES);			
		}

		bprint( "waterlevel_lowered" );
	},		
	
	waterlevel_Raised = function( trigger )   {
		if ( TestMap )  { return; }

		if ( Map.BoatInLift ) {
		    Map.Lift_phase = 5;
        	Map.Switches.Lowergate.LimitTeam =  0; 				    
        	Map.Switches.Uppergate.LimitTeam =  (1<<TEAM.AXIS);   
	        Map.Switches.Waterpump.LimitTeam =  (1<<TEAM.ALLIES);				
		} else {
		    Map.Lift_phase = 1;
		    Map.Switches.Lowergate.LimitTeam = 0; 		 
        	Map.Switches.Uppergate.LimitTeam = (1<<TEAM.ALLIES);   
	        Map.Switches.Waterpump.LimitTeam = (1<<TEAM.AXIS);			
		}

		bprint( "waterlevel_Raised" );
	},
	
	lower_gate_Closed = function( trigger )   {
		if ( TestMap )  { return; }

		Map.LowerGate = "close";
		if ( Map.BoatInLift ) {
		    Map.Lift_phase = 4;
        	Map.Switches.Uppergate.LimitTeam =  0;   
        	Map.Switches.Lowergate.LimitTeam =  (1<<TEAM.ALLIES);  
	        Map.Switches.Waterpump.LimitTeam =  (1<<TEAM.AXIS);				
		} else {
		    Map.Lift_phase = 2;
        	Map.Switches.Uppergate.LimitTeam = 0;   
        	Map.Switches.Lowergate.LimitTeam = (1<<TEAM.AXIS);  
	        Map.Switches.Waterpump.LimitTeam = (1<<TEAM.ALLIES);			
		}

		bprint( "lower_gate_Closed" );
	},	
	
	lower_gate_Opened = function( trigger )   {
		if ( TestMap )  { return; }

		Map.LowerGate = "open";
		//crapshoot: no GO goals in 0.7
		//ConstructPoint =  "GO_g_repair_"  + Map.BoatAtWp;
		AttackPoint =  "ATTACK_a_boat_" + Map.BoatAtWp;			
		
		if ( Map.BoatInLift ) {
		    Map.Lift_phase = 3;
        	Map.Switches.Uppergate.LimitTeam =  0;   
        	Map.Switches.Lowergate.LimitTeam =  (1<<TEAM.AXIS);  
	        Map.Switches.Waterpump.LimitTeam =  0;				
		} else {
		    Map.Lift_phase = 3;
        	Map.Switches.Uppergate.LimitTeam = 0;   
        	Map.Switches.Lowergate.LimitTeam = (1<<TEAM.ALLIES);  
	        Map.Switches.Waterpump.LimitTeam = 0; 
	        //Disable Generator
			SetAvailableMapGoals( TEAM.AXIS, false, "BUILD_generator" );
			SetAvailableMapGoals( TEAM.ALLIES, false, "PLANT_generator" ); 	        
			//Repair the boat   
		    if ( Map.BoatAtLowerGate )  {
				bprint( "Gate open, back to boat" );
				if ( Map.BoatIsDamaged )   {
					SetAvailableMapGoals( TEAM.AXIS, true, "BUILD_scaffolding" );
					bprint( "Go Repair boat" );										
				}  else  {	
					Map.BoatAttack = true;	   
					SetAvailableMapGoals( TEAM.AXIS, true, AttackPoint );
					bprint( "Enable attackpoint, escort boat" ); 
				} 		   
			}             			
		}
 		bprint( "lower_gate_Opened" );		
	},
	
	boat_barrier_Built = function( trigger )   {
		if ( TestMap )  { return; }
		Map.BarrierIsBuild = true; 
		AttackPoint =  "ATTACK_a_boat_" + Map.BoatAtWp;	
		//Enable extra used goal
		SetAvailableMapGoals( TEAM.AXIS, true, "PLANT_temple_entrance_door" );			
		if (Map.BoatAtBarrier) { 
			SetAvailableMapGoals( TEAM.AXIS, false, AttackPoint ); 
			Map.BoatAttack = false;	
			bprint( "Disable boat attack" ); 						
		}
		bprint( "boat_barrier_Built" );
	},

	boat_barrier_Destroyed = function( trigger )   {
		if ( TestMap )  { return; }
		//fake switch use as magnet for engi and covert
        //Map.Switches.BarrierMagnet.LimitTeam =  0;	
		Map.BarrierIsBuild = false; 
		AttackPoint =  "ATTACK_a_boat_" + Map.BoatAtWp;	
		//Disable extra used goal
		SetAvailableMapGoals( TEAM.AXIS, false, "PLANT_temple_entrance_door" );		
		if (Map.BoatAtBarrier && !Map.BoatIsDamaged) { 
			SetAvailableMapGoals( TEAM.AXIS, true, AttackPoint ); 
			Map.BoatAttack = true;
			bprint( "Boat attack enabled, escort the boat!" );					
		}
		bprint( "boat_barrier_Destroyed" );
	},

	//Boat attackpoints
  	Attackpoint_set = function( boat_pos )   {
		if ( TestMap ) { return; }

		Map.BoatAtWp = boat_pos;
		newAttackPoint =  "ATTACK_a_boat_" + boat_pos;
		Map.BoatAttack = true;
		SetAvailableMapGoals( TEAM.AXIS, false, "ATTACK_a_boat_.*" );
		SetAvailableMapGoals( TEAM.AXIS, true, newAttackPoint );
		bprint( "Active attack: ", boat_pos, " - ",newAttackPoint);

		//Boat moving is started
		if ( boat_pos == 2 ) {
			//Switch de-activate
			Map.Switches.BoatStart.LimitTeam =  0;	
			bprint( "Boat is on the move!!");	
		}
				
		//Boat arrived at Barrier
		if ( boat_pos == 25 ) {
			Map.BoatAtBarrier = true;
			if ( Map.BarrierIsBuild ) {
				Map.BoatAttack = false;	
				SetAvailableMapGoals( TEAM.AXIS, false, newAttackPoint );
				bprint( "Boat at build barrier");	
			}
		}			
		//Boat past Barrier
		if ( boat_pos == 26 ) {	
			Map.Past_Barrier();		//Function call for Past barrier
			bprint( "Boat past barrier");										                     
        }
               
		//Boat arived at closed lowerdoor		
		if ( boat_pos == 46 ) {
            Map.BoatAtLowerGate = true;
			 
            if ( Map.LowerGate == "close")  {
				Map.BoatAttack = false;				
				SetAvailableMapGoals( TEAM.AXIS, false, "ATTACK_a_boat_46" );
			}
			bprint( "Boat is for the lower door");		                             
        }
	
	if ( Map.BoatIsDamaged )  { 
		Map.BoatAttack = false;				
        SetAvailableMapGoals( TEAM.AXIS, true, "BUILD_scaffolding" ); 
		SetAvailableMapGoals( TEAM.AXIS, false, newAttackPoint );
	}	
	      
		//Boat route is finished now	  
		if ( boat_pos == 73 ) {
            SetAvailableMapGoals( TEAM.AXIS, false, "ATTACK_a_boat_.*" );
            Map.BoatAtEnd = true; 
			bprint( "Boat is at the end");					
		}				
	},

/////////////////////////////////////////////////////////////////		
	//Boat pos for Attack points
  	BoatPos_wp1    = function( trigger)  { if ( TestMap ) { return; } Map.Attackpoint_set(1);    },
   	BoatPos_wp2    = function( trigger)  { if ( TestMap ) { return; } Map.Attackpoint_set(2);    }, 	
  	BoatPos_wp3    = function( trigger)  { if ( TestMap ) { return; } Map.Attackpoint_set(3);    },
  	BoatPos_wp4    = function( trigger)  { if ( TestMap ) { return; } Map.Attackpoint_set(4);    },
  	BoatPos_wp4b   = function( trigger)  { if ( TestMap ) { return; } Map.Attackpoint_set("4b"); },  	
  	BoatPos_wp5    = function( trigger)  { if ( TestMap ) { return; } Map.Attackpoint_set(5);    },
  	BoatPos_wp6    = function( trigger)  { if ( TestMap ) { return; } Map.Attackpoint_set(6);    },
  	BoatPos_wp7    = function( trigger)  { if ( TestMap ) { return; } Map.Attackpoint_set(7);    },
  	BoatPos_wp8    = function( trigger)  { if ( TestMap ) { return; } Map.Attackpoint_set(8);    },
  	BoatPos_wp9    = function( trigger)  { if ( TestMap ) { return; } Map.Attackpoint_set(9);    },
  	BoatPos_wp10   = function( trigger)  { if ( TestMap ) { return; } Map.Attackpoint_set(10);   },
  	BoatPos_wp11   = function( trigger)  { if ( TestMap ) { return; } Map.Attackpoint_set(11);   },
  	BoatPos_wp12   = function( trigger)  { if ( TestMap ) { return; } Map.Attackpoint_set(12);   },
  	BoatPos_wp13   = function( trigger)  { if ( TestMap ) { return; } Map.Attackpoint_set(13);   },
  	BoatPos_wp14   = function( trigger)  { if ( TestMap ) { return; } Map.Attackpoint_set(14);   },
  	BoatPos_wp15   = function( trigger)  { if ( TestMap ) { return; } Map.Attackpoint_set(15);   },
  	BoatPos_wp16   = function( trigger)  { if ( TestMap ) { return; } Map.Attackpoint_set(16);   },
  	BoatPos_wp17   = function( trigger)  { if ( TestMap ) { return; } Map.Attackpoint_set(17);   },
  	BoatPos_wp18   = function( trigger)  { if ( TestMap ) { return; } Map.Attackpoint_set(18);   },
  	BoatPos_wp18b  = function( trigger)  { if ( TestMap ) { return; } Map.Attackpoint_set("18b");},    	
  	BoatPos_wp19   = function( trigger)  { if ( TestMap ) { return; } Map.Attackpoint_set(19);   },
  	BoatPos_wp20   = function( trigger)  { if ( TestMap ) { return; } Map.Attackpoint_set(20);   },
  	BoatPos_wp21   = function( trigger)  { if ( TestMap ) { return; } Map.Attackpoint_set(21);   },
  	BoatPos_wp22   = function( trigger)  { if ( TestMap ) { return; } Map.Attackpoint_set(22);   },
  	BoatPos_wp23   = function( trigger)  { if ( TestMap ) { return; } Map.Attackpoint_set(23);   },
  	BoatPos_wp24   = function( trigger)  { if ( TestMap ) { return; } Map.Attackpoint_set(24);   },
  	BoatPos_wp25   = function( trigger)  { if ( TestMap ) { return; } Map.Attackpoint_set(25);   },
  	BoatPos_wp26   = function( trigger)  { if ( TestMap ) { return; } Map.Attackpoint_set(26);   },
  	BoatPos_wp27   = function( trigger)  { if ( TestMap ) { return; } Map.Attackpoint_set(27);   },
  	BoatPos_wp28   = function( trigger)  { if ( TestMap ) { return; } Map.Attackpoint_set(28);   },
  	BoatPos_wp29   = function( trigger)  { if ( TestMap ) { return; } Map.Attackpoint_set(29);   },
  	BoatPos_wp30   = function( trigger)  { if ( TestMap ) { return; } Map.Attackpoint_set(30);   },
  	BoatPos_wp31   = function( trigger)  { if ( TestMap ) { return; } Map.Attackpoint_set(31);   },
  	BoatPos_wp32   = function( trigger)  { if ( TestMap ) { return; } Map.Attackpoint_set(32);   },
  	BoatPos_wp33   = function( trigger)  { if ( TestMap ) { return; } Map.Attackpoint_set(33);   },
  	BoatPos_wp34   = function( trigger)  { if ( TestMap ) { return; } Map.Attackpoint_set(34);   },
  	BoatPos_wp35   = function( trigger)  { if ( TestMap ) { return; } Map.Attackpoint_set(35);   },
  	BoatPos_wp36   = function( trigger)  { if ( TestMap ) { return; } Map.Attackpoint_set(36);   },
  	BoatPos_wp37   = function( trigger)  { if ( TestMap ) { return; } Map.Attackpoint_set(37);   },
  	BoatPos_wp38   = function( trigger)  { if ( TestMap ) { return; } Map.Attackpoint_set(38);   },
  	BoatPos_wp39   = function( trigger)  { if ( TestMap ) { return; } Map.Attackpoint_set(39);   },
  	BoatPos_wp40   = function( trigger)  { if ( TestMap ) { return; } Map.Attackpoint_set(40);   },
  	BoatPos_wp41   = function( trigger)  { if ( TestMap ) { return; } Map.Attackpoint_set(41);   },
  	BoatPos_wp42   = function( trigger)  { if ( TestMap ) { return; } Map.Attackpoint_set(42);   },
  	BoatPos_wp42b  = function( trigger)  { if ( TestMap ) { return; } Map.Attackpoint_set("42b");},    	
  	BoatPos_wp43   = function( trigger)  { if ( TestMap ) { return; } Map.Attackpoint_set(43);   },
  	BoatPos_wp44   = function( trigger)  { if ( TestMap ) { return; } Map.Attackpoint_set(44);   },
  	BoatPos_wp45   = function( trigger)  { if ( TestMap ) { return; } Map.Attackpoint_set(45);   },
  	BoatPos_wp46   = function( trigger)  { if ( TestMap ) { return; } Map.Attackpoint_set(46);   },
  	BoatPos_wp47   = function( trigger)  { if ( TestMap ) { return; } Map.Attackpoint_set(47);   },
  	BoatPos_wp48   = function( trigger)  { if ( TestMap ) { return; } Map.Attackpoint_set(48);   },
  	BoatPos_wp49   = function( trigger)  { if ( TestMap ) { return; } Map.Attackpoint_set(49);   },
  	BoatPos_wp50   = function( trigger)  { if ( TestMap ) { return; } Map.Attackpoint_set(50);   },
  	BoatPos_wp51   = function( trigger)  { if ( TestMap ) { return; } Map.Attackpoint_set(51);   },
  	BoatPos_wp52   = function( trigger)  { if ( TestMap ) { return; } Map.Attackpoint_set(52);   },
  	BoatPos_wp53   = function( trigger)  { if ( TestMap ) { return; } Map.Attackpoint_set(53);   },
  	BoatPos_wp54   = function( trigger)  { if ( TestMap ) { return; } Map.Attackpoint_set(54);   },
  	BoatPos_wp55   = function( trigger)  { if ( TestMap ) { return; } Map.Attackpoint_set(55);   },
  	BoatPos_wp56   = function( trigger)  { if ( TestMap ) { return; } Map.Attackpoint_set(56);   },
  	BoatPos_wp57   = function( trigger)  { if ( TestMap ) { return; } Map.Attackpoint_set(57);   },
  	BoatPos_wp58   = function( trigger)  { if ( TestMap ) { return; } Map.Attackpoint_set(58);   },
  	BoatPos_wp59   = function( trigger)  { if ( TestMap ) { return; } Map.Attackpoint_set(59);   },
  	BoatPos_wp60   = function( trigger)  { if ( TestMap ) { return; } Map.Attackpoint_set(60);   },
  	BoatPos_wp61   = function( trigger)  { if ( TestMap ) { return; } Map.Attackpoint_set(61);   },
  	BoatPos_wp62   = function( trigger)  { if ( TestMap ) { return; } Map.Attackpoint_set(62);   },
  	BoatPos_wp63   = function( trigger)  { if ( TestMap ) { return; } Map.Attackpoint_set(63);   },
  	BoatPos_wp63b  = function( trigger)  { if ( TestMap ) { return; } Map.Attackpoint_set("63b");},   	
  	BoatPos_wp64   = function( trigger)  { if ( TestMap ) { return; } Map.Attackpoint_set(64);   },
  	BoatPos_wp65   = function( trigger)  { if ( TestMap ) { return; } Map.Attackpoint_set(65);   },
  	BoatPos_wp66   = function( trigger)  { if ( TestMap ) { return; } Map.Attackpoint_set(66);   },
  	BoatPos_wp67   = function( trigger)  { if ( TestMap ) { return; } Map.Attackpoint_set(67);   },
  	BoatPos_wp68   = function( trigger)  { if ( TestMap ) { return; } Map.Attackpoint_set(68);   },
  	BoatPos_wp69   = function( trigger)  { if ( TestMap ) { return; } Map.Attackpoint_set(69);   },  	
  	BoatPos_wp70   = function( trigger)  { if ( TestMap ) { return; } Map.Attackpoint_set(70);   },
  	BoatPos_wp71   = function( trigger)  { if ( TestMap ) { return; } Map.Attackpoint_set(71);   },  	
  	BoatPos_wp72   = function( trigger)  { if ( TestMap ) { return; } Map.Attackpoint_set(72);   },  	


    //======  Second part of level  (Boatroute is finished)  =======
  
	templedoor_Destroyed = function( trigger )   {
		if ( TestMap )  { return; }

		//crapshoot: no GO goals in 0.7. why not use SetGoalPosition to set to a position from a wp name?
		//Set the used goal back to it's original
		//Util.SetPositionGoal( "BUILD_scaffolding", "GO_g_td" );
		
		Map.resetGoals();		//Reset goals
		//Axis
		SetAvailableMapGoals( TEAM.AXIS, true, "ATTACK_a_square_.*" );
		SetAvailableMapGoals( TEAM.AXIS, true, "ATTACK_a_temple_start" );		
		SetAvailableMapGoals( TEAM.AXIS, true, "SNIPE_s_square_x.*" );	
		SetAvailableMapGoals( TEAM.AXIS, false, "MOUNTMG42_268" );
		SetAvailableMapGoals( TEAM.AXIS, false, "REPAIRMG42_268" );
		SetAvailableMapGoals( TEAM.AXIS, true, "PLANT_temple_entrance_door" );
		SetAvailableMapGoals( TEAM.AXIS, true, "PLANT_temple_entrance_gate" );				
								
		//Allies
		SetAvailableMapGoals( TEAM.ALLIES, true, "DEFEND_d_square.*" );
		SetAvailableMapGoals( TEAM.ALLIES, true, "SNIPE_s_square_l.*" );
			
		Map.ThreadStop = true;		//Stop boat thread
		sleep(2.5);	//let threads stop first itselfs
		
		//Stopping bot escort boat Thread
		foreach ( id and bot in BotTable )  {
			//Killing existing threads
			if(bot.WaypointThread)    {  threadKill(bot.WaypointThread);  }
			if(bot.WaypointThread2)   {  threadKill(bot.WaypointThread2); }
		    bot.EnableMovement(true);
		    bot.ReleaseButton(BTN.PRONE);
			bot.ExecCommand("kill");   //selfkill for change spawnpoint
		}
		bprint( "temple entrancedoor_Destroyed" );
	},
	

	dynawall_Destroyed = function( trigger )   {
		if ( TestMap )  { return; }

		Map.resetGoals();		//Reset goals
		//Axis
		SetAvailableMapGoals( TEAM.AXIS, true, "ATTACK_a_ammo_.*" );
		SetAvailableMapGoals( TEAM.AXIS, true, "ATTACK_a_gun_.*" );		
		SetAvailableMapGoals( TEAM.AXIS, true, "PLANT_courtyard_floor_crack" );
		SetAvailableMapGoals( TEAM.AXIS, true, "BUILD_gun" );
		SetAvailableMapGoals( TEAM.AXIS, true, "FLAG_ammo" );
		SetAvailableMapGoals( TEAM.AXIS, true, "CAPPOINT_cap_ammo" );													
		//Allies
		SetAvailableMapGoals( TEAM.ALLIES, true, "DEFEND_d_gun.*" );
		SetAvailableMapGoals( TEAM.ALLIES, true, "DEFEND_d_ammo.*" );		
		SetAvailableMapGoals( TEAM.ALLIES, true, "PLANT_gun" );

		bprint( "dynawall_Destroyed" );
	},
		
	cracked_floor_Destroyed = function( trigger )   {
		if ( TestMap )  { return; }
		bprint( "cracked_floor_Destroyed" );
	},
		    
	const_gun_Destroyed = function( trigger )   {
		if ( TestMap )  { return; }
		//SetAvailableMapGoals( TEAM.AXIS, true, "ATTACK_a_ammo_.*" );

		bprint( "const_gun_Destroyed" );
	},

	const_gun_Built = function( trigger )   {
		if ( TestMap )  { return; }
		bprint( "Gun built" );
	},

	ammo_Stolen = function( trigger )   {
		if ( TestMap )  { return; }
		SetAvailableMapGoals( TEAM.AXIS, false, "ATTACK_a_ammo_.*" );
		SetAvailableMapGoals( TEAM.ALLIES, false, "DEFEND_d_ammo.*" );		
		bprint( "Ammo stolen" );
	},

	ammo_Returned = function( trigger )   {
		if ( TestMap )  { return; }
		SetAvailableMapGoals( TEAM.AXIS, true, "ATTACK_a_ammo_.*" );
		SetAvailableMapGoals( TEAM.ALLIES, true, "DEFEND_d_ammo.*" );	
		bprint( "Ammo Returned" );
	},
	
	gun_Loaded = function( trigger )   {
		if ( TestMap )  { return; }
		SetAvailableMapGoals( TEAM.AXIS, false, "ATTACK_a_ammo_.*" );
		SetAvailableMapGoals( TEAM.AXIS, false, "PLANT_courtyard_floor_crack" );
		SetAvailableMapGoals( TEAM.ALLIES, false, "DEFEND_d_ammo_.*" );	
		SetAvailableMapGoals( TEAM.ALLIES, false, "PLANT_gun" );
		SetAvailableMapGoals( TEAM.AXIS, false, "CAPPOINT_cap_ammo" );							
		bprint( "Gun Loaded" );
	},

	gun_Ready = function( trigger )   {
		if ( TestMap )  { return; }		
		Map.Switches.FireGun.LimitTeam =  (1<<TEAM.AXIS); 
		bprint( "Gun Ready" );
	},
		
	gun_Fired = function( trigger )   {
		if ( TestMap )  { return; }
		Map.resetGoals();		//Reset goals
		//Axis
		SetAvailableMapGoals( TEAM.AXIS, true, "ATTACK_a_wall2_.*" );
		SetAvailableMapGoals( TEAM.AXIS, true, "PLANT_sarcophagus_room_door" );							
		//Allies
		SetAvailableMapGoals( TEAM.ALLIES, true, "DEFEND_d_wall2.*" );
		//Switch disable
		Map.Switches.FireGun.LimitTeam =  0; 		

		bprint( "Gun Fired" );
	},
	
	dynawall2_Destroyed = function( trigger )   {
		if ( TestMap )  { return; }

		Map.resetGoals();		//Reset goals
		//Axis
		SetAvailableMapGoals( TEAM.AXIS, true, "ATTACK_a_gold_.*" );
		SetAvailableMapGoals( TEAM.AXIS, true, "BUILD_scaffolding" );			
		//Allies
		SetAvailableMapGoals( TEAM.ALLIES, true, "DEFEND_d_gold.*" );
		SetAvailableMapGoals( TEAM.ALLIES, true, "PLANT_scaffolding" );		
		//Gold			
		SetAvailableMapGoals( TEAM.AXIS, true, "FLAG_gold" );
		SetAvailableMapGoals( TEAM.AXIS, true, "CAPPOINT_cap_gold" );

		bprint( "dynawall2_Destroyed" );
	},	
			
	td_Destroyed = function( trigger )   {
		if ( TestMap )  { return; }
		bprint( "td_Destroyed" );
	},
	
	td_Built = function( trigger )   {
		if ( TestMap )  { return; }
		bprint( "td_Destroyed" );
	},	

	gold_Stolen = function( trigger )   {
		if ( TestMap )  { return; }

		SetAvailableMapGoals( TEAM.AXIS, false, "ATTACK_a_gold_.*" );
		SetAvailableMapGoals( TEAM.AXIS, true, "ATTACK_a_escape_.*" );		
		//Allies
		SetAvailableMapGoals( TEAM.ALLIES, false, "DEFEND_d_gold.*" );
		SetAvailableMapGoals( TEAM.ALLIES, true, "DEFEND_d_escape.*" );	

		bprint( "gold_Stolen" );
	},

	gold_Returned = function( trigger )   {
		if ( TestMap )  { return; }

		SetAvailableMapGoals( TEAM.AXIS, true, "ATTACK_a_gold_.*" );
		SetAvailableMapGoals( TEAM.AXIS, false, "ATTACK_a_escape_.*" );		
		//Allies
		SetAvailableMapGoals( TEAM.ALLIES, true, "DEFEND_d_gold.*" );
		SetAvailableMapGoals( TEAM.ALLIES, false, "DEFEND_d_escape.*" );	

		bprint( "gold_Returned" );
	},

};


//============ GLOBAL  MAP LOAD  ====================

global OnMapLoad = function()
{
	if ( TestMapOn )  { ETUtil.AutoTestMap(); }

	if ( GetModName() == "etmain"  )   {
		//Only show prints in buildtime
		Map.BuildTime = true; 
	}
	
	bprint( "On load start" );
  //MOVE GOALS FOR BETTER REACHABLE
	Util.SetGoalOffset( -10, 252,  180, "PLANT_boat_barrier" );
	
	//GOAL PROPERTIES
      SetMapGoalProperties( "ATTACK_.*", {mincamptime=5, maxcamptime=25});
	SetMapGoalProperties( "DEFEND_.*", {mincamptime=99, maxcamptime=999});
      SetMapGoalProperties( "SNIPE_.*", {mincamptime=30, maxcamptime=70});
	SetMapGoalProperties( "MOUNTMG42_.*", {mincamptime=30, maxcamptime=99});

   //DEFAULT BIAS GOALS
  	SetGoalPriority( "MOUNTMG42_.*", 1.5 ); 		//default mount MG's
  	SetGoalPriority( "BUILD_.*", 2.0 );		//Default construct
  	SetGoalPriority( "PLANT_.*", 2.0 );			//Default dyno
  	SetGoalPriority( "DEFEND_.*", 2.5 );					//Default defend
   	SetGoalPriority( "ATTACK_.*", 2.5 );					//Default attack
   	//SetGoalPriority( "GO_.*", 0.5 );  						//Default Goto spots
  	SetGoalPriority( "SNIPE_.*", 2.5 ); 			//Default Sniper spots  

	//SPECIAL BIAS GOALS

	//-------------Goalname, Priority, Team, Class
	SetGoalPriority("DEFEND.*", 0.5, 0, CLASS.ENGINEER);
	SetGoalPriority("ATTACK.*", 0.5, 0, CLASS.ENGINEER);
	SetGoalPriority("MOUNTMG42.*", 0.5, 0, CLASS.ENGINEER);
	SetGoalPriority("FLAG.*", 0.5, 0, CLASS.ENGINEER);   

  	SetGoalPriority( "ROUTE_.*", 3.5 );	//crapshoot: this shouldn't be necessary	
  	SetGoalPriority( "ATTACK_a_boat_.*", 6.0 );
  	SetGoalPriority( "BUILD_scaffolding", 5.0 ); 
  	SetGoalPriority( "PLANT_boat_barrier", 4.0 );
  	SetGoalPriority( "PLANT_temple_entrance_door", 4.5 );	  
  	SetGoalPriority( "BUILD_boat_construct", 5.0 );	  
	    	
  	SetGoalPriority( "FLAG_ammo", 3.0 );   
  	SetGoalPriority( "FLAG_gold", 3.0 ); 
	  	 
	//Goals
	ETUtil.DisableGoal(".*");   	//disable all
	//Fake switch for quick start moving the boat
	Map.Switches.BoatStart.LimitTeam =  (1<<TEAM.AXIS);	
	    	
	SetAvailableMapGoals( TEAM.AXIS, true, "BUILD_boat_construct" );	  	
	SetAvailableMapGoals( TEAM.AXIS, true, "MOVER_boat" );	 
	SetAvailableMapGoals( TEAM.AXIS, true, "ATTACK_a_boat_1" );
	
	//SetAvailableMapGoals( TEAM.AXIS, true, "GO_g_repair_.*" );
	SetAvailableMapGoals( TEAM.AXIS, true, "PLANT_boat_barrier" );
	SetAvailableMapGoals( TEAM.AXIS, true, "ATTACK_a_barrier_.*" );
	SetAvailableMapGoals( TEAM.AXIS, true, "SNIPE_s_barrier_x.*" );
	SetAvailableMapGoals( TEAM.AXIS, true, "MOUNTMG42_473" );
	SetAvailableMapGoals( TEAM.AXIS, true, "REPAIRMG42_473" );					
	
	//Allies goals	
	SetAvailableMapGoals( TEAM.ALLIES, true, "BUILD_boat_barrier" ); 
	SetAvailableMapGoals( TEAM.ALLIES, true, "MOVER_boat" );
	SetAvailableMapGoals( TEAM.ALLIES, true, "SNIPE_s_barrier_l.*" );	
	SetAvailableMapGoals( TEAM.ALLIES, true, "DEFEND_d_barrier_.*" );	
	
	
	//crapshoot: no GO goals in 0.7 - get the position from the wp name
	//BUILD_boat_construct don't work, use BUILD_scaffolding instead
	//Util.SetPositionGoal( "BUILD_scaffolding", "GO_g_repair_1" );
	//Extra goal for the boatbarrier
	//Util.SetPositionGoal( "PLANT_temple_entrance_door", "GO_BarrierDyno" );	

    //Boat
	OnTrigger( "^1The boat has been damaged!", Map.boat_Damaged );
	OnTrigger( "^4The boat has been repaired!", Map.boat_Repaired );
	//Brickwall
	OnTrigger( "^4The brick wall has been shot down", Map.brickwall_Down );		
	//Barrier
	OnTrigger( "^dAllied team has built the boat barrier!", Map.boat_barrier_Built );
	OnTrigger( "^dAxis team has destroyed the boat barrier!", Map.boat_barrier_Destroyed );	
	OnTrigger( "^4The second barrier has been blown", Map.Past_Barrier2 );	
    //Generator
	OnTrigger( "^4Axis team has fixed the generator!", Map.generator_Built );
	OnTrigger( "^1The generator broke down!", Map.generator_Destroyed );
	OnTrigger( "^1Allied team has broken the generator!", Map.generator_Destroyed );	
	//Uppergate
	OnTrigger( "^dAxis has closed the upper gate!",   Map.upper_gate_Closed );
	OnTrigger( "^dAllies has closed the upper gate!", Map.upper_gate_Closed );
	OnTrigger( "^dAxis has opened the upper gate!",   Map.upper_gate_Opened);
	OnTrigger( "^dAllies has opened the upper gate!", Map.upper_gate_Opened );
	//Waterlevel
	OnTrigger( "^dAxis has lowered the water!", Map.waterlevel_Lowered ); 
    OnTrigger( "^dAllies has lowered the water!", Map.waterlevel_Lowered ); 	
	OnTrigger( "^dAxis has raised the water!", Map.waterlevel_Raised ); 
    OnTrigger( "^dAllies has raised the water!", Map.waterlevel_Raised );    
	//Lowergate
	OnTrigger( "^dAxis has opened the lower gate!", Map.lower_gate_Opened ); 	
	OnTrigger( "^dAllies has opened the lower gate!", Map.lower_gate_Opened ); 
	OnTrigger( "^dAxis has closed the lower gate!", Map.lower_gate_Closed );	
	OnTrigger( "^dAllies has closed the lower gate!", Map.lower_gate_Closed );	

	//boat is through lower gate
	OnTrigger( "^1The boat is entering the floodgate  !", Map.Past_LowerGate );	
	//boat is through lift
	OnTrigger( "^1The boat is through the floodgate  !", Map.Past_UpperGate );	
	OnTrigger( "^4The temple entrance has been destroyed", Map.templedoor_Destroyed );	
	//Finish boat tour, start second part of level	
	//========================================================================

	OnTrigger( "^1Axis have breached the Temple entrance!", Map.dynawall_Destroyed );

	//Ammo
	OnTrigger( "^1Axis has stolen the ammo !", Map.ammo_Stolen );
	OnTrigger( "^4Allies has returned the ammo !", Map.ammo_Returned );			
	//Gun
	OnTrigger( "^dAxis team has built the Gun!", Map.const_gun_Built );
	OnTrigger( "^dAllied team has destroyed the Gun!", Map.const_gun_Destroyed );
	OnTrigger( "^1Axis has loaded the gun !", Map.gun_Loaded );
	OnTrigger( "^dThe gun is ready to fire!", Map.gun_Ready );	
	OnTrigger( "^4The Pyramid entrance has been destroyed", Map.gun_Fired );
	
	OnTrigger( "^dThe scaffolding has been built", Map.td_Built );
	OnTrigger( "^dThe scaffolding has been destroyed", Map.td_Destroyed );	
	//Gold
	OnTrigger( "Axis have stolen The Gold Crate!", Map.gold_Stolen );
	OnTrigger( "Allies have returned The Gold Crate!", Map.gold_Returned );	
	//OnTrigger( "^4Axis got away with the gold ^d!!!!!!!!!!", Map.gold_Save );	
	
	OnTrigger( "^dAxis has breached the courtyard floor!", Map.cracked_floor_Destroyed );
	OnTrigger( "^1Axis has breached the Sarcophagus room wall!", Map.dynawall2_Destroyed );

	//Trigger for the Boat pos
	Util.OnTriggerPosition( "MOVER_boat", "a_boat_1",  180.0, Map.BoatPos_wp1   );
	Util.OnTriggerPosition( "MOVER_boat", "a_boat_2",  180.0, Map.BoatPos_wp2   );
	Util.OnTriggerPosition( "MOVER_boat", "a_boat_3",  180.0, Map.BoatPos_wp3   );
	Util.OnTriggerPosition( "MOVER_boat", "a_boat_4",  180.0, Map.BoatPos_wp4   );
	Util.OnTriggerPosition( "MOVER_boat", "a_boat_4b", 180.0, Map.BoatPos_wp4b  );	
	Util.OnTriggerPosition( "MOVER_boat", "a_boat_5",  180.0, Map.BoatPos_wp5   );
	Util.OnTriggerPosition( "MOVER_boat", "a_boat_6",  180.0, Map.BoatPos_wp6   );
	Util.OnTriggerPosition( "MOVER_boat", "a_boat_7",  180.0, Map.BoatPos_wp7   );
	Util.OnTriggerPosition( "MOVER_boat", "a_boat_8",  180.0, Map.BoatPos_wp8   );
	Util.OnTriggerPosition( "MOVER_boat", "a_boat_9",  180.0, Map.BoatPos_wp9   );
	Util.OnTriggerPosition( "MOVER_boat", "a_boat_10", 180.0, Map.BoatPos_wp10  );
	Util.OnTriggerPosition( "MOVER_boat", "a_boat_11", 180.0, Map.BoatPos_wp11  );
	Util.OnTriggerPosition( "MOVER_boat", "a_boat_12", 180.0, Map.BoatPos_wp12  );
	Util.OnTriggerPosition( "MOVER_boat", "a_boat_13", 180.0, Map.BoatPos_wp13  );
	Util.OnTriggerPosition( "MOVER_boat", "a_boat_14", 180.0, Map.BoatPos_wp14  );
	Util.OnTriggerPosition( "MOVER_boat", "a_boat_15", 180.0, Map.BoatPos_wp15  );
	Util.OnTriggerPosition( "MOVER_boat", "a_boat_16", 180.0, Map.BoatPos_wp16  );
	Util.OnTriggerPosition( "MOVER_boat", "a_boat_17", 180.0, Map.BoatPos_wp17  );
	Util.OnTriggerPosition( "MOVER_boat", "a_boat_18", 180.0, Map.BoatPos_wp18  );
	Util.OnTriggerPosition( "MOVER_boat", "a_boat_18b",180.0, Map.BoatPos_wp18b );
	Util.OnTriggerPosition( "MOVER_boat", "a_boat_19", 180.0, Map.BoatPos_wp19  );
	Util.OnTriggerPosition( "MOVER_boat", "a_boat_20", 180.0, Map.BoatPos_wp20  );
	Util.OnTriggerPosition( "MOVER_boat", "a_boat_21", 180.0, Map.BoatPos_wp21  );
	Util.OnTriggerPosition( "MOVER_boat", "a_boat_22", 180.0, Map.BoatPos_wp22  );
	Util.OnTriggerPosition( "MOVER_boat", "a_boat_23", 180.0, Map.BoatPos_wp23  );
	Util.OnTriggerPosition( "MOVER_boat", "a_boat_24", 180.0, Map.BoatPos_wp24  );
	Util.OnTriggerPosition( "MOVER_boat", "a_boat_25", 180.0, Map.BoatPos_wp25  );
	Util.OnTriggerPosition( "MOVER_boat", "a_boat_26", 180.0, Map.BoatPos_wp26  );
	Util.OnTriggerPosition( "MOVER_boat", "a_boat_27", 180.0, Map.BoatPos_wp27  );
	Util.OnTriggerPosition( "MOVER_boat", "a_boat_28", 180.0, Map.BoatPos_wp28  );
	Util.OnTriggerPosition( "MOVER_boat", "a_boat_29", 180.0, Map.BoatPos_wp29  );
	Util.OnTriggerPosition( "MOVER_boat", "a_boat_30", 180.0, Map.BoatPos_wp30  );
	Util.OnTriggerPosition( "MOVER_boat", "a_boat_31", 180.0, Map.BoatPos_wp31  );
	Util.OnTriggerPosition( "MOVER_boat", "a_boat_32", 180.0, Map.BoatPos_wp32  );
	Util.OnTriggerPosition( "MOVER_boat", "a_boat_33", 180.0, Map.BoatPos_wp33  );
	Util.OnTriggerPosition( "MOVER_boat", "a_boat_34", 180.0, Map.BoatPos_wp34  );
	Util.OnTriggerPosition( "MOVER_boat", "a_boat_35", 180.0, Map.BoatPos_wp35  );
	Util.OnTriggerPosition( "MOVER_boat", "a_boat_36", 180.0, Map.BoatPos_wp36  );
	Util.OnTriggerPosition( "MOVER_boat", "a_boat_37", 180.0, Map.BoatPos_wp37  );
	Util.OnTriggerPosition( "MOVER_boat", "a_boat_38", 180.0, Map.BoatPos_wp38  );
	Util.OnTriggerPosition( "MOVER_boat", "a_boat_39", 180.0, Map.BoatPos_wp39  );
	Util.OnTriggerPosition( "MOVER_boat", "a_boat_40", 180.0, Map.BoatPos_wp40  );
	Util.OnTriggerPosition( "MOVER_boat", "a_boat_41", 180.0, Map.BoatPos_wp41  );
	Util.OnTriggerPosition( "MOVER_boat", "a_boat_42", 180.0, Map.BoatPos_wp42  );
	Util.OnTriggerPosition( "MOVER_boat", "a_boat_42b",180.0, Map.BoatPos_wp42b );
	Util.OnTriggerPosition( "MOVER_boat", "a_boat_43", 180.0, Map.BoatPos_wp43  );
	Util.OnTriggerPosition( "MOVER_boat", "a_boat_44", 180.0, Map.BoatPos_wp44  );
	Util.OnTriggerPosition( "MOVER_boat", "a_boat_45", 180.0, Map.BoatPos_wp45  );
	Util.OnTriggerPosition( "MOVER_boat", "a_boat_46", 180.0, Map.BoatPos_wp46  );
	Util.OnTriggerPosition( "MOVER_boat", "a_boat_47", 180.0, Map.BoatPos_wp47  );
	Util.OnTriggerPosition( "MOVER_boat", "a_boat_48", 180.0, Map.BoatPos_wp48  );
	Util.OnTriggerPosition( "MOVER_boat", "a_boat_49", 180.0, Map.BoatPos_wp49  );
	Util.OnTriggerPosition( "MOVER_boat", "a_boat_50", 180.0, Map.BoatPos_wp50  );
	Util.OnTriggerPosition( "MOVER_boat", "a_boat_51", 180.0, Map.BoatPos_wp51  );
	Util.OnTriggerPosition( "MOVER_boat", "a_boat_52", 180.0, Map.BoatPos_wp52  );
	Util.OnTriggerPosition( "MOVER_boat", "a_boat_53", 180.0, Map.BoatPos_wp53  );
	Util.OnTriggerPosition( "MOVER_boat", "a_boat_54", 180.0, Map.BoatPos_wp54  );
	Util.OnTriggerPosition( "MOVER_boat", "a_boat_55", 180.0, Map.BoatPos_wp55  );
	Util.OnTriggerPosition( "MOVER_boat", "a_boat_56", 180.0, Map.BoatPos_wp56  );
	Util.OnTriggerPosition( "MOVER_boat", "a_boat_57", 180.0, Map.BoatPos_wp57  );
	Util.OnTriggerPosition( "MOVER_boat", "a_boat_58", 180.0, Map.BoatPos_wp58  );
	Util.OnTriggerPosition( "MOVER_boat", "a_boat_59", 180.0, Map.BoatPos_wp59  );
	Util.OnTriggerPosition( "MOVER_boat", "a_boat_60", 180.0, Map.BoatPos_wp60  );
	Util.OnTriggerPosition( "MOVER_boat", "a_boat_61", 180.0, Map.BoatPos_wp61  );
	Util.OnTriggerPosition( "MOVER_boat", "a_boat_62", 180.0, Map.BoatPos_wp62  );
	Util.OnTriggerPosition( "MOVER_boat", "a_boat_63", 180.0, Map.BoatPos_wp63  );
	Util.OnTriggerPosition( "MOVER_boat", "a_boat_63b",180.0, Map.BoatPos_wp63b );	
	Util.OnTriggerPosition( "MOVER_boat", "a_boat_64", 180.0, Map.BoatPos_wp64  );
	Util.OnTriggerPosition( "MOVER_boat", "a_boat_65", 180.0, Map.BoatPos_wp65  );
	Util.OnTriggerPosition( "MOVER_boat", "a_boat_66", 180.0, Map.BoatPos_wp66  );
	Util.OnTriggerPosition( "MOVER_boat", "a_boat_67", 180.0, Map.BoatPos_wp67  );
	Util.OnTriggerPosition( "MOVER_boat", "a_boat_68", 180.0, Map.BoatPos_wp68  );
	Util.OnTriggerPosition( "MOVER_boat", "a_boat_69", 180.0, Map.BoatPos_wp69  );
	Util.OnTriggerPosition( "MOVER_boat", "a_boat_70", 180.0, Map.BoatPos_wp70  );
	Util.OnTriggerPosition( "MOVER_boat", "a_boat_71", 180.0, Map.BoatPos_wp71  );
	Util.OnTriggerPosition( "MOVER_boat", "a_boat_72", 180.0, Map.BoatPos_wp72  );	
	
	Util.OnTriggerPosition( "MOVER_boat", "BoatPos_lift", 700.0, Map.BoatPos_inlift  );
		
    //Boat move thread	
    BoatThread = thread(ScriptGoals.WatchForWaypoint.BoatThreadFunc);
 
 
   // ********************************************************
   // *****  ROUTES   ****************************************
   // ********************************************************

 	
	bprint("Configuring Routes");
	
	MapRoutes =
	{
		//Axis routes		
    	PLANT_boat_barrier = 
        { 
            ROUTE_r_spawn_x1 = 	{	
				//tunnel route 
                ROUTE_r_barrier_a1 = { Weight = 3, ROUTE_r_barrier_a2 = {}, },
                //oposite river route
                ROUTE_r_barrier_c1 = { ROUTE_r_barrier_c2 = {},  },
                //above route
                ROUTE_r_barrier_d1 = { ROUTE_r_barrier_d2 = {},  },               
			},	
		},
		
    	ATTACK_a_barrier_x1 = 
        { 
            ROUTE_r_spawn_x1 = 	{	
				//tunnel route 
                ROUTE_r_barrier_a1 = { Weight = 3, ROUTE_r_barrier_a2 = {}, },
                //oposite river route
                ROUTE_r_barrier_c1 = { ROUTE_r_barrier_c2 = {},  },
                //above route
                ROUTE_r_barrier_d1 = { ROUTE_r_barrier_d2 = {},  },               
			},	
		},		
				
    	BUILD_generator = 
        { 
            ROUTE_r_spawn_x3 = 	{
				//Tunnel route	
                ROUTE_r_lift_a1 = { 
                	Weight = 2,
					ROUTE_r_lift_a2 = {Weight = 3,},
					ROUTE_r_lift_a3 = {},					 
				},
				//Floodwall route
				ROUTE_r_lift_b1 = {},  
                ROUTE_r_lift_c1 = { 
					ROUTE_r_lift_c2 = {},					 
				},				                     
			},	
		},
		
    	ATTACK_a_flooddoor_x2 = 
        { 
            ROUTE_r_spawn_x3 = 	{
				//Tunnel route	
                ROUTE_r_lift_a1 = { 
                	Weight = 3,
					ROUTE_r_lift_a2 = {Weight = 3,},
					ROUTE_r_lift_a3 = {},					 
				},
				//Floodwall route
				ROUTE_r_lift_b1 = {},  
                ROUTE_r_lift_c1 = { 
                	Weight = 3,
					ROUTE_r_lift_c2 = {},					 
				},				                     
			},	
		},		
						
    	PLANT_sarcophagus_room_door = 
        { 
            ROUTE_r_spawn_x8 = 	{	
				//Left side
                ROUTE_r_barrier2_a1 = { ROUTE_r_barrier2_a2 = {}, },
				//Right side                
                ROUTE_r_barrier2_b1 = { ROUTE_r_barrier2_b2 = {}, },           
			},	
		},
		
    	FLAG_ammo = 
        { 
            ROUTE_r_spawn_x7 = 	{	
				//`floorgap`
                ROUTE_r_stealgold_a1 = { 
					ROUTE_r_stealgold_a2 = {}, 
					ROUTE_r_stealgold_a3 = {},					
				},
				//Both sides               
                ROUTE_r_stealgold_b1 = {},
				ROUTE_r_stealgold_c1 = {},           
			},	
		},		
		
		//Allies Routes
    	PLANT_generator = 
        { 
            ROUTE_r_spawn_l3 = 	{
				ROUTE_r_flood_a1 = {},
				ROUTE_r_flood_b1 = {},					                     
			},	
		},			
		
	    DEFEND_d_flooddoor_l1 = 
        { 
            ROUTE_r_spawn_l3 = 	{
				ROUTE_r_flood_a1 = {},
				ROUTE_r_flood_b1 = {},					                     
			},	
		},					
		
	};		
		
	// Copy routes  barrier
	MapRoutes.ATTACK_a_barrier_x2 = MapRoutes.ATTACK_a_barrier_x1;
	MapRoutes.ATTACK_a_barrier_x3 = MapRoutes.ATTACK_a_barrier_x1;
	MapRoutes.ATTACK_a_barrier_x4 = MapRoutes.ATTACK_a_barrier_x1;	
	// Copy routes  lift  asis
	MapRoutes.ATTACK_a_flooddoor_x4 = MapRoutes.ATTACK_a_flooddoor_x2;
	MapRoutes.ATTACK_a_flooddoor_x5 = MapRoutes.ATTACK_a_flooddoor_x2;
	// Copy routes  Steal gold
	MapRoutes.ATTACK_a_ammo_x1 = MapRoutes.FLAG_ammo;
	MapRoutes.ATTACK_a_ammo_x2 = MapRoutes.FLAG_ammo;		
	MapRoutes.ATTACK_a_ammo_x3 = MapRoutes.FLAG_ammo;	
	// Copy routes  Dynowall2
	MapRoutes.ATTACK_a_wall2_x1 = MapRoutes.PLANT_sarcophagus_room_door;	
	MapRoutes.ATTACK_a_wall2_x2 = MapRoutes.PLANT_sarcophagus_room_door;	
	MapRoutes.ATTACK_a_wall2_x3 = MapRoutes.PLANT_sarcophagus_room_door;	
	// Copy routes  lift  asis
	MapRoutes.DEFEND_d_flooddoor_l2	= MapRoutes.DEFEND_d_flooddoor_l1;
	MapRoutes.DEFEND_d_flooddoor_l3	= MapRoutes.DEFEND_d_flooddoor_l1;					

	bprint( "Routes loaded" );		
   
	Util.UpdateSwitchData();
	Util.Routes(MapRoutes);
	bprint( "Routes loaded" );
	bprint( "OnMapLoad done" );
};


//============ ONBOTJOIN  ====================
global OnBotJoin = function( bot )
{
	bot.TargetBreakableDist = 100.0;
	bot.MaxViewDistance = 2500.0;
	team = bot.GetTeam();
	class = bot.GetClass();

	if( class == CLASS.COVERTOPS )  {
    	if ( bot.HasWeapon(WEAPON.K43) || bot.HasWeapon(WEAPON.GARAND) || bot.HasWeapon(WEAPON.FG42))  {
			bprint("Sniper joined");
      		bot.MaxViewDistance = 10000;
    	}
	}

    // ===== Threads  =============
	//Killing existing threads
  	if(bot.WaypointThread)    {  threadKill(bot.WaypointThread);   }
  	if(bot.WaypointThread2)   {  threadKill(bot.WaypointThread2);  }
	//Starting new threads
	if ( bot.GetTeam() == TEAM.AXIS)  {
  		bot.WaypointThread  = bot:thread(ScriptGoals.WatchForWaypoint.EscortThreadFunc); 
  		bot.WaypointThread2 = bot:thread(ScriptGoals.WatchForWaypoint.StraffeThreadFunc);   		
  		bprint("Creating Threads for bot: ", bot.Name);
  	}
    // ---- end Bot Threads 
			 		 	
};

//============ ONBOTLEAVE  ====================
global OnBotLeave = function( bot )
{
  	if(bot.WaypointThread)  {threadKill(bot.WaypointThread); }
  	if(bot.WaypointThread2)  {threadKill(bot.WaypointThread2); }
};

//=========== Screen Prints ====================
global bprint = function(a,b,c,d,e,f,g)   {	
 	//  Build print only shows the prints on screen
 	//  in build time (development). If another Mod then
 	//  Omnibot is active, there is no print on the screen
 
 	if (a==null) {a="";}
 	if (b==null) {b="";}
	if (c==null) {c="";}
 	if (d==null) {d="";}
 	if (e==null) {e="";}
 	if (f==null) {f="";}
 	if (g==null) {g="";}
				 	
	//Re - enable boat attack	
	if (Map.BuildTime)  {
		print(a,b,c,d,e,f,g);			
	}
};  


// =======================================================
// =========  THREADS     ================================
// =======================================================


ScriptGoals.WatchForWaypoint = 
{
	//Straffe at end of ropeladder
	StraffeThreadFunc = function()   {	
	   	wppos = Util.GetWpNamePosition("climb_rope");   
	   	while (true)   {
	        if (Map.ThreadStop) {
	    		bprint("StraffeThread is stopping");            	
				break;   //Stop the thread
			}	   		
	      	if (this.DistanceTo(wppos) < 60)  {
		     	bprint( "Top rope reached, do straffe");
			 	sleep(0.5);
				this.SetScriptControlled(true);
			    this.HoldButton(BTN.STRAFE_L, 1);
				sleep(0.5);
				this.SetScriptControlled(false);
	    	}
			sleep(0.5); 			   
		}
  	},
	  	
	
    //Check if boat is moving
    BoatThreadFunc = function()   {
	    bprint("Boat moving check is start");
        goal = GetGoal( "MOVER_boat" ); 
        Boatpos_prev = GetEntPosition( goal.GetEntity() );	    
   
		while (true)   {
            goal = GetGoal( "MOVER_boat" ); 
            Boatpos_now = GetEntPosition( goal.GetEntity() ); 
            
            if (Map.ThreadStop) {
	    		bprint("BoatThread is stopping");            	
				break;   //Stop the thread
			}			
		  	if ( Boatpos_prev != Boatpos_now )   {
		  		if ( !Map.BoatIsMoving )  { bprint("Boat is moving"); }
            	Map.BoatIsMoving = true;     	
			}  else  {
				if ( Map.BoatIsMoving )  { bprint("Boat stopted moving"); }
            	Map.BoatIsMoving = false;				
			}
		  	Boatpos_prev = Boatpos_now;
			sleep(0.5);                        
        }
	},

	//Boat escorting
	EscortThreadFunc = function()   {
		bprint("Boat escort thread start");
		while (true)  {
            if (Map.ThreadStop) {
	    		bprint("Escort Thread stopped");
				Map.BoatAttack = false;            	
				break;   //Stop the thread
			}						
			BoatPos =  "a_boat_" + Map.BoatAtWp;
			wppos = Util.GetWpNamePosition(BoatPos); 
			if (this.DistanceTo(wppos) < 100 && Map.BoatAttack)  {
				bprint("Reached boatconsole");
				this.SetScriptControlled(true);
				this.HoldButton(BTN.PRONE, 0);
				bprint("Disable movement");												
			    this.EnableMovement(false);
				this.SetScriptControlled(false);			    
		    
			    sleep (1.5); 
			    if ( Map.BoatIsMoving )   {
			    	bprint("On moving boat, go stay there");
					ScriptGoals.BotControl.FreezeBots(this); 						
				}
				bprint("Enable movement");
		    	this.EnableMovement(true);
		    	this.ReleaseButton(BTN.PRONE);
				sleep (2.0); 
		    }
		  	sleep (0.5);
		}
	}, 
};


ScriptGoals.BotControl = 
{
	FreezeBots = function(bot)  { 
		bprint("start freezing bot");		
    	dowhile ( bot.Health > 0 && Map.BoatIsMoving && Map.BoatAttack )   { 
			sleep( 0.5 );
            yield(); 
    	} 
 		bprint("stop freezing bot"); 
	},
}; 


