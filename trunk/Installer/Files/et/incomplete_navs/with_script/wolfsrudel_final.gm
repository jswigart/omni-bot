//==========================================================================================
//
//	Omni-bot 0.81 script for Wolfsrudel final, by Tardis
//
//	Who 		When			What
//------------------------------------------------------------------------------------------
//	d00d		03 December 2010	added trigger strings
//	Tardis		01 December 2010	initial wolfsrudel_final script
//	d00d		15 October 2009		wolfsrudel3_final for 0.8
//	Blindman	unknown			original waypoints
//
//	Many thanks to BOK Naerling for testing and suggestions
//
//==========================================================================================


global Map =
{
	Debug = 1, // please set to zero before distributing your script
	ShowMovers = false,

	Allied_Command_Post_Dyno = 0,
	Antenna_Defense_Dyno = 0,
	Axis_Command_Post_Dyno = 0,
	Bunker_Sidewall_Dyno = 0,
	MG_42_Dyno = 0,
	MG_42_Nest_Dyno = 0,
	Main_Radiomast_Dyno = 0,
	Mainbunkergate_Dyno = 0,
	Sidewall_Dyno = 0,
	Woodenbarrier_Dyno = 0,
	bunker_secured = false,
	box1status = "home", // "home", "taken", "secured"
	box2status = "home", // "home", "taken", "secured"
	DefendingTeam = TEAM.AXIS,


	Allied_Command_Post_Built = function( trigger )
	{
		if ( TestMap )
			{ return; }

		Util.MapDebugPrint( "Allied_Command_Post_Built" );
	},

	Antenna_Defense_Built = function( trigger )
	{
		if ( TestMap )
			{ return; }
		SetAvailableMapGoals( TEAM.AXIS, false, "AIRSTRIKE_radio" );
		Util.MapDebugPrint( "Antenna_Defense_Built" );
	},

	Axis_Command_Post_Built = function( trigger )
	{
		if ( TestMap )
			{ return; }

		Util.MapDebugPrint( "Axis_Command_Post_Built" );
	},

	Woodenbarrier_Built = function( trigger )
	{
		if ( TestMap )
			{ return; }
		SetAvailableMapGoals( TEAM.ALLIES, false, "ROUTE_woodendoor1" );
		SetAvailableMapGoals( TEAM.ALLIES, false, "ROUTE_woodendoor2" );
		Util.MapDebugPrint( "Woodenbarrier_Built" );
	},

	Allied_Command_Post_Planted = function( trigger )
	{
		if ( TestMap )
			{ return; }

		Map.Allied_Command_Post_Dyno += 1;
		Util.MapDebugPrint( "Allied_Command_Post_Planted" );
	},

	Antenna_Defense_Planted = function( trigger )
	{
		if ( TestMap )
			{ return; }

		Map.Antenna_Defense_Dyno += 1;
		Util.MapDebugPrint( "Antenna_Defense_Planted" );
	},

	Axis_Command_Post_Planted = function( trigger )
	{
		if ( TestMap )
			{ return; }

		Map.Axis_Command_Post_Dyno += 1;
		Util.MapDebugPrint( "Axis_Command_Post_Planted" );
	},

	Bunker_Sidewall_Planted = function( trigger )
	{
		if ( TestMap )
			{ return; }

		Map.Bunker_Sidewall_Dyno += 1;
		Util.MapDebugPrint( "Bunker_Sidewall_Planted" );
	},

	Main_Radiomast_Planted = function( trigger )
	{
		if ( TestMap )
			{ return; }

		Map.Main_Radiomast_Dyno += 1;
		Util.MapDebugPrint( "Main_Radiomast_Planted" );
	},

	Mainbunkergate_Planted = function( trigger )
	{
		if ( TestMap )
			{ return; }

		Map.Mainbunkergate_Dyno += 1;
		Util.MapDebugPrint( "Mainbunkergate_Planted" );
	},

	Sidewall_Planted = function( trigger )
	{
		if ( TestMap )
			{ return; }

		Map.Sidewall_Dyno += 1;
		Util.MapDebugPrint( "Sidewall_Planted" );
	},

	Woodenbarrier_Planted = function( trigger )
	{
		if ( TestMap )
			{ return; }

		Map.Woodenbarrier_Dyno += 1;
		Util.MapDebugPrint( "Woodenbarrier_Planted" );
	},

	Allied_Command_Post_Defused = function( trigger )
	{
		if ( TestMap )
			{ return; }

		Map.Allied_Command_Post_Dyno -= 1;
		Util.MapDebugPrint( "Allied_Command_Post_Defused" );
	},

	Antenna_Defense_Defused = function( trigger )
	{
		if ( TestMap )
			{ return; }

		Map.Antenna_Defense_Dyno -= 1;
		Util.MapDebugPrint( "Antenna_Defense_Defused" );
	},

	Axis_Command_Post_Defused = function( trigger )
	{
		if ( TestMap )
			{ return; }

		Map.Axis_Command_Post_Dyno -= 1;
		Util.MapDebugPrint( "Axis_Command_Post_Defused" );
	},

	Bunker_Sidewall_Defused = function( trigger )
	{
		if ( TestMap )
			{ return; }

		Map.Bunker_Sidewall_Dyno -= 1;
		Util.MapDebugPrint( "Bunker_Sidewall_Defused" );
	},

	Main_Radiomast_Defused = function( trigger )
	{
		if ( TestMap )
			{ return; }

		Map.Main_Radiomast_Dyno -= 1;
		Util.MapDebugPrint( "Main_Radiomast_Defused" );
	},

	Mainbunkergate_Defused = function( trigger )
	{
		if ( TestMap )
			{ return; }

		Map.Mainbunkergate_Dyno -= 1;
		Util.MapDebugPrint( "Mainbunkergate_Defused" );
	},

	Sidewall_Defused = function( trigger )
	{
		if ( TestMap )
			{ return; }

		Map.Sidewall_Dyno -= 1;
		Util.MapDebugPrint( "Sidewall_Defused" );
	},

	Woodenbarrier_Defused = function( trigger )
	{
		if ( TestMap )
			{ return; }

		Map.Woodenbarrier_Dyno -= 1;
		Util.MapDebugPrint( "Woodenbarrier_Defused" );
	},

	Allied_Command_Post_Destroyed = function( trigger )
	{
		if ( TestMap )
			{ return; }

		Map.Allied_Command_Post_Dyno = 0;

		Util.MapDebugPrint( "Allied_Command_Post_Destroyed" );
	},

	Antenna_Defense_Destroyed = function( trigger )
	{
		if ( TestMap )
			{ return; }

		Map.Antenna_Defense_Dyno = 0;
		SetAvailableMapGoals( TEAM.AXIS, true, "AIRSTRIKE_radio" );
		Util.MapDebugPrint( "Antenna_Defense_Destroyed" );
	},

	Axis_Command_Post_Destroyed = function( trigger )
	{
		if ( TestMap )
			{ return; }

		Map.Axis_Command_Post_Dyno = 0;

		Util.MapDebugPrint( "Axis_Command_Post_Destroyed" );
	},

	Bunker_Sidewall_Destroyed = function( trigger )
	{
		if ( TestMap )
			{ return; }

		Map.Bunker_Sidewall_Dyno = 0;
		SetAvailableMapGoals( TEAM.ALLIES, true, "ROUTE_sidewall_left" );
		SetAvailableMapGoals( TEAM.AXIS, false, "DEFEND_start.*" );
		SetAvailableMapGoals( TEAM.AXIS, true, "ROUTE_sidewall_left" );
		SetAvailableMapGoals( TEAM.AXIS, true, "DEFEND_fort.*" );
		SetAvailableMapGoals( TEAM.AXIS, true, "DEFEND_radiomast.*" );
		SetAvailableMapGoals( TEAM.AXIS, true, "DEFEND_radarparts.*" );
		SetAvailableMapGoals( TEAM.AXIS, true, Map.Mount_Fort_MG );
		SetAvailableMapGoals( TEAM.AXIS, true, Map.Repair_Fort_MG );
		Util.MapDebugPrint( "Bunker_Sidewall_Destroyed" );
	},

	Main_Radiomast_Destroyed = function( trigger )
	{
		if ( TestMap )
			{ return; }

		Map.Main_Radiomast_Dyno = 0;
		SetAvailableMapGoals( TEAM.AXIS, false, "SNIPE_fort4" );
		SetAvailableMapGoals( TEAM.AXIS, false, "SNIPE_fort5" );
		SetAvailableMapGoals( TEAM.AXIS, false, "SNIPE_fort6" );
		SetAvailableMapGoals( TEAM.AXIS, false, "DEFEND_radiomast.*" );
		SetAvailableMapGoals( TEAM.AXIS, false, "PLANTMINE_radiomast.*" );
		SetAvailableMapGoals( TEAM.AXIS, false, "BUILD_Antenna_Defense" );
		SetAvailableMapGoals( TEAM.AXIS, false, "AIRSTRIKE_radio" );
		SetAvailableMapGoals( TEAM.ALLIES, false, "PLANT_Antenna_Defense" );
		Util.MapDebugPrint( "Main_Radiomast_Destroyed" );
	},

	Mainbunkergate_Destroyed = function( trigger )
	{
		if ( TestMap )
			{ return; }

		Map.Mainbunkergate_Dyno = 0;
		Map.bunker_secured = true;
		SetAvailableMapGoals( TEAM.ALLIES, true, Repair_Bunker_MG );
		SetAvailableMapGoals( TEAM.ALLIES, true, Mount_Bunker_MG );
		SetAvailableMapGoals( TEAM.ALLIES, false, "ATTACK_bunkergate.*" );
		SetAvailableMapGoals( TEAM.ALLIES, true, "SNIPE_allies.*" );
		SetAvailableMapGoals( TEAM.ALLIES, false, Map.Mount_Spawn_MG );
		SetAvailableMapGoals( TEAM.ALLIES, false, Map.Repair_Spawn_MG );

		SetAvailableMapGoals( TEAM.AXIS, false, Repair_Bunker_MG );
		SetAvailableMapGoals( TEAM.AXIS, false, Mount_Bunker_MG );
		SetAvailableMapGoals( TEAM.AXIS, false, "DEFEND_forwardbunker.*" );
		SetAvailableMapGoals( TEAM.AXIS, false, "HEALTHCAB_t10000346" );
		SetAvailableMapGoals( TEAM.AXIS, false, "AMMOCAB_t10000345" );
		SetAvailableMapGoals( TEAM.AXIS, true, "SNIPE_fort.*" );
		SetAvailableMapGoals( TEAM.AXIS, true, Map.Mount_Fort_MG );
		SetAvailableMapGoals( TEAM.AXIS, true, Map.Repair_Fort_MG );

		foreach ( bot in BotTable )
		{
			if ( bot.GetTeam() == TEAM.ALLIES )
			{
				bot.ChangeSpawnPoint(0);
			}
		}
		Util.MapDebugPrint( "Mainbunkergate_Destroyed" );
	},

	Sidewall_Destroyed = function( trigger )
	{
		if ( TestMap )
			{ return; }

		Map.Sidewall_Dyno = 0;
		SetAvailableMapGoals( TEAM.ALLIES, true, "ROUTE_sidewall_right" );
		SetAvailableMapGoals( TEAM.AXIS, true, "ROUTE_sidewall_right" );
		SetAvailableMapGoals( TEAM.AXIS, true, "DEFEND_fort.*" );
		SetAvailableMapGoals( TEAM.AXIS, true, "DEFEND_radiomast.*" );
		SetAvailableMapGoals( TEAM.AXIS, true, "DEFEND_radarparts.*" );
		SetAvailableMapGoals( TEAM.AXIS, true, Map.Mount_Fort_MG );
		SetAvailableMapGoals( TEAM.AXIS, true, Map.Repair_Fort_MG );
		Util.MapDebugPrint( "Sidewall_Destroyed" );
	},

	Woodenbarrier_Destroyed = function( trigger )
	{
		if ( TestMap )
			{ return; }

		Map.Woodenbarrier_Dyno = 0;
		SetAvailableMapGoals( TEAM.ALLIES, true, "ROUTE_woodendoor1" );
		SetAvailableMapGoals( TEAM.ALLIES, true, "ROUTE_woodendoor2" );
		Util.MapDebugPrint( "Woodenbarrier_Destroyed" );
	},

	emitterbox1_Taken = function( trigger )
	{
		if ( TestMap )
			{ return; }
		Map.box1status = "taken";

		if ( Map.box2status != "home" )
		{
			SetAvailableMapGoals(TEAM.AXIS, false, "DEFEND_radarpart.*");
		}

		SetAvailableMapGoals( TEAM.AXIS, true, "DEFEND_cappoint.*" );
		SetAvailableMapGoals( TEAM.ALLIES, true, "DEFEND_cappoint.*" );
		SetGoalPriority( "DEFEND_cappoint.*", 0.8 );
		Util.MapDebugPrint( "emitterbox1_Taken" );
	},

	emitterbox2_Taken = function( trigger )
	{
		if ( TestMap )
			{ return; }
		Map.box2status = "taken";

		if ( Map.box1status != "home" )
		{
			SetAvailableMapGoals( TEAM.AXIS, false, "DEFEND_radarpart.*" );
		}
		SetAvailableMapGoals( TEAM.AXIS, true, "DEFEND_cappoint.*" );
		SetAvailableMapGoals( TEAM.ALLIES, true, "DEFEND_cappoint.*" );
		SetGoalPriority( "DEFEND_cappoint.*", 0.8 );
		Util.MapDebugPrint( "emitterbox2_Taken" );
	},

	emitterbox1_Returned = function( trigger )
	{
		if ( TestMap )
			{ return; }
		Map.box1status = "home";

		if ( Map.box2status != "taken" )
		{
			SetAvailableMapGoals( TEAM.AXIS, false, "DEFEND_cappoint.*" );
			SetAvailableMapGoals( TEAM.ALLIES, false, "DEFEND_cappoint.*" );
		}
		SetAvailableMapGoals(TEAM.AXIS, true, "DEFEND_radarpart.*");
		Util.MapDebugPrint( "emitterbox1_Returned" );
	},

	emitterbox2_Returned = function( trigger )
	{
		if ( TestMap )
			{ return; }
		Map.box2status = "home";

		if ( Map.box1status != "taken" )
		{
			SetAvailableMapGoals( TEAM.AXIS, false, "DEFEND_cappoint.*" );
			SetAvailableMapGoals( TEAM.ALLIES, false, "DEFEND_cappoint.*" );
		}
		SetAvailableMapGoals(TEAM.AXIS, true, "DEFEND_radarpart.*");
		Util.MapDebugPrint( "emitterbox2_Returned" );
	},

	emitterbox1_Secured = function( trigger )
	{
		if ( TestMap )
			{ return; }
		Map.box1status = "secured";
		if ( Map.box2status == "secured" )
		{
			SetAvailableMapGoals( TEAM.ALLIES, false, "SNIPE_compost" );
			SetAvailableMapGoals( TEAM.AXIS, false, "DEFEND_radarpart.*" );
			SetAvailableMapGoals( TEAM.AXIS, false, "DEFEND_cappoint.*" );
			SetAvailableMapGoals( TEAM.ALLIES, false, "DEFEND_cappoint.*" );
			SetAvailableMapGoals( TEAM.ALLIES, false, "PLANT_woodenbarrier" );
		}
		Util.MapDebugPrint( "emitterbox1_Secured" );
	},

	emitterbox2_Secured = function( trigger )
	{
		if ( TestMap )
			{ return; }
		Map.box2status = "secured";
		if ( Map.box1status == "secured" )
		{
			SetAvailableMapGoals( TEAM.ALLIES, false, "SNIPE_compost" );
			SetAvailableMapGoals( TEAM.AXIS, false, "DEFEND_radarpart.*" );
			SetAvailableMapGoals( TEAM.AXIS, false, "DEFEND_cappoint.*" );
			SetAvailableMapGoals( TEAM.ALLIES, false, "DEFEND_cappoint.*" );
			SetAvailableMapGoals( TEAM.ALLIES, false, "PLANT_woodenbarrier" );
		}
		Util.MapDebugPrint( "emitterbox2_Secured" );
	},

	forwardbunker_flag_Axis_Captured = function( trigger )
	{
		if ( TestMap )
			{ return; }
		SetAvailableMapGoals( TEAM.ALLIES, false, Repair_Bunker_MG );
		SetAvailableMapGoals( TEAM.ALLIES, false, Mount_Bunker_MG );
		SetAvailableMapGoals( TEAM.AXIS, true, Repair_Bunker_MG );
		SetAvailableMapGoals( TEAM.AXIS, true, Mount_Bunker_MG );
		Util.MapDebugPrint( "forwardbunker_flag_Axis_Captured" );
	},

	forwardbunker_flag_Allies_Captured = function( trigger )
	{
		if ( TestMap )
			{ return; }
		SetAvailableMapGoals( TEAM.ALLIES, true, Repair_Bunker_MG );
		SetAvailableMapGoals( TEAM.ALLIES, true, Mount_Bunker_MG );
		SetAvailableMapGoals( TEAM.AXIS, false, Repair_Bunker_MG );
		SetAvailableMapGoals( TEAM.AXIS, false, Mount_Bunker_MG );
		Util.MapDebugPrint( "forwardbunker_flag_Allies_Captured" );
	},

};

global OnMapLoad = function()
{
	if ( TestMapOn )
		{ Util.AutoTestMap(); }

	// Register callback functions
	OnTrigger( "Allied Command Post constructed. Charge speed increased!", Map.Allied_Command_Post_Built );
	OnTrigger( "The Antenna Defense has been constructed.", Map.Antenna_Defense_Built );
	OnTrigger( "Axis Command Post constructed. Charge speed increased!", Map.Axis_Command_Post_Built );
	OnTrigger( "The Woodenbarrier has been constructed.", Map.Woodenbarrier_Built );
	OnTrigger( "Planted at the Allied Command Post.", Map.Allied_Command_Post_Planted );
	OnTrigger( "Planted at the Antenna Defense.", Map.Antenna_Defense_Planted );
	OnTrigger( "Planted at the Axis Command Post.", Map.Axis_Command_Post_Planted );
	OnTrigger( "Planted at the Bunker Sidewall.", Map.Bunker_Sidewall_Planted );
	OnTrigger( "Planted at the Main Radiomast.", Map.Main_Radiomast_Planted );
	OnTrigger( "Planted at the Mainbunkergate.", Map.Mainbunkergate_Planted );
	OnTrigger( "Planted at the Sidewall.", Map.Sidewall_Planted );
	OnTrigger( "Planted at the Woodenbarrier.", Map.Woodenbarrier_Planted );
	OnTrigger( "Defused at the Allied Command Post.", Map.Allied_Command_Post_Defused );
	OnTrigger( "Defused at the Antenna Defense.", Map.Antenna_Defense_Defused );
	OnTrigger( "Defused at the Axis Command Post.", Map.Axis_Command_Post_Defused );
	OnTrigger( "Defused at the Bunker Sidewall.", Map.Bunker_Sidewall_Defused );
	OnTrigger( "Defused at the Main Radiomast.", Map.Main_Radiomast_Defused );
	OnTrigger( "Defused at the Mainbunkergate.", Map.Mainbunkergate_Defused );
	OnTrigger( "Defused at the Sidewall.", Map.Sidewall_Defused );
	OnTrigger( "Defused at the Woodenbarrier.", Map.Woodenbarrier_Defused );
	OnTrigger( "Axis team has destroyed the Allied Command Post!", Map.Allied_Command_Post_Destroyed );
	OnTrigger( "The Allies have destroyed the Antenna defense!", Map.Antenna_Defense_Destroyed );
	OnTrigger( "Allied team has destroyed the Axis Command Post!", Map.Axis_Command_Post_Destroyed );
	OnTrigger( "The Allies have breached the Bunkersidewall!", Map.Bunker_Sidewall_Destroyed );
	OnTrigger( "Allies have destroyed the Main Radio Mast!", Map.Main_Radiomast_Destroyed );
	OnTrigger( "Allies have breached the Main Entrance and secured the Forward Bunker!", Map.Mainbunkergate_Destroyed );
	OnTrigger( "The Allies have breached the Sidewall!", Map.Sidewall_Destroyed );
	OnTrigger( "The Allies have destroyed the Woodenbarrier!", Map.Woodenbarrier_Destroyed );
	OnTrigger( "Allies have stolen the West Radarparts!", Map.emitterbox1_Taken );
	OnTrigger( "Allies have stolen the East Radarparts!", Map.emitterbox2_Taken );
	OnTrigger( "Flag returned emitterbox1!", Map.emitterbox1_Returned );
	OnTrigger( "Flag returned emitterbox2!", Map.emitterbox2_Returned );
	OnTrigger( "Allies have secured the West Radar Parts!", Map.emitterbox1_Secured );
	OnTrigger( "Allies have secured the East Radar Parts!", Map.emitterbox2_Secured );
	OnTrigger( "Axis reclaim the Forward Bunker!", Map.forwardbunker_flag_Axis_Captured );
	OnTrigger( "allies_bunker_captured", Map.forwardbunker_flag_Allies_Captured );

	Util.DisableGoal( "PLANT_Main_Radiomast_.*" );
	Util.RemoveGoal( "PLANT_Main_Radiomast_1" );

	SetAvailableMapGoals( TEAM.ALLIES, false, "AIRSTRIKE_.*" );
	SetAvailableMapGoals( TEAM.ALLIES, false, "PLANTMINE_.*" );
	SetAvailableMapGoals( TEAM.ALLIES, false, "DEFEND_.*" );
	SetAvailableMapGoals( TEAM.ALLIES, false, "MOUNTMG42_.*" );
	SetAvailableMapGoals( TEAM.ALLIES, false, "REPAIRMG42_.*" );
	SetAvailableMapGoals( TEAM.ALLIES, false, Map.Mount_Spawn_MG );
	SetAvailableMapGoals( TEAM.ALLIES, true, Map.Mount_Bunker_MG );
	SetAvailableMapGoals( TEAM.ALLIES, true, Map.Repair_Bunker_MG );
	SetAvailableMapGoals( TEAM.ALLIES, false, Map.Repair_Spawn_MG );
	SetAvailableMapGoals( TEAM.ALLIES, false, "SNIPE_.*" );
	SetAvailableMapGoals( TEAM.ALLIES, true, "SNIPE_compost" );

	SetAvailableMapGoals( TEAM.AXIS, false, "AIRSTRIKE_.*" );
	SetAvailableMapGoals( TEAM.AXIS, true, "PLANTMINE_.*" );
	SetAvailableMapGoals( TEAM.AXIS, false, "SNIPE_.*" );
	SetAvailableMapGoals( TEAM.AXIS, false, Map.Mount_Spawn_MG );
	SetAvailableMapGoals( TEAM.AXIS, false, Map.Repair_Spawn_MG );
	SetAvailableMapGoals( TEAM.AXIS, false, Map.Mount_Fort_MG );
	SetAvailableMapGoals( TEAM.AXIS, false, Map.Repair_Fort_MG );
	SetAvailableMapGoals( TEAM.AXIS, false, "ATTACK.*" );
	SetAvailableMapGoals( TEAM.AXIS, false, "DEFEND.*" );
	SetAvailableMapGoals( TEAM.AXIS, true, "DEFEND_start.*" );
	SetAvailableMapGoals( TEAM.AXIS, true, "DEFEND_forwardbunker.*" );

	/*** PRIORITY ***/
	SetGoalPriority( "CHECKPOINT_forwardbunker_flag", 0.8 );
	SetGoalPriority( "CHECKPOINT_forwardbunker_flag", 0.7, CLASS.ENGINEER );
	SetGoalPriority( "PLANT_Forwardbunkerdoor", 0.82, TEAM.ALLIES, CLASS.ENGINEER );
	SetGoalPriority( "PLANT_Mainbunkergate", 0.81, TEAM.ALLIES, CLASS.ENGINEER );
	SetGoalPriority( "PLANT_Forwardbunkerdoor", 0.0, TEAM.ALLIES, CLASS.COVERTOPS );
	SetGoalPriority( "BUILD_Command_Post", 0.8, TEAM.ALLIES, CLASS.ENGINEER );
	SetGoalPriority( "PLANT_Woodenbarrier", 0.8, TEAM.ALLIES, CLASS.COVERTOPS );
	SetGoalPriority( "PLANT_Woodenbarrier", 0.0, TEAM.ALLIES, CLASS.ENGINEER );
	SetGoalPriority( "FLAG_emitterbox1", 0.8, TEAM.ALLIES );
	SetGoalPriority( "FLAG_emitterbox2", 0.81, TEAM.ALLIES );

	/*** GOAL POSITIONS ***/
	Util.SetGoalOffset( 0, -10, 0, "PLANT_Forwardbunkerdoor" );
	Util.SetGoalOffset( -10, 0, 0, "PLANT_Woodenbarrier" );

	// Max users per goal
	Util.SetMaxUsers( 2, "REVIVE_.*" );
	Util.SetMaxUsers( 2, "DEFUSE_.*" );
	Util.SetMaxUsers( 3, "FLAG_.*" );
	Util.SetMaxUsers( 1, "PLANTMINE_.*" );
	Util.SetMaxUsers( 1, "PLANT_.*" );
	Util.SetMaxUsers( 1, "BUILD_.*" );
	Util.SetMaxUsers( 1, "ATTACK_.*" );
	Util.SetMaxUsers( 1, "DEFEND_.*" );
	Util.SetMaxUsers( 1, "GRENADE_.*" );
	Util.SetMaxUsers( 1, "SNIPE_.*" );
	Util.SetMaxUsers( 1, "MOUNTMG42_.*" );
	Util.SetMaxUsers( 1, "MOBILEMG42_.*" );
	Util.SetMaxUsers( 1, "MOBILEMORTAR_.*" );
	Util.SetMaxUsers( 1, "AIRSTRIKE_.*" );
	Util.SetMaxUsers( 1, "CALLARTILLERY_.*" );

	// Camp times
	SetMapGoalProperties( "MOUNTMG42_.*", {MinCampTime=15, MaxCampTime=90} );
	SetMapGoalProperties( "MOBILEMG42_.*", {MinCampTime=10, MaxCampTime=60} );
	SetMapGoalProperties( "SNIPE_.*", {MinCampTime=10, MaxCampTime=80} );

	// Trigger regions
	iw1 = OnTriggerRegion( AABB(886.986,1651.562,-107.619,1229.688,1733.052,18.487), RegionTrigger.IntrusionWarning );
	iw2 = OnTriggerRegion( AABB(-520.193,1228.610,-100.474,-198.019,1466.299,20.148), RegionTrigger.IntrusionWarning );
	iw3 = OnTriggerRegion( AABB(-1246.095,2780.623,-77.464,-1124.188,2983.294,122.278), RegionTrigger.IntrusionWarning );
	iw4 = OnTriggerRegion( AABB(-438.591,3570.216,-116.766,-166.126,4001.469,92.246), RegionTrigger.IntrusionWarning );

	/*** ROUTES ***/
	MapRoutes =
	{
		CAPPOINT_cappoint2 =
		{
			ROUTE_objective =
			{
				ROUTE_frontdoor1 =
				{
					ROUTE_sidewall_left = {},
					ROUTE_sidewall_right = {},
					ROUTE_maingate = {},
				},
				ROUTE_woodendoor1 =
				{
					ROUTE_woodendoor2 =
					{
						ROUTE_sidewall_left = {},
						ROUTE_sidewall_right = {},
						ROUTE_maingate = {},
					}
				}
			},
		},
		BUILD_Allied_Command_Post =
		{
			ROUTE_cabinspawn =
			{
				ROUTE_backdoor = {},
				ROUTE_frontdoor =	{ ROUTE_logs = {} }
			},
			ROUTE_watertower =
			{
				ROUTE_left = {},
				ROUTE_right = {}
			}
		},
		PLANT_Forwardbunkerdoor =
		{
			ROUTE_cabinspawn =
			{
				ROUTE_hill =
				{
					ROUTE_right = {},
				},
			},
		},
		CHECKPOINT_forwardbunker_flag =
		{
			ROUTE_watertower =
			{
				ROUTE_left =
				{
					ROUTE_bunker = {},
					ROUTE_middle = {},
					ROUTE_logs = {},
				},
				ROUTE_right =
				{
					ROUTE_bunker = {},
					ROUTE_middle = {},
					ROUTE_tunnel = {},
				}
			},
			ROUTE_cabinspawn =
			{
				ROUTE_backdoor =
				{
					ROUTE_logs = {},
				},
				ROUTE_frontdoor =
				{
					ROUTE_bunker = {},
					ROUTE_middle = {},
					ROUTE_bunkerdoor = { ROUTE_tunnel = {} }
				},
				ROUTE_middle = {},
				ROUTE_bunkerdoor = {},
			},
			ROUTE_axisspawn =
			{
				ROUTE_axisdoor = {},
				ROUTE_gate = {},
				ROUTE_ladder = {},
			},
		},
		PLANT_Allied_Command_Post =
		{
			ROUTE_axisspawn =
			{
				ROUTE_axisdoor = {},
				ROUTE_gate = {},
				ROUTE_ladder = {},
			},
		},
		PLANT_Woodenbarrier =
		{
			ROUTE_bunkerspawn =
			{
				ROUTE_sidewall_left = {},
				ROUTE_sidewall_right = {},
				ROUTE_maingate = {},
			},
			ROUTE_cabinspawn =
			{
				ROUTE_backdoor =
				{
					ROUTE_logs = {},
					ROUTE_sidewall_left = {},
					ROUTE_sidewall_right = {},
					ROUTE_maingate = {},
				},
				ROUTE_frontdoor =
				{
					ROUTE_bunker = {},
					ROUTE_middle = {},
					ROUTE_bunkerdoor = { ROUTE_tunnel = {} },
					ROUTE_sidewall_left = {},
					ROUTE_sidewall_right = {},
					ROUTE_maingate = {},
				},
				ROUTE_middle = {},
				ROUTE_bunkerdoor = {},
			},
		}
	};
	MapRoutes.PLANT_Sidewall = MapRoutes.CHECKPOINT_forwardbunker_flag;
	MapRoutes.PLANT_Bunker_Sidewall = MapRoutes.CHECKPOINT_forwardbunker_flag;
	MapRoutes.PLANT_Mainbunkergate = MapRoutes.CHECKPOINT_forwardbunker_flag;
	MapRoutes.PLANT_Main_Radiomast = MapRoutes.PLANT_Woodenbarrier;
	MapRoutes.PLANT_Antenna_Defense = MapRoutes.PLANT_Woodenbarrier;
	MapRoutes.FLAG_emitterbox1 = MapRoutes.PLANT_Woodenbarrier;
	MapRoutes.FLAG_emitterbox2 = MapRoutes.PLANT_Woodenbarrier;
	MapRoutes.BUILD_Antenna_Defense = MapRoutes.PLANT_Allied_Command_Post;
	MapRoutes.BUILD_Woodenbarrier = MapRoutes.PLANT_Allied_Command_Post;

	Util.Routes(MapRoutes);

	SetAvailableMapGoals( TEAM.ALLIES, false, "ROUTE_sidewall_left" );
	SetAvailableMapGoals( TEAM.ALLIES, false, "ROUTE_sidewall_right" );
	SetAvailableMapGoals( TEAM.AXIS, false, "ROUTE_sidewall_left" );
	SetAvailableMapGoals( TEAM.AXIS, false, "ROUTE_sidewall_right" );

	Util.MapDebugPrint( "Omni-bot map script for " + GetMapName() + " executed." );
};

global OnBotJoin = function( bot )
{
	// Uncomment for shootable breakables
	//~bot.TargetBreakableDist = 90.0;
	// Only set MaxViewDistance on maps with limited sight (e.g. fog)
	bot.MaxViewDistance = 2400; //Snow

	// default all bots to spawning at the default location.
	bot.ChangeSpawnPoint(0);

	// half of the allies should spawn at the water tower
	if ( !Map.bunker_secured )
	{
		Util.ChangeBotSpawn( bot, TEAM.ALLIES, 4, 5 );
	}
};
