// This script contains functionality to allow bots to call for health when they need it

// These parameters are required
this.Name = "AskForHealth";		// The name of the goal.
this.Parent = "HighLevel";		// The name of the parent. This setting determines where in the state tree the goal will reside in.
this.SkipGetPriorityWhenActive = true;

// These parameters are optional
this.LimitToClass( CLASS.LIEUTENANT, CLASS.ENGINEER, CLASS.SOLDIER );

this.Initialize = function()
{
	if ( GetGameState() != "Playing" ) {
		this.Disable = true;
	}
	
	// Internal variables
	this.HealthThreshold = 50.0;
	this.RangeForPack = 1000.0;
	this.Counter = 0;
	this.Timeout = 1000;

	Util.MapDebugPrint(this.Name + " Initialized", true);
};

this.Enter = function()
{
	this.AddFinishCriteria(this.Pack, "deleted");
	this.AddFinishCriteria(this.Bot.GetGameEntity(), "health greaterthan", this.HealthThreshold);
};

this.Exit = function()
{
	this.Pack = null;
	this.ReleaseAimRequest();
};

this.GetPriority = function()
{
	while(1)
	{
		this.Counter += 1;

		if( this.Bot.Health < this.HealthThreshold && this.Bot.Health > 0 )
		{
			this.Pack = this.Bot.GetNearest( CAT.PICKUP, CLASS.HEALTH );

			if ( this.Pack && GetEntPosition(this.Pack) && this.Bot.DistanceTo(this.Pack) <= this.RangeForPack )
				{ this.Priority = 0.6; }
			else
			{
				if ( (this.Counter % 3 == 0) && (Util.AliveCount(this.Bot.GetTeam(), CLASS.MEDIC) > 0) && GetGameState() == "Playing" )
					{ this.Bot.SayVoice(VOICE.NEED_MEDIC); }
			}
		}
		
		sleep(10);
	}
};

this.Update = function()
{
	if ( this.Pack )
	{
		pos = GetEntPosition(this.Pack);
		if ( !pos || this.Goto(pos) == EVENT.PATH_FAILED )
		{
			this.Pack = null;
			this.Finished();
		}

		timeout = 0;
		while ( this.Pack && timeout < this.Timeout )
		{
			pos = GetEntPosition(this.Pack);

			if ( pos )
			{
				this.AddAimRequest( Priority.High, "position", pos );
				this.Bot.MoveTowards( pos );
			}
			else
			{
				this.Finished();
			}

			timeout += 50;
			yield();
		}
		this.Finished();
	}

	this.Finished();
};

