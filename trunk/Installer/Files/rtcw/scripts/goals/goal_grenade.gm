// This script contains functionality to allow bots to toss airstrikes from given waypoints

// These parameters are required
this.Name = "GRENADE";		// The name of the goal.
this.Parent = "HighLevel";		// The name of the parent. This setting determines where in the state tree the goal will reside in.
this.SkipGetPriorityWhenActive = true;

// These parameters are optional
//this.LimitToWeapon( WEAPON.ALLY_GRENADE, WEAPON.AXIS_GRENADE );

this.Initialize = function()
{
	this.Bot.QueryGoalsTable = table();
};

this.Enter = function()
{
	if (this.MapGoal.TraceEntity)
	{
		this.TargetEntity = this.MapGoal.TraceEntity;
	}
	else
	{
		goal = GetGoal(this.MapGoal.TargetGoal);

		if ( goal )
		{
			this.TargetEntity = goal.GetEntity();
		}
	}

	if ( !this.TargetEntity )
	{
		this.Finished();
	}

	if ( this.MapGoal.PrimeGrenade > 3 )
	{
		this.MapGoal.PrimeGrenade = 3;
	}

	if ( this.MapGoal.IgnoreDead ) {
		this.AddFinishCriteria(this.TargetEntity,"deleted");
	}
	else {
		this.AddFinishCriteria(this.TargetEntity,"hasentflag",ENTFLAG.DEAD);
	}

	if(!this.MarkInProgress(this.MapGoal)) {
		this.BlackboardDelay(5, this.MapGoal);
		this.Finished();
	}

	if ( this.Bot.GetTeam() == TEAM.ALLIES )
	{
		this.weapon = WEAPON.ALLY_GRENADE;
	}
	else if ( this.Bot.GetTeam() == TEAM.AXIS )
	{
		this.weapon = WEAPON.AXIS_GRENADE;
	}
};

this.Exit = function()
{
	if ( this.MapGoal.Stance == "crouch" )
	{
		this.Bot.ReleaseButton(BTN.CROUCH);
	}

	this.TargetEnity = null;
};

this.GetPriority = function()
{
	while(1)
	{
		if ( Util.HasAmmoForWeapon(this.Bot, WEAPON.ALLY_GRENADE) || Util.HasAmmoForWeapon(this.Bot, WEAPON.AXIS_GRENADE) )
		{
			count = this.QueryGoals(this.Bot.QueryGoalsTable,"GRENADE_.*");
			if ( count > 0 )
			{
				foreach ( id and goal in this.Bot.QueryGoalsTable )
				{
					if ( !goal.TraceEntity && !goal.TargetGoal )
					{
						goal.DisableGoal(true);
						continue;
					}
					else if( !goal.TraceEntity && goal.TargetGoal )
					{
						g = GetGoal(goal.TargetGoal);						
						if ( !g || (goal.IgnoreDead && g && !EntityIsValid(g.GetEntity()))
							|| (!goal.IgnoreDead && GetEntFlags(g.GetEntity(), ENTFLAG.DEAD)) )
						{
							//goal.DisableGoal(true);
							SetAvailableMapGoals( 0, false, goal.GetName() );
							continue;
						}
					}
					else if (goal.TraceEntity && (!EntityIsValid(goal.TraceEntity) || GetEntFlags(goal.TraceEntity, ENTFLAG.DEAD)))
					{
						SetAvailableMapGoals( 0, false, goal.GetName() );
						continue;
					}

					this.MapGoal = goal;
					this.Priority = goal.GetGoalPriority(this.Bot);
					break;
				}
			}

			 tableClear(this.Bot.QueryGoalsTable);
		}

		sleep(2);
	}
};

this.Update = function()
{
	if ( this.RouteTo(this.MapGoal) == EVENT.PATH_SUCCESS )
	{
		if(!this.MarkInUse(this.MapGoal)) {
			this.BlackboardDelay(5, this.MapGoal);
			this.Finished();
		}

		if ( this.MapGoal.Stance == "crouch" )
		{
			this.Bot.HoldButton(BTN.CROUCH, 5);
		}

		this.AddAimRequest(Priority.High, "facing", this.MapGoal.Facing);
		this.AddWeaponRequest(Priority.High, this.weapon);
		this.BlockForWeaponChange( this.weapon );
		sleep( .25 );
		this.Priority = 2.0; // don't let other goals interrupt it
		while ( EntityIsValid( this.TargetEntity ) && Util.HasAmmoForWeapon(this.Bot,this.weapon) )
		{
			if ( this.MapGoal.PrimeGrenade > 1 )
			{
				this.Bot.HoldButton( BTN.ATTACK1, this.MapGoal.PrimeGrenade );
			}
			else
			{
				this.Bot.PressButton( BTN.ATTACK1 );
			}

			sleep( this.MapGoal.PrimeGrenade + 0.5 );
		}

		sleep(1);
	}
	else
	{
		this.BlackboardDelay(10, this.MapGoal);
		Util.MapDebugPrint( this.MapGoal.GetName() + " path failed, check reachability!", true );
	}

	this.Finished();
};

