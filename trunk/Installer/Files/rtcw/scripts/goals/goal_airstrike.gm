// This script contains functionality to allow bots to toss airstrikes from given waypoints

// These parameters are required
this.Name = "AIRSTRIKE";		// The name of the goal.
this.Parent = "HighLevel";		// The name of the parent. This setting determines where in the state tree the goal will reside in.

// These parameters are optional
this.LimitToWeapon( WEAPON.SMOKE_GRENADE );

this.Initialize = function()
{
};

this.Enter = function()
{
	this.AddFinishCriteria(this.Bot.GetGameEntity(),"not weaponcharged", WEAPON.SMOKE_GRENADE);
	this.MarkInProgress(this.MapGoal);
};

this.Exit = function()
{
	this.BlackboardDelay(5, this.MapGoal);
};

this.GetPriority = function()
{
	if(!this.IsActive() && this.Bot.IsWeaponCharged(WEAPON.SMOKE_GRENADE, 0))
	{
		tbl = {};
		this.QueryGoals(tbl,"AIRSTRIKE.*");
		
		if ( tableCount(tbl) > 0 )
		{
			this.GetRandomFromBest(tbl);
		}
	}
	
	sleep(2);
};

this.GetRandomFromBest = function(query)
{
	tmp = {};
	i = 0;
	bias = 0;
	evalbias = 0;
	
	foreach ( id and goal in query )
	{
		// TODO: need to make sure first one in table has highest priority
		evalbias = goal.GetGoalPriority(this.Bot.GetTeam(), this.Bot.GetClass());
		if ( evalbias != 0 && evalbias >= bias )
		{
			bias = evalbias;
			i = tableCount(tmp);
			tmp[ i ] = goal;
		}
	}
	
	tmpCount = tableCount(tmp);
	// randomly pick from best available
	if ( tmpCount > 0 )
	{
		r = RandInt(0, tmpCount - 1);
		this.MapGoal = tmp[ r ];
		this.Priority = bias;
	}	
};

this.Update = function()
{	
	if ( this.RouteTo(this.MapGoal) == EVENT.PATH_SUCCESS )
	{
		this.MarkInUse(this.MapGoal);
		
		if ( this.MapGoal.Stance == "crouch" )
		{
			this.Bot.HoldButton(BTN.CROUCH, 1.1);
		}		
		
		r = Util.GetRandomFromTable(this.MapGoal.AimVectors);
		this.AddAimRequest(Priority.High, "facing", this.MapGoal.AimVectors[ r ]);
		
		this.AddWeaponRequest(Priority.High, WEAPON.SMOKE_GRENADE );
		this.BlockForWeaponChange( WEAPON.SMOKE_GRENADE );
		this.Bot.HoldButton(BTN.ATTACK1, 0.5 );
		sleep(1);	
	}
	
	this.Finished();
};

