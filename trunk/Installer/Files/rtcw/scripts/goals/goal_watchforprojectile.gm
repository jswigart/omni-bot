this.Name = "WatchForProjectile";
this.Parent = "HighLevel";
this.AlwaysRecieveEvents = true;
this.AutoAdd = true;
this.Debug = false;

this.LimitToNoEntityFlag(ENTFLAG.INWATER, ENTFLAG.UNDERWATER);

this.AvoidRadius = {};
this.Initialize = function()
{
	watchParams = {
		Radius = 400,
		Category = CAT.PROJECTILE,
		RequireLOS = TRACE.VISIBLE,
	};
	this.WatchForEntityCategory(watchParams);

	if ( tableCount(this.AvoidRadius) == 0 ) {
		this.AvoidRadius[ CLASS.AIRSTRIKE ] = 470;
		this.AvoidRadius[ CLASS.GRENADE ] = 320;
	}

	Util.MapDebugPrint( this.Name + " Initialized", true );
};

this.Enter = function()
{
	if ( this.Bot.AvoidEnt ) {
		this.AddFinishCriteria(this.Bot.AvoidEnt, "deleted");
		this.Bot.AvoidPos = GetEntPosition(this.Bot.AvoidEnt);

		if ( this.Bot.AvoidPos ) {
			// flatten and invert the facing for tracing purposes
			newFacing = this.Bot.AvoidPos - this.Bot.GetEyePosition();
			this.NewFacing = Vector3(newFacing.x * -1, newFacing.y * -1, 0);
		}
		else {
			this.Finished();
		}
	}
	else {
		this.Finished();
	}
};

this.Exit = function()
{
	this.Bot.ReleaseButton(BTN.CROUCH, BTN.SPRINT);
	this.Bot.AvoidEnt = null;
	this.Bot.AvoidPos = null;
};

this.Update = function()
{
	botId = this.Bot.GetGameId();
	eyePos = this.Bot.GetEyePosition();
	traceNum = 0;
	interval = 64;

	while(this.Bot.AvoidEnt && traceNum <= 8)
	{
		// yield at the top in case of script errors
		yield(); yield();
		traceNum += 1;

		// sanity check for this.NewFacing since sometimes it's null. no idea why
		if ( !this.NewFacing ) {
			this.Finished();
		}
		side = CrossProduct(this.NewFacing,Vec3(0,0,1));

		end = this.Bot.GetPosition() + this.NewFacing * 150;
		end += (side * (traceNum * interval));
		end -= (side * 0.5 * 8 * interval);

		tr = TraceLine( eyePos, end, 0, TRACE.SHOT, botId, false );

		if ( tr.end && !tr.end.IsZero() ) {
			if ( this.Debug ) {
				DrawDebugLine( eyePos, tr.end, COLOR.GREEN, 5 );
			}

			if ( this.Bot.AvoidPos ) {
				if ( DistanceBetween(this.Bot.AvoidPos, tr.end) >= this.AvoidRadius[ this.AvoidEntClass ] ) {
					this.Bot.HoldButton(BTN.SPRINT, 99);
					this.Goto(tr.end,64.0);
					newFacing = this.Bot.AvoidPos - this.Bot.GetEyePosition();
					this.AddAimRequest(Priority.Low, "facing", Vector3(newFacing.x, newFacing.y, 0));
					this.Bot.HoldButton(BTN.CROUCH, 99);

					timeout = 1000;
					while(timeout > 0) {
						this.Goto(this.Bot.GetPosition());
						yield();
						timeout -= 20;
					}

					break;
				}
			}
			else {
				break;
			}
		}
	}

	this.ReleaseAimRequest();
	this.Finished();
};

this.Events[EVENT.ENT_ENTER_RADIUS] = function(ent)
{
	if ( ent ) {
		this.AvoidEntClass = GetEntClass(ent);
		
		if ( this.Debug ) {
			this.Bot.Say(Util.ClassName(this.AvoidEntClass));
		}

		// cs: ignore arty for now. the problem is that repeated spam of arty can have an entire team
		// locked down in avoid mode. especially noticeable on poorly routed maps
		if ( /*this.AvoidEntClass == CLASS.AIRSTRIKE || entClass == CLASS.ARTY ||*/ this.AvoidEntClass == CLASS.GRENADE ) {
			if ( GetEntOwner(ent) != this.Bot.GetGameEntity() ) {
				this.Bot.AvoidEnt = ent;
				this.Priority = 0.91;
			}
		}
	}
};

