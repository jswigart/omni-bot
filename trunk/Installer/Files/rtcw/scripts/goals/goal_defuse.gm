this.Name = "DEFUSE";
this.Parent = "HighLevel";
this.SkipGetPriorityWhenActive = true;

this.LimitToWeapon(WEAPON.PLIERS);

this.Initialize = function()
{
	this.Bot.QueryGoalsTable = table();
	this.TargetEntity = null;
};

this.GetPriority = function()
{
	while(1)
	{
		count = this.QueryGoals(this.Bot.QueryGoalsTable,"DEFUSE_.*");
		if ( count > 0 )
		{
			// always go for the closest one
			dist = null;
			evalDist = null;
			closestGoal = null;

			foreach ( id and goal in this.Bot.QueryGoalsTable )
			{
				evalDist = this.Bot.DistanceTo(goal.GetEntity());

				if ( !dist || evalDist < dist ) {
					dist = evalDist;
					closestGoal = goal;
				}
			}

			if ( closestGoal ) {
				this.MapGoal = closestGoal;
				this.Priority = closestGoal.GetGoalPriority(this.Bot);
			}
		}

		tableClear(this.Bot.QueryGoalsTable);

		sleep(2);
	}
};

this.Enter = function()
{
	if(!this.MarkInProgress(this.MapGoal)) {
		this.BlackboardDelay(5, this.MapGoal);
		this.Finished();
	}

	this.TargetEntity = this.MapGoal.GetEntity();
};

this.Update = function()
{
	if ( this.RouteTo(this.MapGoal, 64.f) == EVENT.PATH_SUCCESS )
	{
		if(!this.MarkInUse(this.MapGoal)) {
			this.BlackboardDelay(5, this.MapGoal);
			this.Finished();
		}

		pos = GetEntPosition(this.TargetEntity);
		this.AddAimRequest(Priority.High, "position", pos);
		this.AddWeaponRequest(Priority.High, WEAPON.PLIERS );
		this.BlockForWeaponChange( WEAPON.PLIERS );

		eyePos = GetEntEyePosition(this.Bot.GetGameEntity());
		if ( pos.z < eyePos.z && eyePos.z - pos.z > 48 ) {
			this.Bot.HoldButton(BTN.CROUCH, 99);
		}

		while( this.TargetEntity && EntityIsValid(this.TargetEntity) ) { // goal deleted with entity
			pos = GetEntPosition(this.TargetEntity);
			if ( pos ) {
				this.AddAimRequest(Priority.High, "position", pos + Vector3(0,0,12));

				if ( this.Bot.DistanceTo(pos) > 64 ) {
					this.Bot.MoveTowards(pos);
				}

				this.Bot.HoldButton(BTN.ATTACK1, 0.25);
			}
			else {
				this.Finished();
			}
			yield();
		}
	}
	else
	{
		this.BlackboardDelay(10, this.MapGoal);
		Util.MapDebugPrint( this.MapGoal.GetName() + " path failed, check reachability!", true );
	}

	this.Finished();
};

this.Exit = function()
{
	this.TargetEntity = null;
	this.Bot.ReleaseButton(BTN.CROUCH);
};
