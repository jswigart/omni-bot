// This script contains functionality to allow bots to satchel or dynamite goals

// These parameters are required
this.Name = "PLANT";		// The name of the goal.
this.Parent = "HighLevel";		// The name of the parent. This setting determines where in the state tree the goal will reside in.
this.SkipGetPriorityWhenActive = true;
this.LimitToClass(CLASS.ENGINEER);


// define some goal states
this.LAY_EXPLOSIVE = 0;
this.ARM_EXPLOSIVE = 1;
this.COVER_DYNAMITE = 2;

this.Initialize = function()
{
	this.Bot.QueryGoalsTable = table();
};

this.GetPriority = function()
{
	botClass = this.Bot.GetClass();

	while(1)
	{
		if ( (botClass == CLASS.ENGINEER && this.Bot.IsWeaponCharged(WEAPON.DYNAMITE, 0)) )
		{
			count = this.QueryGoals(this.Bot.QueryGoalsTable,"PLANT_.*");
			if ( count > 0 )
			{
				foreach ( id and goal in this.Bot.QueryGoalsTable )
				{
					if (goal.ExplosiveType && !(goal.ExplosiveType & goal.ExplosiveTypeDynamite)) {
						continue;
					}

					if ( goal.TraceInfo && tableCount(goal.TraceInfo) > 0 )
					{
						if ( !goal.TraceEntity || this.Bot.GetDestroyableState(goal.TraceEntity) < 1 )
						{
							continue;
						}
					}
					else
					{
						goalEnt = goal.GetEntity();

						if ( !goalEnt || this.Bot.GetDestroyableState(goalEnt) < 1 )
						{
							continue;
						}
					}

					this.MapGoal = goal;
					this.Priority = goal.GetGoalPriority(this.Bot);
					break;
				}
			}

			tableClear(this.Bot.QueryGoalsTable);
		}

		sleep(2);
	}
};

this.Enter = function()
{
	this.GoalState = this.LAY_EXPLOSIVE;
	this.ExplosiveEntity = null;

	if ( this.MapGoal.TraceEntity )
	{
		this.GoalEntity = this.MapGoal.TraceEntity;
	}
	else
	{
		this.GoalEntity = this.MapGoal.GetEntity();
	}

	this.Goal_Name = this.MapGoal.GetName();
	this.Goal_Position = this.MapGoal.GetPosition();

	if ( !this.GoalEntity )
	{
		Util.MapDebugPrint(this.Goal_Name + " entered with no entity!", true);
		this.MapGoal.DisableGoal(true);
		this.Finished();
	}

	if(!this.MarkInProgress(this.MapGoal)) {
		this.BlackboardDelay(5, this.MapGoal);
		this.Finished();
	}

	this.UpdateDebugString();
};

this.Update = function()
{
	// cs: no idea how it could get here without being charged, but it happens sometimes
	botClass = this.Bot.GetClass();
	if ( (botClass == CLASS.ENGINEER && !this.Bot.IsWeaponCharged(WEAPON.DYNAMITE, 0)) )
	{
		Util.MapDebugPrint( this.MapGoal.GetName() + " aborting, no charge", true );
		this.Finished();
	}

	if ( this.RouteTo(this.MapGoal, 64.0) == EVENT.PATH_SUCCESS )
	{
		if(!this.MarkInUse(this.MapGoal)) {
			this.BlackboardDelay(5, this.MapGoal);
			this.Finished();
		}

		// cs: this is most likely fine, but it was added far too late to trust
		// is the waypoint too far away?
		// if ( this.GoalEntity && EntityIsValid(this.GoalEntity) ) {
			// timeout = 0;
			// goalPosition = GetEntPosition(this.GoalEntity);
			// while( timeout < 60 && !CheckEntityBoundsIntersect(this.Bot.GetGameEntity(), this.GoalEntity) ) {
				// this.Bot.MoveTowards(goalPosition);
				// yield();
				// timeout += 1;
			// }

			// if ( timeout >= 60 ) {
				// Log( this.MapGoal.GetName() + " failed bounds check, check position!" );
				// this.BlackboardDelay(10, this.MapGoal);
				// this.Finished();
			// }
		// }
		// else {
			// this.Finished();
		// }

		switch(botClass)
		{
			case CLASS.ENGINEER:
			{
				this.UpdateDynamite();
			}
			default:
			{
				this.BlackboardDelay(10, this.MapGoal);
				this.Finished();
			}
		}
	}
	else
	{
		this.BlackboardDelay(10, this.MapGoal);
		Util.MapDebugPrint( this.MapGoal.GetName() + " path failed, check reachability!", true );
	}

	this.BlackboardDelay(10, this.MapGoal);
	this.Finished();
};

this.Exit = function()
{
	this.Bot.ReleaseButton(BTN.CROUCH);
	this.ReleaseAimRequest();
	this.ReleaseWeaponRequest();

	this.GoalState = this.LAY_EXPLOSIVE;
	this.GoalEntity = null;
	this.ExplosiveEntity = null;
};

this.UpdateDynamite = function()
{
	hasCoverSpot = false;
	aimVectors = null;
	spotIndex = null;

	while(1)
	{
		if ( !this.GoalEntity || !EntityIsValid(this.GoalEntity) || this.Bot.GetDestroyableState(this.GoalEntity) < 1 )
		{
			// clear the occupied flag
			if ( typeId(spotIndex) != 0 ) {
				this.MapGoal.CoverSpots[ spotIndex ].occupied = null;
			}
			this.Finished();
		}

		switch(this.GoalState)
		{
			case this.LAY_EXPLOSIVE:
			{
				if ( !this.Bot.IsWeaponCharged(WEAPON.DYNAMITE, 0) )
				{
					this.Finished();
				}

				this.Priority = 2.0;

				// for voice chat 'cover me'
				signal(this.Bot.Name + "_plant");

				this.AddAimRequest(Priority.High, "position", this.Bot.GetPosition());
				this.AddWeaponRequest(Priority.High, WEAPON.DYNAMITE );
				this.Bot.HoldButton(BTN.CROUCH, 99);
				this.BlockForWeaponChange( WEAPON.DYNAMITE );
				this.Bot.PressButton(BTN.ATTACK1);
			}
			case this.ARM_EXPLOSIVE:
			{
				this.UpdateDebugString();

				if ( !EntityIsValid(this.ExplosiveEntity) )
				{
					this.Finished();
				}

				this.AddWeaponRequest(Priority.High, WEAPON.PLIERS );
				this.BlockForWeaponChange( WEAPON.PLIERS );

				while ( EntityIsValid(this.ExplosiveEntity) && this.Bot.GetExplosiveState(this.ExplosiveEntity) == 1 )
				{
					dynoPosition = GetEntPosition(this.ExplosiveEntity);
					this.AddAimRequest(Priority.High, "position", dynoPosition);
					this.Bot.MoveTowards(dynoPosition);
					this.Bot.PressButton(BTN.ATTACK1);
					yield();
				}

				this.BlackboardDelay(35, this.MapGoal);

				this.Bot.ReleaseButton(BTN.CROUCH);

				if ( this.MapGoal.CoverSpots && tableCount(this.MapGoal.CoverSpots) > 0 )
				{
					this.ReleaseWeaponRequest();
					this.ReleaseAimRequest();
					this.GoalState = this.COVER_DYNAMITE;
				}
				else
				{
					this.Finished();
				}
			}
			case this.COVER_DYNAMITE:
			{
				this.UpdateDebugString();

				if ( !EntityIsValid(this.ExplosiveEntity) || this.Bot.GetExplosiveState(this.ExplosiveEntity) != 0 )
				{
					this.Finished();
				}

				// pick a cover spot
				if (!hasCoverSpot) {

					// only one per spot. iterate through all since 'break' exits the while loop
					foreach ( id and spot in this.MapGoal.CoverSpots ) {
						if ( typeId(spotIndex) != 0 || spot.occupied ) {
							continue;
						}
						else {
							spot.occupied = true;
							spotIndex = id;
						}
					}

					// no more cover spots available
					if (typeId(spotIndex) == 0) { this.Finished(); }

					if ( this.MapGoal.CoverSpots[ spotIndex ].AimVectors && tableCount(this.MapGoal.CoverSpots[ spotIndex ].AimVectors) > 0 ) {
						aimVectors = this.MapGoal.CoverSpots[ spotIndex ].AimVectors;
						hasCoverSpot = true;
					}
					else {
						Util.MapDebugPrint(this.Goal_Name, ": Cover Spot has no AimVectors!");
						this.Finished();
					}

					this.Goto(this.MapGoal.CoverSpots[ spotIndex ].position, 32.0);

					if ( this.MapGoal.CoverSpots[ spotIndex ].stance == "crouch" ) {
						this.Bot.HoldButton(BTN.CROUCH, 99);
					}
				}

				r = Util.GetRandomFromTable(aimVectors);
				this.AddAimRequest(Priority.Low, "facing", aimVectors[ r ]);

				sleep(0.75);
			}
			default:
			{
				this.Finished();
			}
		}

		sleep(0.25);
	}
};

this.UpdateDebugString = function()
{
	switch(this.GoalState)
	{
		case this.LAY_EXPLOSIVE:
		{
			stateString = "LAY_EXPLOSIVE";
		}
		case this.ARM_EXPLOSIVE:
		{
			stateString = "ARM_EXPLOSIVE";
		}
		case this.COVER_DYNAMITE:
		{
			stateString = "COVER_DYNAMITE";
		}
		default:
		{
			stateString = "";
		}
	}

	// for /bot debugbot <bot or all> fpinfo prints
	this.DebugString = this.Goal_Name + " : " + stateString;
};

this.Events[EVENT.WEAPON_FIRE] = function(weaponId, projectileEntity)
{
	switch(weaponId)
	{
		case WEAPON.DYNAMITE:
		{
			this.ExplosiveEntity = projectileEntity;
			this.GoalState = this.ARM_EXPLOSIVE;
		}
		default:
		{
		}
	}
};

