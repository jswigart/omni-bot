// This script contains functionality to allow medic bots to deliver ammo to people that request it.

// These parameters are required
this.Name = "DeliverSupplies";	// The name of the goal.
this.Parent = "HighLevel";		// The name of the parent. This setting determines where in the state tree the goal will reside in.
this.KillAndRevive = true;

this.AlwaysRecieveEvents = true;

// possible options
this.LimitToClass(CLASS.LIEUTENANT, CLASS.MEDIC);

// states
this.DELIVER_PACKS = 1;
this.KILL_TARGET = 2;
this.SWITCH_TO_SYRINGE = 3;
this.REVIVE_TARGET = 4;

this.Initialize = function()
{
	this.Respond = false;
	Util.MapDebugPrint(this.Name + " Initialized", true);
};

this.Enter = function()
{
	this.FriendlyFire = GetCvar("g_friendlyfire");
	this.PacksThrown = 0;
	this.TargetPosition = GetEntPosition(this.TargetEntity);
	this.OnTarget = false;

	if ( this.Respond )
	{
		targetName = GetEntName(this.TargetEntity);

		if(this.Supply == WEAPON.AMMO_PACK)
		{
			this.Bot.SayTeam("Coming with Ammo, ^7", targetName, "^5!^2");
		}
		else if(this.Supply == WEAPON.MEDKIT)
		{
			this.Bot.SayTeam("Coming with Health, ^7", targetName, "^5!^2");
		}
	}

	// Set up some finish criteria
	this.AddFinishCriteria(this.TargetEntity,"deleted");
	this.AddFinishCriteria(this.Bot.GetGameEntity(),"not weaponcharged", this.Supply);
	this.AddFinishCriteria(this.TargetEntity,"hasentflag",ENTFLAG.LIMBO);

	this.KillTarget = false;
	if ( this.Supply == WEAPON.MEDKIT && this.FriendlyFire == 1 && this.KillAndRevive == true
		&& this.Bot.HasAmmo(WEAPON.SYRINGE) && this.TargetEntity && !GetEntFlags(this.TargetEntity, ENTFLAG.CARRYINGGOAL) )
	{
		// are they low enough on health?
		hlth = Util.GetEntHealth(this.TargetEntity);
		if ( hlth < 37 ) {
			this.KillTarget = true;
			this.AddFinishCriteria(this.TargetEntity,"health greaterthan",75);
			this.Bot.KillingForRevive = true; // for voice chats
		}
	}

	if ( !this.KillTarget )
	{
		this.AddFinishCriteria(this.TargetEntity,"health lessthan",1);
	}

	this.DynamicGotoThread = this.ForkThread(this.DynamicGoto);
};

this.Exit = function()
{
	if ( this.DynamicGotoThread )
		{ this.KillThread(this.DynamicGotoThread); }

	this.TargetEntity = null;
	this.TargetPosition = null;
	this.DelayNextResponse = false;
	this.OnTarget = false;
	this.Bot.KillingForRevive = false; // allow appropriate voice chats again
};

this.DynamicGoto = function()
{
	if(this.Goto(this.TargetPosition, 128.f) == EVENT.PATH_SUCCESS)
	{
		this.OnTarget = true;
	}
	else
	{
		this.Finished();
	}
};

this.Update = function()
{
	while(1)
	{
		entPos = GetEntPosition(this.TargetEntity);

		// reset if they chose a closer target
		if ( this.ChangedTarget ) {
			this.TargetPosition = entPos;
			this.ChangedTarget = false;
			if ( this.DynamicGotoThread )
				{ this.KillThread(this.DynamicGotoThread); }
			this.DynamicGotoThread = this.ForkThread(this.DynamicGoto);
		}

		if ( entPos.IsZero() )
			{ this.Finished(); }

		d = DistanceBetween(entPos,this.TargetPosition);
		if( d > 128 && d < 500)
		{
			if ( this.DynamicGotoThread )
				{ this.KillThread(this.DynamicGotoThread); }
			this.TargetPosition = entPos;
			this.DynamicGotoThread = this.ForkThread(this.DynamicGoto);
		}
		else if ( d > 500 )
		{
			//stop chasing
			this.Finished();
		}

		if ( this.OnTarget )
		{
			this.Priority = 2.0;

			// aim at target while waiting for weapon change
			pos = GetEntEyePosition(this.TargetEntity);
			this.AddAimRequest(Priority.High, "position",pos);

			if ( !this.KillTarget ) {
				this.State = this.DELIVER_PACKS;
				this.AddWeaponRequest(Priority.High, this.Supply);
				this.BlockForWeaponChange(this.Supply);
			}
			else {
				this.State = this.KILL_TARGET;
			}

			while(this.PacksThrown < 2 && this.Bot.IsWeaponCharged(this.Supply))
			{
				switch(this.State)
				{
					case this.DELIVER_PACKS:
					{
						this.UpdateDeliverPacks();
					}
					case this.KILL_TARGET:
					{
						this.UpdateKillTarget();
					}
					case this.SWITCH_TO_SYRINGE:
					{
						this.UpdateSwitchToSyringe();
					}
					case this.REVIVE_TARGET:
					{
						this.UpdateReviveTarget();
					}
				}
				yield();
			}

			this.Finished();
		}

		yield();
	}
};

this.UpdateDeliverPacks = function()
{
	if ( this.Bot.GetCurrentWeapon() != this.Supply ) {
		this.AddWeaponRequest(Priority.High, this.Supply);
		this.BlockForWeaponChange(this.Supply);
	}

	pos = GetEntEyePosition(this.TargetEntity);
	if (pos)
	{
		//move towards them while giving packs
		this.AddAimRequest(Priority.High, "position",pos);
		this.Bot.MoveTowards(pos);
		this.Bot.HoldButton(BTN.ATTACK1, 0.25);
	}
	else
	{
		this.Finished();
	}
	sleep(0.25);
};

this.UpdateKillTarget = function()
{
	hlth = Util.GetEntHealth(this.TargetEntity);
	if ( hlth < 1 ) {
		this.Bot.KilledForRevive = true; // for voice chats
		this.State = this.SWITCH_TO_SYRINGE;
		return;
	}

	pos = GetEntEyePosition(this.TargetEntity);
	if (pos)
	{
		// shoot at their head
		this.AddAimRequest(Priority.High, "position",pos);
		this.Bot.MoveTowards(pos);
		this.Bot.HoldButton(BTN.ATTACK1, 0.25);
	}
	else
	{
		this.Finished();
	}
	yield();
};

this.UpdateSwitchToSyringe = function()
{
	this.AddWeaponRequest(Priority.High, WEAPON.SYRINGE);
	this.BlockForWeaponChange(WEAPON.SYRINGE);
	this.State = this.REVIVE_TARGET;
};

this.UpdateReviveTarget = function()
{
	hlth = Util.GetEntHealth(this.TargetEntity);
	if ( hlth > 0 ) {
		this.State = this.DELIVER_PACKS;

		// move off them
		pos = GetEntEyePosition(this.TargetEntity) + Vector3(48,48,0);
		if ( pos )
		{
			this.Goto(pos);
		}
		else
		{
			this.Finished();
		}

		return;
	}

	pos = GetEntEyePosition(this.TargetEntity);
	if (pos)
	{
		this.AddAimRequest(Priority.High, "position",pos);
		this.Bot.MoveTowards(pos);
		this.Bot.HoldButton(BTN.ATTACK1, 0.25);
	}
	else
	{
		this.Finished();
	}
	yield();
};

this.Events[EVENT.TEAM_VOICE] = function(whoSaidIt, macroId)
{
	dist = this.Bot.DistanceTo(whoSaidIt);
	if ( GetEntFlags(whoSaidIt, ENTFLAG.DEAD) || dist > 1500 )
	{
		return;
	}

	if ( this.TargetEntity && this.TargetEntity == whoSaidIt ) {
		//this.Bot.SayTeam("i heard you the first time " + GetEntName(whoSaidIt));
		return;
	}
	else if ( this.TargetEntity ) {
		// store previous ents and collect targets to deliver to?
		if ( dist < this.Bot.DistanceTo(this.TargetEntity) ) {
			this.ChangedTarget = true;
		}
	}

	if(macroId == VOICE.NEED_AMMO &&
	   this.Bot.GetClass() == CLASS.LIEUTENANT &&
	   this.Bot.IsWeaponCharged(WEAPON.AMMO_PACK))
	{
		this.Supply = WEAPON.AMMO_PACK;
		this.TargetEntity = whoSaidIt;

		this.Priority = 1.5;
	}
	else if(macroId == VOICE.NEED_MEDIC &&
		 this.Bot.GetClass() == CLASS.MEDIC &&
	         this.Bot.IsWeaponCharged(WEAPON.MEDKIT))
	{
		this.Supply = WEAPON.MEDKIT;
		this.TargetEntity = whoSaidIt;

		this.Priority = 1.5;
	}
};

this.Events[EVENT.WEAPON_FIRE] = function(weaponId, projectileEntity)
{
	if(weaponId == this.Supply)
	{
		this.PacksThrown += 1;
	}
 };
