// This script contains functionality to allow medic bots to dispense health at spawn

// These parameters are required
this.Name = "SupplySelf";		// The name of the goal.
this.Parent = "LowLevel";		// The name of the parent. This setting determines where in the state tree the goal will reside in.
this.LimitToClass( CLASS.LIEUTENANT, CLASS.MEDIC );
this.LimitToNoTarget(); 

this.AlwaysRecieveEvents = true;	// Recieve events even when not active. Normally events are only called when goal is active.

this.Initialize = function()
{
	// Internal variables
	this.AmmoInfo = {};
	this.AmmoDesirThreshold = 0.5;
	this.HealthThreshold = 50.0;
	this.DelayBetweenCalls = 1.0;
	this.Timeout = 1000;
	
	Util.MapDebugPrint(this.Name + " Initialized");
};

this.Enter = function()
{
	this.AddFinishCriteria(this.PackEnt,"deleted");
};

this.Exit = function()
{
	this.PackEnt = null;
	this.ReleaseAimRequest();
};

this.GetPriority = function()
{
	if ( this.Bot.GetClass() == CLASS.LIEUTENANT )
	{
		this.Bot.GetMostDesiredAmmo(this.AmmoInfo);

		if(this.AmmoInfo.Desire > this.AmmoDesirThreshold)
		{
			this.Supply = WEAPON.AMMO_PACK;
			this.Priority = 1;
		}
		sleep(this.DelayBetweenCalls);
	}
	else
	{
		block(0);
	}
};

this.Update = function()
{
	if ( !this.Bot.IsWeaponCharged(this.Supply) )
	{
		sleep(this.DelayBetweenCalls);
		this.Finished();	
	}

	this.AddWeaponRequest(Priority.Low, this.Supply);
	this.BlockForWeaponChange(this.Supply);

	this.PacksThrown = 0;
	while( this.PacksThrown < 2 && this.Bot.IsWeaponCharged(this.Supply) )
	{
		this.Bot.HoldButton(BTN.ATTACK1, 0.5);
		sleep(0.5);
	}
	
	/*if ( this.PackEnt )
	{ 
		pos = GetEntPosition(this.PackEnt);
		if ( !pos || this.Goto(pos) == EVENT.PATH_FAILED)
		{
			this.Finished();
		}
	}*/

	timeout = 0;
	while ( this.PackEnt && timeout < this.Timeout )
	{
		pos = GetEntPosition(this.PackEnt);
			
		if ( pos )
		{
			this.AddAimRequest( Priority.High, "position", pos );
			this.Bot.MoveTowards( pos );
		}
		else
		{
			this.Finished();
		}

		timeout += 50;
		yield();
	}

	this.Finished();
};

this.Events[EVENT.FEEL_PAIN] = function(Inflictor, PreviousHealth, CurrentHealth)
{
	if(CurrentHealth < this.HealthThreshold && this.Bot.GetClass() == CLASS.MEDIC)
	{
		this.Supply = WEAPON.MEDKIT;
		this.Priority = 1;
	}
};

this.Events[EVENT.WEAPON_FIRE] = function(weaponId, projectileEntity) 
{
	if(weaponId == this.Supply )
	{
		if ( projectileEntity )
		{
			this.PacksThrown += 1;
			this.PackEnt = projectileEntity; 
		}
	}
 };
