// This script contains functionality to allow bots to toss airstrikes from given waypoints

if ( !BB.AIRSTRIKE ) {
	BB.AIRSTRIKE = Blackboard.MakeKey();
}

// These parameters are required
this.Name = "AirstrikeOld";        // The name of the goal.
this.Parent = "HighLevel";      // The name of the parent. This setting determines where in the state tree the goal will reside in.

// These parameters are optional
this.GetPriorityDelay = 3;      // Delay between calls to GetPriority
this.LimitToWeapon( WEAPON.SMOKE_GRENADE );
//this.LimitToNoTarget();

this.Initialize = function()
{
	if ( !Map ) {
		this.Disable = true;
		return;
	}
	// Internal variables
	this.Timeout = 30;
	this.wpName = null;
	this.MaxUsers = 0;

	if ( !Map.ASCacheTable ) {
		Map.ASCacheTable = table();
	}

	if ( !Map || !Map.Quiet ) {
		print( this.Name, " Initialized" );
	}

	if ( typeId( Map.AxisASPriority ) == 0 ) {
		Map.AxisASPriority = 0.95;
	}

	if ( typeId( Map.AlliesASPriority ) == 0 ) {
		Map.AlliesASPriority = 0.95;
	}

	if ( typeId( Map.AxisASUsers ) == 0 ) {
		Map.AxisASUsers = 1;
	}

	if ( typeId( Map.AlliesASUsers ) == 0 ) {
		Map.AlliesASUsers = 1;
	}

	this.LimitTo( this.EvalTable, 1 );
};

this.Enter = function()
{
	bbRecord =
	{
		Owner = this.Bot.GetGameId(),
		Target = this.BlackboardId,
	};
	Blackboard.PostRecord( BB.AIRSTRIKE, bbRecord );

	this.AddFinishCriteria( this.Bot.GetGameEntity(),"not weaponcharged", WEAPON.SMOKE_GRENADE );
};

this.Exit = function()
{
	Blackboard.RemoveByPoster( this.Bot.GetGameId(), BB.AIRSTRIKE );
	this.wpName = null;
};

this.EvalTable = function()
{
	if ( Map.AxisASTable && this.Bot.GetTeam() == TEAM.AXIS && tableCount( Map.AxisASTable ) < 1  ) {
		return false;
	}

	if ( Map.AlliesASTable && this.Bot.GetTeam() == TEAM.ALLIES  && tableCount( Map.AlliesASTable ) < 1 ) {
		return false;
	}

	return true;
};

this.Randomize = function( tbl )
{
	tmp = {};

	// collect the available ones
	foreach( id and wp in tbl )
	{
		info = Util.WpNameInfo( wp );

		if ( Blackboard.GetNumRecords( BB.AIRSTRIKE, info.guid ) < this.MaxUsers ) {
			i = tableCount( tmp );
			tmp[ i ] = wp;
		}
	}

	//pick a random one
	tmpCount = tableCount( tmp );
	if ( tmpCount > 0 ) {
		useWp = RandInt( 0, tmpCount - 1 );
		this.wpName = tmp[ useWp ];
		return;
	}

	this.wpName = null;
};

this.GetPriority = function()
{
	if ( !this.IsActive() && this.Bot.IsWeaponCharged( WEAPON.SMOKE_GRENADE, 0 ) ) {
		team = this.Bot.GetTeam();

		if ( team == TEAM.AXIS && Map.AxisASTable ) {
			this.MaxUsers = Map.AxisASUsers;
			this.Randomize( Map.AxisASTable );
		} else if ( team == TEAM.ALLIES && Map.AlliesASTable )   {
			this.MaxUsers = Map.AlliesASUsers;
			this.Randomize( Map.AlliesASTable );
		}

		if ( this.wpName ) {
			if ( !Map.ASCacheTable[this.wpName] ) {
				Map.ASCacheTable[this.wpName] = table();
			}

			//store the data so we don't have to call the function every time
			if ( !Map.ASCacheTable[this.wpName].Pos || !Map.ASCacheTable[this.wpName].Facing ) {
				wpTable = table();
				Wp.GetWaypointByName( this.wpName, wpTable );
				this.Pos = wpTable.position;
				this.Facing = wpTable.facing * 1024;
				this.wpgoal = GetGoal( "UGOAL_" + this.wpName );
				this.Guid = wpTable.guid;

				Map.ASCacheTable[this.wpName].Pos = this.Pos;
				Map.ASCacheTable[this.wpName].Facing = this.Facing;
				Map.ASCacheTable[this.wpName].Guid = this.Guid;
				if ( this.wpgoal ) {
					Map.ASCacheTable[this.wpName].wpgoal = this.wpgoal;
				} else
				{ Map.ASCacheTable[this.wpName].wpgoal = null; }
			} else
			{
				this.Pos = Map.ASCacheTable[this.wpName].Pos;
				this.Facing = Map.ASCacheTable[this.wpName].Facing;
				this.Guid = Map.ASCacheTable[this.wpName].Guid;
				if ( Map.ASCacheTable[this.wpName].wpgoal ) {
					this.wpgoal = Map.ASCacheTable[this.wpName].wpgoal;
				}
			}
			this.DebugString = this.wpName;
			this.BlackboardId = this.Guid;

			if ( team == TEAM.ALLIES ) {
				this.Priority = Map.AlliesASPriority;
			} else
			{ this.Priority = Map.AxisASPriority; }
		} else
		{
			this.Finished();
		}
	}
};

this.Update = function()
{
	if ( !this.wpgoal ) {
		if ( !this.Pos || this.Goto( this.Pos ) == EVENT.PATH_FAILED ) {
			this.Finished();
		}
	} else
	{
		if ( this.RouteTo( this.wpgoal ) == EVENT.PATH_FAILED ) {
			this.Finished();
		}
	}

	if ( !this.Bot.IsWeaponCharged( WEAPON.SMOKE_GRENADE, 0 ) ) {
		this.Finished();
	}

	this.AddAimRequest( Priority.High, "facing", this.Facing );
	this.AddWeaponRequest( Priority.High, WEAPON.SMOKE_GRENADE );
	this.BlockForWeaponChange( WEAPON.SMOKE_GRENADE );
	this.Bot.HoldButton( BTN.ATTACK1, 0.5 );
	sleep( 1 );
	this.Finished();
};

