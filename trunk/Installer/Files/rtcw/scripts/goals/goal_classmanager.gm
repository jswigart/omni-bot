// This script determines if a bot needs to change classes

// These parameters are required
this.Name = "ClassManager";
this.Parent = "LowLevel";
this.AutoAdd = true;
this.AlwaysRecieveEvents = false;
this.OnlyWhileDead = true; // if set to false, they will /kill for class changes

this.GetPriority = function()
{
	if ( TestMapOn || DisableClassManager || TestBot ) {
		sleep(5); // could block(0), but this allows it to resume on var change
		return;
	}

	// cs: set a priority so Update can run and subsequently Exit
	// Exit is used in lieu of the death event since the death event
	// has been found to be unreliable (thx mc2718).
	this.Priority = 1.0;
	block(0);
};

this.Update = function()
{
	while(1)
	{
		sleep(1); // at map start all bots are returning class.soldier, so delay it a bit.

		// cs: let them /kill in warmup so transitions from snipe or panzer maps wont take forever for correct classes to be used
		if ( !this.OnlyWhileDead || GetGameState() != "Playing" ) {
			this.CheckForClassChange();
		}

		sleep(4);
	}
};

this.Exit = function()
{
	if ( this.OnlyWhileDead && GetGameState() == "Playing" ) {
		this.CheckForClassChange();
	}
};

this.CheckForClassChange = function()
{
	if ( this.Bot.crucialClass ) {
		// don't change crucial class which has been set by role manager
		return;
	}

	newClass = ClassManager.EvalClassChange(this.Bot);

	if (newClass) {
		// cs: this must come before the class change call to prevent them from /killing next spawn
		// cs: note: version 0.82 should not require it to come before the class change
		this.Bot.ExecCommand("kill");
		this.Bot.ChangeClass(newClass);
	}
};
