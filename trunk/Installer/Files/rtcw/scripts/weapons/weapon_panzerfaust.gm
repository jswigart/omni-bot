// The new weapon instance is passed to this function as the 'this'
// Properties can be set like this.Property = x, or the this prefix can be left off.

//////////////////////////////////////////////////////////////////////////
// Overall weapon properties.
this.Name = "Panzerfaust";
this.WeaponId = WEAPON.PANZERFAUST;

//////////////////////////////////////////////////////////////////////////
// Set some weapon properties that affect some internal logic.
this.PrimaryFire.WeaponType = "projectile";
this.PrimaryFire.ProjectileSpeed = 2500;
this.PrimaryFire.RequiresAmmo = true;
this.PrimaryFire.WaterProof = false;
this.PrimaryFire.SplashDamage = true;
this.PrimaryFire.InheritsVelocity = false;
this.PrimaryFire.ProjectileGravity = 0.0;
//this.PrimaryFire.NeedsCharged = true;
this.PrimaryFire.DelayAfterFiring = 30.0;
//~ this.PrimaryFire.NeedsInRange = false;
//~ this.PrimaryFire.MinRange = 0.0;
//~ this.PrimaryFire.MaxRange = 1000.0;

// don't use panzer to gib
this.PrimaryFire.SetIgnoreEntFlags( ENTFLAG.INJURED );
//this.PrimaryFire.SetTargetBias( CLASS.INJUREDPLAYER, 0 );

this.PrimaryFire.MaxAimError = Vector2( 0, 0 );
this.PrimaryFire.AimOffset = Vector3( 0, 0, 0 );

this.PrimaryFire.DefaultDesirability = 0.0;
//~ this.PrimaryFire.SetDesirabilityRange(256, 500, 0.4);

//don't use panzer in close range if friendly fire is on
this.FriendlyFire = GetCvar("g_friendlyfire");
if (this.FriendlyFire == 1){
	this.PrimaryFire.SetDesirabilityRange( 400, 4000, 0.8 );
}
else{
	this.PrimaryFire.SetDesirabilityRange( 0, 4000, 0.8 );
}

this.PrimaryFire.LowAmmoThreshold = 1;
this.PrimaryFire.LowAmmoPriority = 0.8;
