this.GoalType = "GRENADE";
this.Version = 1;
this.DefaultPriority = 0.8;
this.MinRadius = 30;
this.RolePriorityBonus = 0.1;
this.MaxUsers_InUse(1);
this.MaxUsers_InProgress(2);

//////////////////////////////////////////////////////////////////////////

this.Schema = Schema();
//this.Schema.Facing = Validate.Vec3().Default(GetLocalFacing);
this.Schema.Stance = Validate.Enum("stand","crouch","prone").Default("stand");
this.Schema.PrimeGrenade = Validate.IntRange(0,3).Default(1);

//////////////////////////////////////////////////////////////////////////

this.InitNewGoal = function()
{
	this.Facing = Vector3(0,0,0);
	this.TargetGoal = null;
	this.TraceInfo = {};
	this.TraceEntity = null;
	this.IgnoreDead = false;

	this.Schema.Check(this);
};

//////////////////////////////////////////////////////////////////////////

this.UpgradeVersion = function(Props)
{
	// version 0 is string,string key/values from the old waypoint format
	if(Props.Version==0)
	{
		// Version 1 Schema, upgrade from waypoint format
		this.Schema.Check(Props);
		Props.Version = 1;
	}
	else if(Props.Version == this.Version)
	{
		this.Schema.Check(Props);
		this.TargetGoal = Props.TargetGoal;
		this.Facing = Props.Facing;
		this.Stance = Props.Stance;
		this.PrimeGrenade = Props.PrimeGrenade;
		this.TraceInfo = Props.TraceInfo;
		this.IgnoreDead = Props.IgnoreDead;

		if(!this.Schema.Check(this) || (!this.TargetGoal && tableCount(this.TraceInfo) < 1))
		{
			this.DisableGoal(true);
		}
	}
};

//////////////////////////////////////////////////////////////////////////

this.Render = function(editMode)
{
	offset = Vector3(0,0,0);
	offset2 = Vector3(0,0,64);
	stanceOffset = Vector3(0,0,0);

	if (this.TraceEntity && EntityIsValid(this.TraceEntity))
	{
		entPos = GetEntPosition(this.TraceEntity);
	}

	while(this.RenderGoal == true)
	{
		goalBasePos = this.GetPosition();
		goalPos = goalBasePos + offset2;

		if(this.ExtraDebugText==null)
		{
			this.ExtraDebugText = "";
			if(!this.TraceEntity && this.TargetGoal)
			{
				this.ExtraDebugText += format("Target: %s\n",this.TargetGoal);
			}
			else if (this.TraceEntity)
			{
				this.ExtraDebugText += format("TraceEnt: %d\n",this.TraceEntity);
			}
			this.ExtraDebugText += format("Stance: %s\n",this.Stance);
			this.ExtraDebugText += format("PrimeGrenade: %d\n",this.PrimeGrenade);
			this.ExtraDebugText += format("IgnoreDead: %d\n",this.IgnoreDead);
		}

		if ( this.Stance == "crouch" )
		{
			stanceOffset = Vector3(0,0,-20);
		}

		this.RenderDefault();

		if(this.IsDisabled())
		{
			DrawLine(goalPos,goalBasePos,COLOR.RED,2);
		}
		else
		{
			DrawLine(goalPos,goalBasePos,COLOR.GREEN,2);
		}

		if (this.Facing)
		{
			trajectory = {};
			DrawArrow(goalPos+stanceOffset,goalPos+stanceOffset+this.Facing*32,COLOR.BLUE,2);
			trajectory.Velocity = Vector3(this.Facing.x * 900.0 * 1.1, this.Facing.y * 900.0 * 1.1, this.Facing.z * 650.0 * 1.1);
			trajectory.Position = goalPos + stanceOffset;
			//trajectory.StopAtHit = true;
			trajectory.TraceBounce = false;
			trajectory.Duration = 30;
			trajectory.Interval = 0.1;

			DrawTrajectory(trajectory,COLOR.WHITE,2);
		}

		if (entPos)
		{
			DrawArrow(goalPos,entPos,COLOR.YELLOW,2);
		}
		else if (this.TraceEntity && EntityIsValid(this.TraceEntity))
		{
			entPos = GetEntPosition(this.TraceEntity);
		}

		sleep(2);
	}
};

//////////////////////////////////////////////////////////////////////////

this.SaveToTable = function(SaveTable)
{
	// save the goal specific properties
	SaveTable.Facing = this.Facing;
	SaveTable.Stance = this.Stance;
	SaveTable.TargetGoal = this.TargetGoal;
	SaveTable.TraceInfo = this.TraceInfo;
	SaveTable.TraceEntity = this.TraceEntity;
	SaveTable.PrimeGrenade = this.PrimeGrenade;
	SaveTable.IgnoreDead = this.IgnoreDead;
};

//////////////////////////////////////////////////////////////////////////

this.Help = function()
{
	print(this.GoalType,"goal, version",this.Version);
	print("Requires:");
	print("		targetgoal or traceinfo - the goal that is to be grenaded or traceinfo");
	print("		facing - Direction the bot should face");
	print("Optional:");
	print("		stance - stand, crouch");
	print("		ignoredead - instruct the goal to ignore the dead flag");
	print("		prime - time in seconds the bot should prime the grenade. default 1, max 3");
};

//////////////////////////////////////////////////////////////////////////

this.SetProperty = function(property, value)
{
	switch(property)
	{
		case "facing":
		{
			if ( value == "clearall" || value == "clear" )
			{
				this.Facing = Vector3(0,0,0);
				print("Facing cleared");
			}
			else
			{
				playerFace = GetLocalFacing();
				this.Facing = playerFace;
				print("Facing set to",playerFace);
			}
		}
		case "stance": // crouch, stand, default stand
		{
			this.Stance = value;
		}
		case "prime":
		{
			this.PrimeGrenade = ToInt(value, 1);

			if ( this.PrimeGrenade > 3 )
			{
				this.PrimeGrenade = 3;
			}
		}
		case "targetgoal":
		{
			if ( GetGoal(value) )
			{
				this.TargetGoal = value;
			}
			else
			{
				print(this.GoalType, ": goal not found" );
			}
		}
		case "trace":
		{
			if ( value == "clearall" || value == "clear" )
			{
				this.TraceInfo = null;
				this.TraceEntity = null;
			}
			else
			{
				targetinfo = Util.ShowEntityInfo();
				if (tableCount(targetinfo) > 0)
				{
					// store the trace positions. this is so we can handle ETPro map scripts
					// since adding ents with the 'create' command makes ent numbers unreliable
					this.TraceInfo = targetinfo;
					this.TraceEntity = targetinfo.id; // for render update
				}
			}
		}
		case "ignoredead":
		{
			if ( typeId(value) != 1 ) {
				print("ignoredead expecting int, got " + typeName(value));
				return;
			}
			if ( value > 0 ) {
				this.IgnoreDead = true;
			}
			else {
				this.IgnoreDead = false;
			}
		}
		default:
		{
			print(this.GoalType, ": Invalid property:", property);
		}
	}

	this.ExtraDebugText = null;
};

//////////////////////////////////////////////////////////////////////////

// give it some time to find it since some games spawn ents late
this.Update = function()
{
	while(1)
	{
		this.TimeoutForTrace += 20;
		if (!this.TraceEntity
				&& this.TraceInfo
				&& this.TraceInfo.eyePos
				&& this.TraceInfo.endPos)
		{
			this.TraceEntity = Util.TraceForEntityInfo(this.TraceInfo.eyePos, this.TraceInfo.endPos);
		}

		if ( this.TraceEntity && !EntityIsValid(this.TraceEntity) )
		{
			triggerInfo =
			{
				Entity = this.TraceEntity,
				Activator = null,
				TagName = this.GetName() + " Exploded.",
				Action = "Exploded",
			};
			SendTrigger(triggerInfo);

			this.SetAvailable(0, false);
			this.DisableGoal(true);
			block(0);
		}

		sleep(1);
	}
};

//////////////////////////////////////////////////////////////////////////
global CreateGui = function(object, guidef)
{
};
//////////////////////////////////////////////////////////////////////////
this.HudDisplay = function(window)
{
	this.CreateGuiFromSchema(this.Schema);
};
