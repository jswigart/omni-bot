// Default RTCW Bot Profile

// MemorySpan is how long it takes(in seconds) for a bot to consider his memory of someone or something
// 'out of date' and not considered for targeting and such
this.MemorySpan = 2.0;

// AimPersistance is how long the bot will aim in the direction of a target after the target has gone out of view.
// This is useful for keeping the bot aiming toward the target in the event of brief obstructions of their view.
this.AimPersistance = 2.0;


// These 3 values are aim properties. Care must be taken when tweaking aim properties, since
// improper values can produce aim oscillations and hurt the bots combat abilities.
this.MaxTurnSpeed = 720.0; // degree's / second
this.AimStiffness = 75.0;
this.AimDamping = 10.0;

// default max view distance. map scripts can override this
this.MaxViewDistance = 4500;

//////////////////////////////////////////////////////////////////////////
// Utility Callbacks

this.SelectClass = function()
{
	sleep( 1 );
	return null;
};

this.SelectTeam = function()
{
	return null;
};

//////////////////////////////////////////////////////////////////////////

global ClassPrimaryWeaponChoice = function( bot )
{
	myteam = bot.GetTeam();
	myclass = bot.GetClass();

	if ( myclass == CLASS.SOLDIER ) {
		wpns =
		{
			WEAPON.MAUSER,
			WEAPON.PANZERFAUST,
			WEAPON.VENOM,
			WEAPON.FLAMETHROWER,
		};
		return wpns[ RandInt( 0, 3 ) ];
	}

	return null;
};

global ClassSecondaryWeaponChoice = function( bot )
{
	return null;
};

this.SelectWeapons = function()
{
	myteam = this.GetTeam();
	myclass = this.GetClass();

	//print("SelectWeapons: Class", myclass, "Team", myteam);

	weaponSelection = {};
	weaponSelection.Primary = ClassPrimaryWeaponChoice( this );
	weaponSelection.Secondary = ClassSecondaryWeaponChoice( this );

	if ( weaponSelection.Primary ) {
		this.ChangePrimaryWeapon( weaponSelection.Primary );
	}

	if ( weaponSelection.Secondary ) {
		this.ChangeSecondaryWeapon( weaponSelection.Secondary );
	}
};


difficulties.InitBotDifficultyProperties( this );
