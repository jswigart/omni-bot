global Map =
{
	Quiet = true,
	FocusPrimary = false,

	Plant_North = "PLANT_North_Radar_01",
	Plant_South = "PLANT_South_Radar_02",
	Mount_mg42_1 = "MOUNTMG42_mg42_1",
	Mount_mg42_2 = "MOUNTMG42_mg42_2",
	Repair_mg42_1 = "REPAIRMG42_mg42_1",
	Repair_mg42_2 = "REPAIRMG42_mg42_2",

	AlliesNearNorth = false,
	NorthStatus = false,
	SouthStatus = false,
	NorthDyno = 0,
	SouthDyno = 0,

	Switches =
	{
		Gate1 =
		{
			Enabled = true,
			Priority = 0.65,
			WaypointName = "gate1",
			LimitTeam = (1<<TEAM.ALLIES), 
			LimitBots = 2,
			//LimitClass = (1<<CLASS.LIEUTENANT) | (1<<CLASS.SOLDIER),
		},
		Gate2 =
		{
			Enabled = false,
			Priority = 0.65,
			WaypointName = "gate2",
			LimitTeam = (1<<TEAM.ALLIES), 
			LimitBots = 2,
		},
	},

	NorthTrigger =
	{
		Name = "NorthTrigger",
		TriggerOnClass = CLASS.ANYPLAYER,
		OnEnter = function(ent)
		{
			if( GetEntTeam(ent) == TEAM.ALLIES )
			{ 
				Map.AlliesNearNorth = true;

				if ( !Map.NorthStatus )
				{
					SetAvailableMapGoals( TEAM.AXIS, false, "DEFEND_.*" );
					SetAvailableMapGoals( TEAM.AXIS, true, "DEFEND_rNorth_c.*" );
					SetAvailableMapGoals( TEAM.AXIS, false, "CALLARTILLERY_spot_r2_door" );
					SetAvailableMapGoals( TEAM.AXIS, false, "CALLARTILLERY_spot_r2" );
					SetAvailableMapGoals( TEAM.AXIS, false, "MOUNTMG42_mg42_2" );
					SetAvailableMapGoals( TEAM.AXIS, false, "REPAIRMG42_mg42_2" );					

					sleep(15);
			
					if ( Map.NorthDyno < 1 )
					{
						SetAvailableMapGoals( TEAM.AXIS, false, "DEFEND_.*" );
						SetAvailableMapGoals( TEAM.AXIS, true, "DEFEND_rNorth_a.*" );
						SetAvailableMapGoals( TEAM.AXIS, true, "CALLARTILLERY_spot_r2_door" );
						SetAvailableMapGoals( TEAM.AXIS, true, "CALLARTILLERY_spot_r2" );	
						SetAvailableMapGoals( TEAM.AXIS, true, "MOUNTMG42_mg42_2" );
						SetAvailableMapGoals( TEAM.AXIS, true, "REPAIRMG42_mg42_2" );						
					} 			
				}
			}
		},
		OnExit = function(ent)
		{
		},
	},

	North_Destroyed = function( trigger )
	{
		if ( TestMap )
			{ return; }

		Map.NorthStatus = true;

		//RTCWUtil.ChangeClass( TEAM.AXIS, CLASS.LIEUTENANT, CLASS.ENGINEER, true, 1 );

		if ( !Map.SouthStatus )
		{
			SetAvailableMapGoals( TEAM.AXIS, false, "DEFEND.*");
			SetAvailableMapGoals( TEAM.ALLIES, false, "ATTACK.*");

			SetAvailableMapGoals( TEAM.AXIS, true, "DEFEND_rSouth.*");
			SetAvailableMapGoals( TEAM.ALLIES, true, "ATTACK_bSouth.*");			
		}
		// *** Artillery
		SetAvailableMapGoals( TEAM.ALLIES, false, "CALLARTILLERY_spot_tunnel_bridge" );
		SetAvailableMapGoals( TEAM.ALLIES, false, "CALLARTILLERY_spot_tunnel_net" );

		SetAvailableMapGoals( TEAM.ALLIES, false, "ARTILLERY_D_target_net_jail" );
		SetAvailableMapGoals( TEAM.ALLIES, false, "ARTILLERY_D_target_bridge" );
		

		SetAvailableMapGoals( TEAM.AXIS, false, "CALLARTILLERY_spot_r2" );
		SetAvailableMapGoals( TEAM.AXIS, false, "CALLARTILLERY_spot_r2_door" );
		SetAvailableMapGoals( TEAM.AXIS, false, "CALLARTILLERY_spot_bridge" );

		SetAvailableMapGoals( TEAM.AXIS, false, "ARTILLERY_S_target_r2_arch" );
		SetAvailableMapGoals( TEAM.AXIS, false, "ARTILLERY_S_target_nwc" );		// gate side of tunnel
		SetAvailableMapGoals( TEAM.AXIS, false, "ARTILLERY_D_target_tunnel_r1" );
		
		
		SetGoalPriority( "CALL.*", 0.5, TEAM_AXIS );	// Make sure axis dont get too excited to call arty on their own position
		SetGoalPriority( "ARTILLLERY.*", 0.5, TEAM_AXIS );

	},

	South_Destroyed = function( trigger )
	{
		if ( TestMap )
			{ return; }

		Map.SouthStatus = true;

		SetAvailableMapGoals( TEAM.ALLIES, true, Map.Plant_North );

		// *** Artillery
		SetAvailableMapGoals( TEAM.ALLIES, true, "CALLARTILLERY_spot_tunnel_bridge" );
		SetAvailableMapGoals( TEAM.ALLIES, true, "CALLARTILLERY_spot_tunnel_net" );

		SetAvailableMapGoals( TEAM.ALLIES, true, "ARTILLERY_D_target_net_jail" );
		SetAvailableMapGoals( TEAM.ALLIES, true, "ARTILLERY_D_target_bridge" );

		SetAvailableMapGoals( TEAM.AXIS, true, "MOUNTMG42_mg42_2" );
		SetAvailableMapGoals( TEAM.AXIS, true, "REPAIRMG42_mg42_2" );


	},

	north_planted = function ( trigger )
	{
		if ( TestMap )
			{ return; }

		SetAvailableMapGoals( TEAM.AXIS, false, "DEFEND_.*" );
		SetAvailableMapGoals( TEAM.AXIS, true, "DEFEND_rNorth_c.*" );

		//RTCWUtil.ChangeClass( TEAM.AXIS, CLASS.LIEUTENANT, CLASS.ENGINEER, false, 1 );

		Map.NorthDyno += 1;
	},

	north_defused = function ( trigger )
	{
		if ( TestMap )
			{ return; }

		Map.NorthDyno -= 1;

		if ( Map.NorthDyno < 1 )
		{
			SetAvailableMapGoals( TEAM.AXIS, false, "DEFEND_.*" );
			SetAvailableMapGoals( TEAM.AXIS, true, "DEFEND_rNorth_a.*" );
			//RTCWUtil.ChangeClass( TEAM.AXIS, CLASS.LIEUTENANT, CLASS.ENGINEER, true, 1 );
		}	
	},

	south_planted = function ( trigger )
	{
		if ( TestMap )
			{ return; }

		Map.SouthDyno += 1;

		if ( !Map.NorthStatus )
			{ RTCWUtil.DisableGoal("DEFUSE_South_Radar_02.*"); }
	},

	south_defused = function ( trigger )
	{
		if ( TestMap )
			{ return; }

		Map.SouthDyno -= 1;
	},

	thirty_second = function( trigger )
	{
		
	},

	gate_lever = function( trigger )
	{
		if ( TestMap )
			{ return; }

		vel = ToVector(trigger.Action);

		//disable immediately to prevent repeated lever usage
		if ( vel.z < 0 )
		{
			Wp.SetWaypointFlag( "gatehack", "closed", true );
			Map.Switches.Gate1.LimitTeam = 0;
		}
		else if ( vel.z > 0 )
		{  
			//open up the node so they can pathfind through gate
			Wp.SetWaypointFlag( "gatehack", "closed", false );
			Map.Switches.Gate1.LimitTeam = 0;
			

			Map.GateStatus = false;
		}
	},

	gate_trigger = function( trigger )
	{
		if ( TestMap )
			{ return; }

		vel = ToVector(trigger.Action);

		if ( vel.y < 0 )
		{
			RTCWUtil.EnableGoal("ROUTE_ntunnel");
			Map.Switches.Gate1.LimitTeam = 0;
			Map.GateStatus = true; 
		}
		else if ( vel.y > 0 )
		{
			RTCWUtil.DisableGoal("ROUTE_ntunnel");
			Map.Switches.Gate1.LimitTeam = (1<<TEAM.ALLIES);
			Map.GateStatus = false;
		}
	},

};

global OnMapLoad = function()
{
	if ( TestMapOn )
		{ Util.AutoTestMap(); }

	OnTrigger( "Allied team has disabled the North Radar!", Map.North_Destroyed );
	OnTrigger( "Planted at the North Radar [01].", Map.north_planted );
	OnTrigger( "Defused at the North Radar [01].", Map.north_defused );
	OnTrigger( "Allied team has disabled the South Radar!", Map.South_Destroyed );
	OnTrigger( "Planted at the South Radar [02].", Map.south_planted );
	OnTrigger( "Defused at the South Radar [02].", Map.south_defused );
	OnTrigger( "thirty second warning.", Map.thirty_second );
	OnTrigger( "base_lever1_goto", Map.gate_lever );
	OnTrigger( "base_gate1_goto", Map.gate_trigger );

	SetMapGoalProperties( "ATTACK_.*", {mincamptime=15, maxcamptime=30});
	SetMapGoalProperties( "DEFEND_.*", {mincamptime=20, maxcamptime=40});
	SetMapGoalProperties( "PANZER_.*", {mincamptime=30, maxcamptime=60});
	SetMapGoalProperties( "MOUNT.*", {mincamptime=30, maxcamptime=60});

	RTCWUtil.LimitToClass("MOUNT.*", TEAM_AXIS, CLASS.MEDIC, CLASS.LIEUTENANT);
	Util.SetMaxUsersInProgress( 1, "MOUNT.*" );
	Util.SetMaxUsersInProgress ( 1, "DEFEND.*" );
	Util.SetMaxUsersInProgress ( 1, "PANZER.*" );	

	RTCWUtil.SetPrimaryGoals(1.0);
	SetGoalPriority( "DEFEND_rNorth_a[16]", 0.60 );

	RTCWUtil.DisableGoal(".*", true); // all but routes
	RTCWUtil.DisableGoal("ROUTE_ntunnel");

	//for now, axis will give up the south plant
	SetAvailableMapGoals( TEAM.AXIS, true, "DEFEND_rNorth_a.*" );
	SetAvailableMapGoals( TEAM.AXIS, true, "PANZER_rNorth.*" );	

	SetAvailableMapGoals( TEAM.ALLIES, true, "ATTACK_bNorth.*" );
	SetAvailableMapGoals( TEAM.ALLIES, true, "PANZER_bNorth.*" );
	SetAvailableMapGoals( TEAM.ALLIES, true, Map.Plant_South );

	// *** Artillery
	SetAvailableMapGoals( TEAM.ALLIES, true, "CALLARTILLERY_spot_tunnel_bridge" );
	SetAvailableMapGoals( TEAM.ALLIES, true, "CALLARTILLERY_spot_net" );		// To call on axis spawn
	SetAvailableMapGoals( TEAM.ALLIES, true, "CALLARTILLERY_spot_tunnel_net" );

	SetAvailableMapGoals( TEAM.ALLIES, true, "ARTILLERY_D_target_net_jail" );
	SetAvailableMapGoals( TEAM.ALLIES, true, "ARTILLERY_S_target_axis_spawn" );
	SetAvailableMapGoals( TEAM.ALLIES, true, "ARTILLERY_D_target_bridge" );

	//SetAvailableMapGoals( TEAM.AXIS, true, "CALLARTILLERY_spot_r2_door" );
	SetAvailableMapGoals( TEAM.AXIS, true, "CALLARTILLERY_spot_r2" );
	//SetAvailableMapGoals( TEAM.AXIS, true, "CALLARTILLERY_spot_bridge" );		// temp test

	SetAvailableMapGoals( TEAM.AXIS, true, "ARTILLERY_S_target_r2_arch" );
	SetAvailableMapGoals( TEAM.AXIS, true, "ARTILLERY_S_target_nwc" );		// gate side of tunnel
	SetAvailableMapGoals( TEAM.AXIS, true, "ARTILLERY_D_target_tunnel_r1" );
	//SetAvailableMapGoals( TEAM.AXIS, true, "ARTILLERY_D_target_r2_door" );
	
	SetGoalPriority( "CALL.*", 1.2 );
	SetGoalPriority( "ARTILLLERY.*", 1.2 );
	SetGoalPriority( "PANZER.*", 0.65 );

	//used to get bots to pathfind through gate rather than waiting for blockable status
	Wp.SetWaypointFlag( "gatehack", "closed", true );

	tOne = OnTriggerRegion(Vector3(603,2690,128), 200, Map.NorthTrigger);
	tTwo = OnTriggerRegion(Vector3(930,1618,384), 200, Map.NorthTrigger);
	
	MapRoutes = 
	{
		PLANT_South_Radar_02 = 
		{
			ROUTE_bSpawn1 =
			{
				ROUTE_office =
				{
					ROUTE_uppersouth = {},
					ROUTE_lowersouth = {},	
				},
			},
			ROUTE_bSpawn2 =
			{
				ROUTE_office =
				{
					ROUTE_uppersouth = {},
					ROUTE_lowersouth = {},	
				},
			},
		},
		PLANT_North_Radar_01 = 
		{
			ROUTE_bSpawn1 =
			{
				ROUTE_office =
				{
					Weight = 2,
					ROUTE_uppersouth = 
					{
						Weight = 2,
						ROUTE_netower = {},
						ROUTE_r2connection = {},
					},
					ROUTE_lowersouth = 
					{
						ROUTE_zone3 = {},
					},	
				},
				ROUTE_ntunnel = {},
			},
			ROUTE_bSpawn2 =
			{
				ROUTE_office =
				{
					Weight = 2,
					ROUTE_uppersouth = 
					{
						Weight = 2,
						ROUTE_netower = {},
						ROUTE_r2connection = {},
					},
					ROUTE_lowersouth = 
					{
						ROUTE_zone3 = {},
					},	
				},
				ROUTE_ntunnel = {},
			},
		},
		DEFEND_rNorth_a1 =
		{
			ROUTE_rSpawn = 
			{
				ROUTE_spawnnorth =
				{
					Weight = 3,
					ROUTE_tinroof = {},
					ROUTE_nstairs = { Weight = 3, },
				},
				ROUTE_spawnsouth =
				{
					Weight = 3,
					ROUTE_tinroof = {},
					ROUTE_nstairs = { Weight = 3, },
				},
				ROUTE_spawnladder =
				{
					ROUTE_tinroof = {},
					ROUTE_nstairs = { Weight = 3, },
				},
			},
		},
	};
	
	MapRoutes.ATTACK_bNorth1 = MapRoutes.PLANT_North_Radar_01;
	MapRoutes.ATTACK_bNorth2 = MapRoutes.PLANT_North_Radar_01;
	MapRoutes.ATTACK_bNorth3 = MapRoutes.PLANT_North_Radar_01;
	MapRoutes.ATTACK_bNorth4 = MapRoutes.PLANT_North_Radar_01;
	MapRoutes.ATTACK_bNorth5 = MapRoutes.PLANT_North_Radar_01;
	MapRoutes.ATTACK_bNorth6 = MapRoutes.PLANT_North_Radar_01;
	MapRoutes.PANZER_bNorth_p1 = MapRoutes.PLANT_North_Radar_01;
	MapRoutes.PANZER_bNorth_p2 = MapRoutes.PLANT_North_Radar_01;
	MapRoutes.PANZER_bNorth_p3 = MapRoutes.PLANT_North_Radar_01;
	MapRoutes.DEFEND_rNorth_a2 = MapRoutes.DEFEND_rNorth_a1;
	MapRoutes.DEFEND_rNorth_a3 = MapRoutes.DEFEND_rNorth_a1;
	MapRoutes.DEFEND_rNorth_a4 = MapRoutes.DEFEND_rNorth_a1;
	MapRoutes.DEFEND_rNorth_a5 = MapRoutes.DEFEND_rNorth_a1;
	MapRoutes.DEFEND_rNorth_a6 = MapRoutes.DEFEND_rNorth_a1;
	MapRoutes.DEFEND_rNorth_a7 = MapRoutes.DEFEND_rNorth_a1;
	MapRoutes.DEFEND_rNorth_c1 = MapRoutes.DEFEND_rNorth_a1;
	MapRoutes.DEFEND_rNorth_c2 = MapRoutes.DEFEND_rNorth_a1;
	MapRoutes.DEFEND_rNorth_c3 = MapRoutes.DEFEND_rNorth_a1;
	MapRoutes.DEFEND_rNorth_c4 = MapRoutes.DEFEND_rNorth_a1;
	MapRoutes.DEFEND_rNorth_c5 = MapRoutes.DEFEND_rNorth_a1;
	MapRoutes.DEFEND_rNorth_c6 = MapRoutes.DEFEND_rNorth_a1;
	MapRoutes.DEFEND_rNorth_c7 = MapRoutes.DEFEND_rNorth_a1;
	MapRoutes.PANZER_rNorth_p3 = MapRoutes.DEFEND_rNorth_a1;
	MapRoutes.ATTACK_bSouth1 = MapRoutes.PLANT_North_Radar_02;
	MapRoutes.ATTACK_bSouth2 = MapRoutes.PLANT_North_Radar_02;
	MapRoutes.ATTACK_bSouth3 = MapRoutes.PLANT_North_Radar_02;
	MapRoutes.ATTACK_bSouth4 = MapRoutes.PLANT_North_Radar_02;
	MapRoutes.ATTACK_bSouth5 = MapRoutes.PLANT_North_Radar_02;
	MapRoutes.ATTACK_bSouth6 = MapRoutes.PLANT_North_Radar_02;
	
	Util.Routes(MapRoutes);
	Util.UpdateSwitchData();
	print( "OnMapLoad" );
};

global OnBotJoin = function( bot )
{
	bot.TargetBreakableDist = 80.0;

	//default spawn
	bot.ChangeSpawnPoint( 0 );

	RTCWUtil.SelectWeapon(bot, WEAPON.PANZERFAUST);
};


