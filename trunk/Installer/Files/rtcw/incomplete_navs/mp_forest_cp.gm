global Map =
{
	Quiet=true,
	Checkpoint_checkpoint01 = "CHECKPOINT_checkpoint01",
	Checkpoint_checkpoint02 = "CHECKPOINT_checkpoint02",
	Checkpoint_checkpoint03 = "CHECKPOINT_checkpoint03",
	Checkpoint_checkpoint04 = "CHECKPOINT_checkpoint04",
	Checkpoint_checkpoint05 = "CHECKPOINT_checkpoint05",
	Checkpoint_checkpoint06 = "CHECKPOINT_checkpoint06",
	Mount_mg42_1 = "MOUNTMG42_mg42_1",
	Repair_mg42_1 = "REPAIRMG42_mg42_1",
	
	//scripted defend spots for dual objective support
	Defend =
	{
		AxisSpawnPt = 1, // axis defenders will choose this spawn point
		AlliesSpawnPt = 2, // allied defenders will choose this spawn point
		//the first bot joining defending team will switch to crucial class
		CrucialClass = CLASS.ENGINEER,
		AxisDefenders = 0, // a variable to keep a count of defenders
		MaxAxisDefenders = 5, // maximum defenders for this team
		AlliesDefenders = 0,
		MaxAlliesDefenders = 5,
		
		// initialize some tables for adding waypoints for them to use
		Axis = {}, 
		Allies = {},		
	},
	
	base_conservative = { "dual_base_1", "dual_base_2", "dual_base_3", "dual_base_4", "dual_base_5", },
	house_conservative = { "dual_house_1", "dual_house_2", "dual_house_3", "dual_house_4", "dual_house_5", },

	checkpoint01_Axis_Captured = function( trigger )
	{
		if ( TestMap )
			{ return; }

		print( "checkpoint01_Axis_Captured" );
	},

	checkpoint01_Allies_Captured = function( trigger )
	{
		if ( TestMap )
			{ return; }

		print( "checkpoint01_Allies_Captured" );
	},

	checkpoint02_Axis_Captured = function( trigger )
	{
		if ( TestMap )
			{ return; }

		print( "checkpoint02_Axis_Captured" );
	},

	checkpoint02_Allies_Captured = function( trigger )
	{
		if ( TestMap )
			{ return; }

		print( "checkpoint02_Allies_Captured" );
	},

	checkpoint03_Axis_Captured = function( trigger )
	{
		if ( TestMap )
			{ return; }

		print( "checkpoint03_Axis_Captured" );
	},

	checkpoint03_Allies_Captured = function( trigger )
	{
		if ( TestMap )
			{ return; }

		print( "checkpoint03_Allies_Captured" );
	},

	checkpoint04_Axis_Captured = function( trigger )
	{
		if ( TestMap )
			{ return; }

		print( "checkpoint04_Axis_Captured" );
	},

	checkpoint04_Allies_Captured = function( trigger )
	{
		if ( TestMap )
			{ return; }

		print( "checkpoint04_Allies_Captured" );
	},

	checkpoint05_Axis_Captured = function( trigger )
	{
		if ( TestMap )
			{ return; }

		print( "checkpoint05_Axis_Captured" );
	},

	checkpoint05_Allies_Captured = function( trigger )
	{
		if ( TestMap )
			{ return; }

		print( "checkpoint05_Allies_Captured" );
	},

	checkpoint06_Axis_Captured = function( trigger )
	{
		if ( TestMap )
			{ return; }

		print( "checkpoint06_Axis_Captured" );
	},

	checkpoint06_Allies_Captured = function( trigger )
	{
		if ( TestMap )
			{ return; }

		print( "checkpoint06_Allies_Captured" );
	},

};

global OnMapLoad = function()
{
	if ( TestMapOn )
		{ Util.AutoTestMap(); }

	OnTrigger( "MISSING_STRING", Map.checkpoint01_Axis_Captured );
	OnTrigger( "MISSING_STRING", Map.checkpoint01_Allies_Captured );
	OnTrigger( "MISSING_STRING", Map.checkpoint02_Axis_Captured );
	OnTrigger( "MISSING_STRING", Map.checkpoint02_Allies_Captured );
	OnTrigger( "MISSING_STRING", Map.checkpoint03_Axis_Captured );
	OnTrigger( "MISSING_STRING", Map.checkpoint03_Allies_Captured );
	OnTrigger( "MISSING_STRING", Map.checkpoint04_Axis_Captured );
	OnTrigger( "MISSING_STRING", Map.checkpoint04_Allies_Captured );
	OnTrigger( "MISSING_STRING", Map.checkpoint05_Axis_Captured );
	OnTrigger( "MISSING_STRING", Map.checkpoint05_Allies_Captured );
	OnTrigger( "MISSING_STRING", Map.checkpoint06_Axis_Captured );
	OnTrigger( "MISSING_STRING", Map.checkpoint06_Allies_Captured );
	
	RTCWUtil.DisableGoal(".*", true); //all but the routes
	RTCWUtil.EnableGoal("CHECKPOINT.*", true); //all but the routes
	
	SetMapGoalProperties( "SNIPE_.*", {mincamptime=60, maxcamptime=90});
	SetMapGoalProperties( "ATTACK_.*", {mincamptime=1, maxcamptime=1}); //used as 'roams'
	SetMapGoalProperties( "DEFEND_.*", {mincamptime=15, maxcamptime=30});
	SetMapGoalProperties( "DEFEND_eng.*", {mincamptime=30, maxcamptime=60});
	SetMapGoalProperties( "PANZER_.*", {mincamptime=60, maxcamptime=90});	
	SetMapGoalProperties( "MOUNTMG42_.*", {mincamptime=60, maxcamptime=90});
	
	Map.Defend.Axis = Map.base_conservative;
	Map.Defend.Allies = Map.house_conservative;

	//~SetAvailableMapGoals( TEAM.AXIS, false, ".*" );
	//~SetAvailableMapGoals( TEAM.ALLIES, false, ".*" );

	print( "OnMapLoad" );
};

// Uncomment for shootable breakables

global OnBotJoin = function( bot )
{
	bot.TargetBreakableDist = 300.0;
	
	//select spawn point and change class if necessary
	RTCWUtil.SetDualObjective(bot);
};
