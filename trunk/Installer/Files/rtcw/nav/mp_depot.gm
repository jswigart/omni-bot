global Map =
{
	Quiet = true,
	DispenseAmmoTime = 10,
	Checkpoint_flag_respawn_obj = "CHECKPOINT_flag_respawn_obj",
	Plant_Field_Ops = "PLANT_Allied_Field_Operations",
	Plant_AA_Gun = "PLANT_Anti_Aircraft_Gun",
	Plant_East_Gate = "PLANT_East_Gate",
	Plant_West_Gate = "PLANT_West_Gate",
	Mount_cymg = "MOUNTMG42_cymg",
	Mount_opsmg = "MOUNTMG42_opsmg",
	Repair_cymg = "REPAIRMG42_cymg",
	Repair_opsmg = "REPAIRMG42_opsmg",
	
	FlagStatus = 0,
	EastGateStatus = false,
	WestGateStatus = false,
	RuinsASTimer = 0,
	WarehouseASTimer = 0,
	AxisInRuins = false,
	AxisInWarehouse = false,
	
	AADyno = 0,
	OpsDyno = 0,
	WestDyno = 0,
	EastDyno = 0,

	Airstrike =
	{
		ascoal =
		{
			Enabled = false,
			Team = (1<<TEAM.AXIS),
			Waypoint = "ascoalflag",
		},
	},

	//scripted defend spots for dual objective support
	Defend =
	{
		AxisSpawnPt = 1, // axis defenders will choose this spawn point
		AlliesSpawnPt = 2, // allied defenders will choose this spawn point
		//the first bot joining defending team will switch to crucial class
		CrucialClass = CLASS.ENGINEER,
		AxisDefenders = 0, // a variable to keep a count of defenders
		MaxAxisDefenders = 5, // maximum defenders for this team
		AlliesDefenders = 0,
		MaxAlliesDefenders = 5,
		
		// initialize some tables for adding waypoints for them to use
		Axis = {}, 
		Allies = {},		
	},
	
	FriendlyFire,
	
	// tables of waypoint names to be copied to the teams Defend tables
	aa_conservative = { "aad1", "aad2", "aad3", "aad4", "aad5", "aad6", },
	aa_flex = { "aaflex1", "aaflex2", "aaflex3", "aaflex4", "aaflex5", "aaflex6", },
	ops_default = { "opsd1", "opsd2", "opsd3", "opsd4", "opsd5", "opsd6", },
	ops_flex = { "opsflex1", "opsflex2", "opsflex3", "opsflex4", "opsflex5", "opsflex6", },
	
	//tables to hold current AS goals	
	AxisASTable = {},
	AlliesASTable = {},
	AxisASPriority = 0.94, // less than Defend's. thx Martin
	AlliesASPriority = 0.94, // less than Defend's. thx Martin	

	ruinsas = { "ruinsas1", "ruinsas2", },
	opsas = { "as_ops1", "as_ops2", "as_ops3", },
	aaas = { "as_aa1", "as_aa2", },
	asspawn = { "rasspawn1", "rasspawn2", },
	ruinsallied = { "bruinsas1", "bruinsas2",},
	warehouseallied = { "bwhas1", },
	ruinswhallied = { "bruinsas1", "bruinsas2", "bwhas1", },
	
	Navigation =
	{
		trainyardele =
		{
			gotowp = "tyeletop",

			navigate = function(_this)
			{
				_this.Bot.HoldButton(BTN.FORWARD, 3);
				sleep(3);
			},			
		},
		
		tyelemid =
		{
			navigate = function(_this)
			{
				_this.Bot.HoldButton(BTN.FORWARD, 4);
				sleep(4);
			},			
		},
		
		elejump =
		{
			navigate = function(_this)
			{
				_this.Bot.PressButton(BTN.JUMP);
				yield(); yield();
			},			
		},
		
		aaele2 =
		{
			navigate = function(_this)
			{
				_this.Bot.HoldButton(BTN.FORWARD, 5);
				sleep(5);
			},			
		},		
		
		aaele =
		{
			navigate = function(_this)
			{
				_this.Bot.HoldButton(BTN.FORWARD, 3);
				sleep(3);
			},			
		},

		cyladder =
		{
			navigate = function(_this)
			{
				_this.Bot.HoldButton(BTN.FORWARD, 1.5);
				sleep(1.5);
			},			
		},			
		
		trainbox =
		{
			navigate = function(_this)
			{
				_this.Bot.PressButton(BTN.JUMP);
				sleep(0.25);
				_this.Bot.HoldButton(BTN.SPRINT, 3);
				_this.Bot.HoldButton(BTN.CROUCH, 1);
				sleep(3);
			},
		},
		
		roofjump =
		{
			navigate = function(_this)
			{
				_this.Bot.HoldButton( BTN.STRAFE_L, 0.5 );
				_this.Bot.HoldButton(BTN.FORWARD, 2.5);
				_this.Bot.HoldButton(BTN.SPRINT, 3);
				sleep(3);
				_this.Bot.SayVoice( VOICE.G_CHEER );
			},			
		},

		quickjump =
		{
			navigate = function(_this)
			{
				_this.Bot.PressButton(BTN.JUMP);
				sleep(0.25);
			},			
		},

		strafeljump =
		{
			navigate = function(_this)
			{
				_this.Bot.PressButton(BTN.JUMP);
				yield();
				_this.Bot.HoldButton(BTN.STRAFE_L, 1);
				sleep(1);
			},			
		},			
	},

	Ops_Destroyed = function( trigger )
	{
		if ( TestMap )
			{ return; }
	},
	
	Ops_Planted = function( trigger )
	{
		if ( TestMap )
			{ return; }
			
		Map.OpsDyno += 1;
		
		Map.AxisASTable = Map.opsas;
		SetAvailableMapGoals( TEAM.AXIS, false, "DEFEND_lt_ruins.*" );
		SetAvailableMapGoals( TEAM.AXIS, true, "DEFEND_eng_opscover.*" );
	},

	Ops_Defused = function( trigger )
	{
		if ( TestMap )
			{ return; }
			
		Map.OpsDyno -= 1;

		if ( Map.OpsDyno < 1 && Map.FlagStatus == 1 )
		{
			SetAvailableMapGoals( TEAM.AXIS, false, "DEFEND_eng_opscover.*" );
			
			if ( Map.FlagStatus == 1 )
			{
				Map.AxisASTable = Map.ruinsas;
				SetAvailableMapGoals( TEAM.AXIS, true, "DEFEND_lt_ruins.*" );
			}
			else
			{
				Map.AxisASTable = {};
			}
		}
	},	

	AA_Destroyed = function( trigger )
	{
		if ( TestMap )
			{ return; }
	},
	
	AA_Planted = function( trigger )
	{
		if ( TestMap )
			{ return; }
			
		Map.AADyno += 1;
		
		if ( Map.FriendlyFire < 1 )
			{ Map.AlliesASTable = Map.aaas; }
			
		SetAvailableMapGoals( TEAM.ALLIES, true, "DEFEND_aacover.*" );
	},

	AA_Defused = function( trigger )
	{
		if ( TestMap )
			{ return; }
			
		Map.AADyno -= 1;

		if ( Map.AADyno < 1 )
		{
			Map.AlliesASTable = {};
			SetAvailableMapGoals( TEAM.ALLIES, false, "DEFEND_aacover.*" );
		}
	},	

	West_Gate_Destroyed = function( trigger )
	{
		if ( TestMap )
			{ return; }
			
		Map.WestGateStatus = true;

		SetAvailableMapGoals( TEAM.AXIS, true, Map.Plant_Field_Ops );
		SetAvailableMapGoals( TEAM.AXIS, true, Map.Checkpoint_flag_respawn_obj );
		SetAvailableMapGoals( TEAM.AXIS, false, "DEFEND_eng_westgate.*");
		Map.Defend.Axis = Map.aa_conservative;
	},
	
	West_Gate_Planted = function( trigger )
	{
		if ( TestMap )
			{ return; }
			
		Map.WestDyno += 1;
		
		SetAvailableMapGoals( TEAM.AXIS, true, "DEFEND_eng_westgate.*");
		SetAvailableMapGoals( TEAM.ALLIES, false, "DEFUSE_West.*" );
	},

	West_Gate_Defused = function( trigger )
	{
		if ( TestMap )
			{ return; }
			
		Map.WestDyno -= 1;	
		
		if ( Map.WestDyno < 1 )
			{ SetAvailableMapGoals( TEAM.AXIS, false, "DEFEND_eng_westgate.*"); }
	},	

	East_Gate_Destroyed = function( trigger )
	{
		if ( TestMap )
			{ return; }
			
		Map.EastGateStatus = true;
		
		//path through gate instead of over boxes
		Wp.SetWaypointFlag( "spawnboxes", "closed", true );
		
		SetAvailableMapGoals( TEAM.ALLIES, true, Map.Plant_AA_Gun );
		SetAvailableMapGoals( TEAM.ALLIES, true, Map.Checkpoint_flag_respawn_obj );
		SetAvailableMapGoals( TEAM.ALLIES, false, "DEFEND_eng_eastgate.*");
		Map.Defend.Allies = Map.ops_default;
	},
	
	East_Gate_Planted = function( trigger )
	{
		if ( TestMap )
			{ return; }
			
		Map.EastDyno += 1;
		
		SetAvailableMapGoals( TEAM.ALLIES, true, "DEFEND_eng_eastgate.*");
		SetAvailableMapGoals( TEAM.AXIS, false, "DEFUSE_East.*" );
	},

	East_Gate_Defused = function( trigger )
	{
		if ( TestMap )
			{ return; }
			
		Map.EastDyno -= 1;

		if ( Map.WestDyno < 1 )
			{ SetAvailableMapGoals( TEAM.ALLIES, false, "DEFEND_eng_eastgate.*"); }		
	},	

	CP_Axis_Captured = function( trigger )
	{
		if ( TestMap )
			{ return; }
			
		Map.FlagStatus = 1;

		Wp.SetWaypointFlag( "ruinsdrop", "closed", true);	//Dont allow axis to drop down	
		
		//axis 
		Map.AxisASTable = Map.ruinsas;
		Map.Airstrike.ascoal.Enabled = false;
		SetAvailableMapGoals( TEAM.AXIS, true, "DEFEND_lt_ruins.*" );
		SetAvailableMapGoals( TEAM.AXIS, true, "DEFEND_rOps.*" );
		SetAvailableMapGoals( TEAM.AXIS, false, "DEFEND_rcy.*" );
		SetAvailableMapGoals( TEAM.AXIS, false, Map.Mount_cymg );
		SetAvailableMapGoals( TEAM.AXIS, false, Map.Repair_cymg );
		SetAvailableMapGoals( TEAM.AXIS, true, "SNIPE_rTrain.*" );
		SetAvailableMapGoals( TEAM.AXIS, false, "SNIPE_rcysnipe.*" );
		SetAvailableMapGoals( TEAM.AXIS, false, "PANZER_rcypanz.*" );
		
		//allies 
		SetAvailableMapGoals( TEAM.ALLIES, true, "DEFEND_btrain.*" );
		SetAvailableMapGoals( TEAM.ALLIES, false, Map.Checkpoint_flag_respawn_obj );
		SetAvailableMapGoals( TEAM.ALLIES, true, Map.Mount_opsmg );
		SetAvailableMapGoals( TEAM.ALLIES, true, Map.Repair_opsmg );
		SetAvailableMapGoals( TEAM.ALLIES, false, "SNIPE_bTrain.*" );
		SetAvailableMapGoals( TEAM.ALLIES, true, "SNIPE_bruinsnipe.*" );
		SetAvailableMapGoals( TEAM.ALLIES, true, "PANZER_btrainpanz.*" );
		SetAvailableMapGoals( TEAM.ALLIES, true, "ARTILLERY_S_bOps.*" );
		SetAvailableMapGoals( TEAM.ALLIES, false, "ARTILLERY_S_bRockpath.*" );
		SetAvailableMapGoals( TEAM.ALLIES, false, "ARTILLERY_S_bCommand.*" );
	},

	CP_Allies_Captured = function( trigger )
	{
		if ( TestMap )
			{ return; }
		
		Map.FlagStatus = 2;
		
		Wp.SetWaypointFlag( "ruinsdrop", "closed", false);	//Let them drop to fallback faster
		
		//axis 
		Map.AxisASTable = Map.asspawn;
		Map.Airstrike.ascoal.Enabled = true;
		SetAvailableMapGoals( TEAM.AXIS, false, "DEFEND_lt_ruins.*" );
		SetAvailableMapGoals( TEAM.AXIS, false, "DEFEND_rOps.*" );
		Map.Defend.Axis = Map.aa_conservative;
		SetAvailableMapGoals( TEAM.AXIS, true, "DEFEND_rcy.*" );
		SetAvailableMapGoals( TEAM.AXIS, false, Map.Checkpoint_flag_respawn_obj );
		SetAvailableMapGoals( TEAM.AXIS, true, Map.Mount_cymg );
		SetAvailableMapGoals( TEAM.AXIS, true, Map.Repair_cymg );
		SetAvailableMapGoals( TEAM.AXIS, false, "SNIPE_rTrain.*" );
		SetAvailableMapGoals( TEAM.AXIS, true, "SNIPE_rcysnipe.*" );
		SetAvailableMapGoals( TEAM.AXIS, true, "PANZER_rcypanz.*" );
		if ( Map.FriendlyFire < 1 ){
			SetAvailableMapGoals( TEAM.AXIS, true, "ARTILLERY_S_rAA.*" );
		}
		
		//allies 
		SetAvailableMapGoals( TEAM.ALLIES, false, "DEFEND_btrain.*" );	
		SetAvailableMapGoals( TEAM.ALLIES, false, Map.Mount_opsmg );
		SetAvailableMapGoals( TEAM.ALLIES, false, Map.Repair_opsmg );
		SetAvailableMapGoals( TEAM.ALLIES, true, "SNIPE_bTrain.*" );
		SetAvailableMapGoals( TEAM.ALLIES, false, "SNIPE_bruinsnipe.*" );
		SetAvailableMapGoals( TEAM.ALLIES, false, "PANZER_btrainpanz.*" );
		SetAvailableMapGoals( TEAM.ALLIES, false, "ARTILLERY_S_bOps.*" );
		SetAvailableMapGoals( TEAM.ALLIES, true, "ARTILLERY_S_bRockpath.*" );
		if ( Map.FriendlyFire < 1 ){
			SetAvailableMapGoals( TEAM.ALLIES, true, "ARTILLERY_S_bCommand.*" );
		}
	},
	
	toggle_flag = function()
	{
		count = 1;
		//swap availablilty every 5 minutes
		while ( 1 )
		{
			if ( TestMap )
				{ return; }

			count += 1;
			if ( count % 300 == 0 )
			{
				//print("toggling");
				if ( Map.FlagStatus == 1 )
				{
					SetAvailableMapGoals( TEAM.ALLIES, true, Map.Checkpoint_flag_respawn_obj );
					SetAvailableMapGoals( TEAM.AXIS, false, Map.Checkpoint_flag_respawn_obj );
				}
				else
				{
					SetAvailableMapGoals( TEAM.ALLIES, false, Map.Checkpoint_flag_respawn_obj );
					SetAvailableMapGoals( TEAM.AXIS, true, Map.Checkpoint_flag_respawn_obj );				
				}
				
				count = 1;
			}
			sleep(1);
		}
	},
	RuinsTrigger = 
	{
		Name = "RuinsTrigger",
		TriggerOnClass = CLASS.ANYPLAYER,
		OnEnter = function(ent)
		{
			if ( TestMap )
				{ return; }	
				
			if( GetEntTeam(ent) == TEAM.AXIS )   
			{ 
				if (Map.FlagStatus == 2)   
				   { return; }
				Map.AxisInRuins = true;
				
				if (Map.AxisInWarehouse == true){
					Map.AlliesASTable = Map.ruinswhallied;
				}else{
					Map.AlliesASTable = Map.ruinsallied; 
				}
				Map.RuinsASTimer = GetTime() + 30; 	//Martin - GetTime is in SECONDS.
				while ((GetTime() < Map.RuinsASTimer) && (Map.FlagStatus != 2) ) 
				{ 
				   sleep(1); 
				} 
				
				Map.AxisInRuins = false;
				if (Map.AxisInWarehouse == true){
					Map.AlliesASTable = Map.warehouseallied;
				}else{
					Map.AlliesASTable = {}; 
				} 
			}
		},
		OnExit = function(ent)
		{
			if ( TestMap )
				{ return; }			
		},	
	},
	
	WarehouseTrigger = 
	{
		Name = "WarehouseTrigger",
		TriggerOnClass = CLASS.ANYPLAYER,
		OnEnter = function(ent)
		{
			if ( TestMap )
				{ return; }	
				
			if( GetEntTeam(ent) == TEAM.AXIS )   
			{ 
				if (Map.FlagStatus == 2)   
				   { return; } 
				Map.AxisInWarehouse = true;
				
				if (Map.AxisInRuins == true){
					Map.AlliesASTable = Map.ruinswhallied;
				}else{
					Map.AlliesASTable = Map.warehouseallied; 
				}
				Map.WarehouseASTimer = GetTime() + 30; 	//Martin - GetTime is in SECONDS.
				while ((GetTime() < Map.WarehouseASTimer) && (Map.FlagStatus != 2) ) 
				{ 
				   sleep(1); 
				}
				Map.AxisInWarehouse = false;
				if (Map.AxisInRuins == true){
					Map.AlliesASTable = Map.ruinsallied;
				}else{
					Map.AlliesASTable = {}; 
				} 
			}
		},
		OnExit = function(ent)
		{
			if ( TestMap )
				{ return; }			
		},	
	},
};

global OnMapLoad = function()
{
	Util.AddUseWp("PLANT_Anti_Aircraft_Gun", "aa1");
	Util.AddUseWp("PLANT_Anti_Aircraft_Gun", "aa2");
	Util.AddUseWp("PLANT_Allied_Field_Operations", "ops1");
	Util.AddUseWp("PLANT_Allied_Field_Operations", "ops2");
	Util.AddUseWp("PLANT_Allied_Field_Operations", "ops3");
	
	if ( TestMapOn )
		{ Util.AutoTestMap(); }

	OnTrigger( "Allied team destoyed the Anti-Aircraft gun!", Map.AA_Destroyed );
	OnTrigger( "Planted at the Anti-Aircraft Gun.", Map.AA_Planted );
	OnTrigger( "Defused at the Anti-Aircraft Gun.", Map.AA_Defused );	
	OnTrigger( "Axis team destroyed the Allied Field Operations!", Map.Ops_Destroyed );
	OnTrigger( "Planted at the Allied Field Operations.", Map.Ops_Planted );
	OnTrigger( "Defused at the Allied Field Operations.", Map.Ops_Defused );
	OnTrigger( "Axis has breached the West Gate!", Map.West_Gate_Destroyed );
	OnTrigger( "Planted at the West Gate.", Map.West_Gate_Planted );
	OnTrigger( "Defused at the West Gate.", Map.West_Gate_Defused );
	OnTrigger( "Allies have breached the East Gate!", Map.East_Gate_Destroyed );
	OnTrigger( "Planted at the East Gate.", Map.East_Gate_Planted );
	OnTrigger( "Defused at the East Gate.", Map.East_Gate_Defused );	
	OnTrigger( "Axis captures the Forward Deployment Area!", Map.CP_Axis_Captured );
	OnTrigger( "Allies capture the Forward Deployment Area!", Map.CP_Allies_Captured );
	
	tOne = OnTriggerRegion(AABB(-8514,3503,287,-8496,3638,392), Map.RuinsTrigger);
	tTwo = OnTriggerRegion(AABB(-8072,1535,-366,-8032,1728,-245), Map.WarehouseTrigger);
	tThree = OnTriggerRegion(AABB(-8032.000,3701.000,287.000,-7855.000,3741.000,409.000), Map.RuinsTrigger);

	SetMapGoalProperties( "SNIPE_.*", {mincamptime=60, maxcamptime=90});
	SetMapGoalProperties( "ATTACK_.*", {mincamptime=1, maxcamptime=1}); //used as 'roams'
	SetMapGoalProperties( "DEFEND_.*", {mincamptime=15, maxcamptime=30});
	SetMapGoalProperties( "DEFEND_eng.*", {mincamptime=30, maxcamptime=60});
	SetMapGoalProperties( "PANZER_.*", {mincamptime=60, maxcamptime=90});	
	SetMapGoalProperties( "MOUNTMG42_.*", {mincamptime=60, maxcamptime=90});

	//open up some airstrike goals if ff is off
	Map.FriendlyFire = GetCvar("g_friendlyfire");
	
	RTCWUtil.DisableGoal(".*", true); //all but the routes
	RTCWUtil.LimitToClass("DEFEND_eng_westgate.*", TEAM.AXIS, CLASS.ENGINEER);
	RTCWUtil.LimitToClass("DEFEND_eng_opscover.*", TEAM.AXIS, CLASS.ENGINEER);
	RTCWUtil.LimitToClass("DEFEND_lt_ruins.*", TEAM.AXIS, CLASS.LIEUTENANT);
	RTCWUtil.LimitToClass("DEFEND_eng_eastgate.*", TEAM.ALLIES, CLASS.ENGINEER);
	RTCWUtil.LimitToClass("DEFEND_eng_aacover.*", TEAM.ALLIES, CLASS.ENGINEER);
	SetGoalPriority("DEFEND_eng_westgate.*", 0.7, TEAM.AXIS, CLASS.ENGINEER);
	SetGoalPriority("DEFEND_eng_opscover.*", 0.7, TEAM.AXIS, CLASS.ENGINEER);
	SetGoalPriority("DEFEND_lt_ruins.*", 0.7, TEAM.AXIS, CLASS.LIEUTENANT);
	SetGoalPriority("DEFEND_eng_eastgate.*", 0.7, TEAM.ALLIES, CLASS.ENGINEER);
	SetGoalPriority("DEFEND_eng_aacover.*", 0.7, TEAM.ALLIES, CLASS.ENGINEER);
	
	// treat attack goals as secondary 'roams' for when all the defend goals are occupied
	SetGoalPriority("ATTACK.*", 0.45);
	SetGoalPriority("DEFEND_bAA.*", 0.48);
	SetGoalPriority("ARTILLERY.*", 1.0);
	
	Map.Defend.Axis = Map.aa_flex;
	Map.Defend.Allies = Map.ops_flex;
	SetAvailableMapGoals( TEAM.AXIS, true, "DEFEND_rOps.*" );
	SetAvailableMapGoals( TEAM.AXIS, true, "ATTACK_rOps.*" );
	SetAvailableMapGoals( TEAM.AXIS, true, "SNIPE_rTrain.*" );
	SetAvailableMapGoals( TEAM.ALLIES, true, "DEFEND_bAA.*" );
	SetAvailableMapGoals( TEAM.ALLIES, true, "ATTACK_bAA.*" );
	SetAvailableMapGoals( TEAM.ALLIES, true, "SNIPE_bTrain.*" );	
	
	SetAvailableMapGoals( TEAM.ALLIES, true, Map.Plant_East_Gate );
	SetAvailableMapGoals( TEAM.AXIS, true, Map.Plant_West_Gate );
	
	//run a thread to toggle flag availability
	thread(Map.toggle_flag);
	
	Wp.SetWaypointFlag( "spawnboxes", "closed", false );
	
	Util.SetMaxUsersInProgress( 2, Map.Checkpoint_flag_respawn_obj );
	Util.SetMaxUsersInProgress( 1, "MOUNTMG42.*" );
	Util.SetMaxUsersInProgress( 1, "SNIPE.*" );
	Util.SetMaxUsersInProgress( 1, "PANZER.*" );
	Util.SetMaxUsersInProgress( 1, "DEFEND.*" );
	Util.SetMaxUsersInProgress( 2, "ROUTE_cynw" );

	MapRoutes =
	{
		DEFEND_rOps1 =
		{
			ROUTE_axisrearspawn =
			{
				ROUTE_ltwest = 
				{
					ROUTE_ltsouth =
					{
						ROUTE_ruins = {},
						ROUTE_wh = {},
					},
				},
				ROUTE_eastlongtrain =
				{
					ROUTE_shorttrain = {},
					ROUTE_rearwh = { ROUTE_wh = {}, },
				},
			},
			ROUTE_forwardspawn2 =
			{
				ROUTE_ruins = {},
				ROUTE_rearwh = { ROUTE_wh = {}, },
				ROUTE_shorttrain = 
				{
					ROUTE_office = { ROUTE_whexit = {}, },
				},
				ROUTE_westlongtrain = {},
				ROUTE_cyconnect = 
				{ 
					ROUTE_ltsouth =
					{
						ROUTE_ruins = {},
						ROUTE_rearwh = { ROUTE_wh = {}, },
					},
				},
			},
		},
		DEFEND_bAA1 =
		{
			ROUTE_adspawn1 =
			{
				ROUTE_ltsouth = 
				{
					ROUTE_cyconnect = {},
					ROUTE_ltnorth = 
					{ 
						ROUTE_aaele = 
						{
							ROUTE_aaele2 = {},
							ROUTE_ducts = {},
						}, 
					},
				},
				ROUTE_westlongtrain =
				{
					ROUTE_tgarage1 = 
					{
						ROUTE_cargo = 
						{ 
							ROUTE_radioroom = 
							{
								ROUTE_aaele2 = {},
								ROUTE_ducts = {},								
							}, 
						},
						ROUTE_rockpath = { Weight = 2, },
						ROUTE_lcargo = 
						{ 
							ROUTE_radioroom = 
							{
								ROUTE_aaele2 = {},
								ROUTE_ducts = {},							
							}, 
						},
					},
					ROUTE_tgarage2 = 
					{ 
						ROUTE_cargo = 
						{ 
							ROUTE_radioroom = 
							{
								ROUTE_aaele2 = {},
								ROUTE_ducts = {},							
							}, 
						},
						ROUTE_rockpath = { Weight = 2, },
						ROUTE_lcargo = 
						{ 
							ROUTE_radioroom = 
							{
								ROUTE_aaele2 = {},
								ROUTE_ducts = {},							
							}, 
						},
					},
				},
			},
			ROUTE_forwardspawn1 =
			{
				ROUTE_flagspawnunstuck = 
				{
					Weight = 2,
					ROUTE_midlongtrain = 
					{
						ROUTE_eastlongtrain =
						{
							ROUTE_tgarage2 =
							{
								ROUTE_cargo = 
								{ 
									ROUTE_radioroom = 
									{
										ROUTE_aaele2 = {},
										ROUTE_ducts = {},									
									}, 
								},
								ROUTE_rockpath = {},								
							},
						},
					},
					ROUTE_ltsouth = 
					{
						ROUTE_cyconnect = {},
						ROUTE_ltnorth = { ROUTE_aaele = {}, },
					},						
				},				
				ROUTE_tgarage1 =
				{
					Weight = 2,
					ROUTE_cargo = 
					{ 
						ROUTE_radioroom = 
						{
							ROUTE_aaele2 = {},
							ROUTE_ducts = {},						
						}, 
					},
					ROUTE_tgaragemid = 
					{
						ROUTE_tgarage2 = 
						{
							ROUTE_cargo = 
							{ 
								ROUTE_radioroom = 
								{
									ROUTE_aaele2 = {},
									ROUTE_ducts = {},								
								}, 
							},
							ROUTE_rockpath = {},
						},
					},
				},
				ROUTE_cynw =
				{
					ROUTE_lcargo = 
					{ 
						ROUTE_radioroom = 
						{
							ROUTE_aaele2 = {},
							ROUTE_ducts = {},						
						}, 
					},
					ROUTE_rockpath = {},
				},				
			},	
			ROUTE_forwardspawn2 =
			{
				ROUTE_flagspawnunstuck = 
				{
					Weight = 2,
					ROUTE_midlongtrain = 
					{
						ROUTE_eastlongtrain =
						{
							ROUTE_tgarage2 =
							{
								ROUTE_cargo = 
								{ 
									ROUTE_radioroom = 
									{
										ROUTE_aaele2 = {},
										ROUTE_ducts = {},									
									}, 
								},
								ROUTE_rockpath = {},								
							},
						},
					},
					ROUTE_ltsouth = 
					{
						ROUTE_cyconnect = {},
						ROUTE_ltnorth = 
						{ 
							ROUTE_aaele = 
							{
								ROUTE_aaele2 = {},
								ROUTE_ducts = {},							
							}, 
						},
					},						
				},				
				ROUTE_tgarage1 =
				{
					Weight = 2,
					ROUTE_cargo = 
					{ 
						ROUTE_radioroom = 
						{
							ROUTE_aaele2 = {},
							ROUTE_ducts = {},						
						}, 
					},
					ROUTE_tgaragemid = 
					{
						ROUTE_tgarage2 = 
						{
							ROUTE_cargo = 
							{ 
								ROUTE_radioroom = 
								{
									ROUTE_aaele2 = {},
									ROUTE_ducts = {},								
								}, 
							},
							ROUTE_rockpath = {},
						},
					},
				},
				ROUTE_cynw =
				{
					ROUTE_lcargo = 
					{ 
						ROUTE_radioroom = 
						{
							ROUTE_aaele2 = {},
							ROUTE_ducts = {},						
						}, 
					},
					ROUTE_rockpath = {},
				},			
			},			
		},
		DEFEND_btrain1 =
		{
			ROUTE_adspawn1 =
			{
				ROUTE_shorttrain2 = {},
				ROUTE_opsy = { ROUTE_wh = {}, },
			},
			ROUTE_adspawn2 =
			{
				ROUTE_shorttrain2 = {},
				ROUTE_opsy = { ROUTE_wh = {}, },
			},
			ROUTE_arspawn1 =
			{
				ROUTE_shorttrain2 = {},
				ROUTE_wh = {}, 
			},	
			ROUTE_arspawn2 =
			{
				ROUTE_shorttrain2 = {},
				ROUTE_wh = {}, 
			},	
			ROUTE_arspawn3 =
			{
				ROUTE_shorttrain2 = {},
				ROUTE_wh = {}, 
			},				
		},
	};
	
	MapRoutes.DEFEND_rOps1.ROUTE_depotspawn = MapRoutes.DEFEND_rOps1.ROUTE_axisrearspawn;
	MapRoutes.DEFEND_rOps2 = MapRoutes.DEFEND_rOps1;
	MapRoutes.DEFEND_rOps3 = MapRoutes.DEFEND_rOps1;
	MapRoutes.DEFEND_rOps4 = MapRoutes.DEFEND_rOps1;
	MapRoutes.DEFEND_rOps5 = MapRoutes.DEFEND_rOps1;
	MapRoutes.DEFEND_rOps6 = MapRoutes.DEFEND_rOps1;
	MapRoutes.ATTACK_rOps7 = MapRoutes.DEFEND_rOps1;
	MapRoutes.ATTACK_rOps8 = MapRoutes.DEFEND_rOps1;
	MapRoutes.ATTACK_rOps9 = MapRoutes.DEFEND_rOps1;
	MapRoutes.ATTACK_rOps10 = MapRoutes.DEFEND_rOps1;
	MapRoutes.PLANT_Allied_Field_Operations = MapRoutes.DEFEND_rOps1;
	MapRoutes.DEFEND_bAA1.ROUTE_adspawn2 = MapRoutes.DEFEND_bAA1.ROUTE_adspawn1;
	MapRoutes.DEFEND_bAA1.ROUTE_arspawn1 = MapRoutes.DEFEND_bAA1.ROUTE_adspawn1;
	MapRoutes.DEFEND_bAA1.ROUTE_arspawn2 = MapRoutes.DEFEND_bAA1.ROUTE_adspawn1;
	MapRoutes.DEFEND_bAA1.ROUTE_arspawn3 = MapRoutes.DEFEND_bAA1.ROUTE_adspawn1;
	MapRoutes.PLANT_Anti_Aircraft_Gun = MapRoutes.DEFEND_bAA1;
	MapRoutes.DEFEND_bAA2 = MapRoutes.DEFEND_bAA1;
	MapRoutes.DEFEND_bAA3 = MapRoutes.DEFEND_bAA1;
	MapRoutes.DEFEND_bAA4 = MapRoutes.DEFEND_bAA1;
	MapRoutes.DEFEND_bAA5 = MapRoutes.DEFEND_bAA1;
	MapRoutes.ATTACK_bAA6 = MapRoutes.DEFEND_bAA1;
	MapRoutes.ATTACK_bAA7 = MapRoutes.DEFEND_bAA1;
	MapRoutes.ATTACK_bAA8 = MapRoutes.DEFEND_bAA1;
	MapRoutes.ATTACK_bAA9 = MapRoutes.DEFEND_bAA1;
	MapRoutes.ATTACK_bAA10 = MapRoutes.DEFEND_bAA1;
	MapRoutes.DEFEND_btrain2 = MapRoutes_DEFEND_btrain1;
	MapRoutes.DEFEND_btrain3 = MapRoutes_DEFEND_btrain1;
	MapRoutes.DEFEND_btrain4 = MapRoutes_DEFEND_btrain1;
	MapRoutes.DEFEND_btrain5 = MapRoutes_DEFEND_btrain1;
	MapRoutes.DEFEND_btrain6 = MapRoutes_DEFEND_btrain1;

	Util.Routes(MapRoutes);
	print( "OnMapLoad" );
};

global OnBotJoin = function( bot )
{
	bot.TargetBreakableDist = 100.0;
	
	//select spawn point and change class if necessary
	RTCWUtil.SetDualObjective(bot);
	
};
