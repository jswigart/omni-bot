global Map =
{
	Quiet = true,
	Debug = false,
	Flag_Holy_Relic = "FLAG_Holy_Relic",
	Plant_Side_Door = "PLANT_Side_Door",
	Explode_138 = "EXPLODE_138",
	Explode_prisoner_trigger = "EXPLODE_prisoner_trigger",
	RelicStatus = false,
	DoorStatus = false,
	AlarmStatus = false,
	Grate_Destroyed = false,
	TwoMinute = false,
	DontDispenseAmmo = false,
	DispenseAmmoTime = 1,

	//set to false if you don't want allies /killing
	Suicide = true,

	gratebot = 0,
	Navigation =
	{
		railjump =
		{
			navigate = function( _this )
			{
				_this.Bot.HoldButton( BTN.JUMP, 0.25 );
				sleep( 0.25 );
			},
		},
		sewer =
		{
			navigate = function( _this )
			{
				_this.Bot.HoldButton( BTN.CROUCH, 2 );
				sleep( 2 );
			},
		},
		sewerladder =
		{
			navigate = function( _this )
			{
				_this.Bot.HoldButton( BTN.FORWARD, 3 );
				sleep( 3 );
			},
		},
		sewerladderb =
		{
			navigate = function( _this )
			{
				_this.Bot.HoldButton( BTN.FORWARD, 6 );
				sleep( 1 );
				if ( Map.gratebot < 1 && !Map.Grate_Destroyed ) {
					Map.gratebot += 1;
					_this.AddWeaponRequest( Priority.High, WEAPON.KNIFE );
					_this.BlockForWeaponChange( WEAPON.KNIFE );
					_this.Bot.HoldButton( BTN.ATTACK1, 3 );
				}

				sleep( 5 );
				Map.gratebot -= 1;
			},
		},
	},

	Side_Door_Destroyed = function( trigger )
	{
		if ( TestMap ) {
			return;
		}

		Map.DoorStatus = true;
		Util.EnableGoal( "ROUTE_door" );

		SetAvailableMapGoals( TEAM.AXIS, false, "ATTACK_rPlant.*" );

		SetAvailableMapGoals( TEAM.ALLIES, false, "DEFEND_bEngPlant.*" );
		SetAvailableMapGoals( TEAM.ALLIES, false, "PANZER_.*" );
		SetAvailableMapGoals( TEAM.ALLIES, true, "PANZER_bSpawnkill.*" );
		SetAvailableMapGoals( TEAM.ALLIES, true, "DEFEND_bRelic.*" );
	},
	Side_Door_Planted = function( trigger )
	{
		if ( TestMap ) {
			return;
		}

		if ( Map.RelicStatus == true ) {
			SetAvailableMapGoals( TEAM.ALLIES, false, "DEFUSE_.*" );
		}
	},
	Side_Door_Defused = function( trigger )
	{
		if ( TestMap ) {
			return;
		}

	},

	Holy_Relic_Taken = function( trigger )
	{
		if ( TestMap ) {
			return;
		}

		Map.RelicStatus = true;

		SetAvailableMapGoals( TEAM.AXIS, false, "ATTACK.*" );
		SetAvailableMapGoals( TEAM.AXIS, true, "ATTACK_rDeliver.*" );

		SetAvailableMapGoals( TEAM.ALLIES, false, "DEFEND_.*" );
		SetAvailableMapGoals( TEAM.ALLIES, false, "DEFUSE_.*" );
		SetAvailableMapGoals( TEAM.ALLIES, false, "SNIPE_.*" );
		SetAvailableMapGoals( TEAM.ALLIES, false, "PANZER_.*" );
		SetAvailableMapGoals( TEAM.ALLIES, true, "PANZER_bSpawnkill.*" );
		SetAvailableMapGoals( TEAM.ALLIES, true, "DEFEND_bDeliver.*" );
		SetAvailableMapGoals( TEAM.ALLIES, true, "DEFEND_bRoamDeliver" );
		SetAvailableMapGoals( TEAM.ALLIES, true, "ARTILLERY_S_bSpawnkill" );

		Util.LimitToTeam( TEAM.ALLIES, "SWITCH_Alarm" );
	},
	Holy_Relic_Returned = function( trigger )
	{
		if ( TestMap ) {
			return;
		}

		Map.RelicStatus = false;

		SetAvailableMapGoals( TEAM.AXIS, false, "ATTACK.*" );

		SetAvailableMapGoals( TEAM.ALLIES, false, "DEFEND.*" );
		SetAvailableMapGoals( TEAM.ALLIES, false, "ARTILLERY_S_bSpawnkill" );
		SetAvailableMapGoals( TEAM.ALLIES, true, "DEFEND_bRelic.*" );
		SetAvailableMapGoals( TEAM.ALLIES, true, "PANZER_bMain.*" );
		//SetAvailableMapGoals( TEAM.ALLIES, true, "SNIPE_bSnipe.*" );
		SetAvailableMapGoals( TEAM.ALLIES, true, "DEFUSE_.*" );

		if ( Map.TwoMinute == false ) {
			SetAvailableMapGoals( TEAM.ALLIES, true, "DEFEND_bMain.*" );
		}

		if ( Map.DoorStatus == false ) {
			SetAvailableMapGoals( TEAM.AXIS, true, "ATTACK_rPlant.*" );

			SetAvailableMapGoals( TEAM.ALLIES, true, "DEFEND_bEngPlant.*" );
		}
		foreach( id and bot in BotTable )
		{
			if ( bot.GetTeam() == TEAM.ALLIES ) {
				if ( Map.Suicide && bot.GetReinforceTime() < 8 ) {
					bot.ExecCommand( "kill" );
				}
			}
		}

		if ( Map.AlarmStatus == true ) {  // Allies own it
			Util.LimitToTeam( TEAM.AXIS, "SWITCH_Alarm" );
		}
		else
		{
			Util.LimitToTeam( TEAM.ALLIES, "SWITCH_Alarm" );
		}
	},
	two_minute = function( trigger )
	{
		if ( TestMap ) {
			return;
		}

		RTCWUtil.StopSniping(); // Push inside
		Map.TwoMinute = true;

		if ( Map.RelicStatus == false ) {
			SetAvailableMapGoals( TEAM.ALLIES, false, "DEFEND.*" );
			SetAvailableMapGoals( TEAM.ALLIES, true, "DEFEND_bRelic.*" );
		}
	},

	thirty_second = function( trigger )
	{
		if ( TestMap ) {
			return;
		}

		if ( Map.RelicStatus == true ) {
			return;
		}

		foreach( id and bot in BotTable )
		{
			if ( RandInt( 0,10 ) < 2 ) {
				bot.SayVoice( VOICE.G_GOODGAME );
			}
			sleep( 0.5 );
			if ( bot.GetTeam() == TEAM.ALLIES ) {
				if ( RandInt( 0,10 ) < 2 ) {
					bot.SayVoice( VOICE.G_CHEER );
				}
				sleep( 0.5 );
			}
		}
	},
	alarm_on = function( trigger )
	{
		if ( TestMap ) {
			return;
		}

		Map.AlarmStatus = true;
		Util.LimitToTeam( TEAM.AXIS, "SWITCH_Alarm" );
	},
	alarm_off = function( trigger )
	{
		if ( TestMap ) {
			return;
		}

		Map.AlarmStatus = false;
		Util.LimitToTeam( TEAM.ALLIES, "SWITCH_Alarm" );
	},
	SewerTrigger =
	{
		Name = "SewerTrigger",
		TriggerOnClass = CLASS.ANYPLAYER,
		OnEnter = function( ent )
		{
			if ( GetEntTeam( ent ) == TEAM.AXIS ) {
				if ( Map.RelicStatus == true ) {
					if ( GetEntFlags( ent, ENTFLAG.CARRYINGGOAL ) ) {
						SetAvailableMapGoals( TEAM.ALLIES, false, "DEFEND_.*" );
						SetAvailableMapGoals( TEAM.ALLIES, true, "DEFEND_bTruck.*" );

						b = Util.GetBotByName( GetEntName( ent ) );
						b.SayTeam( "I'm taking relic via sewer!" );
						foreach( id and bot in BotTable )
						{
							if ( bot.GetTeam() == TEAM.ALLIES ) {
								bot.SayTeam( "Relic is going sewer!" );
								break;
							}
						}

					}
				}
				Map.RelicFallback();
			}
		},
		OnExit = function( ent )
		{
		},
	},
	DoorTrigger =
	{
		Name = "DoorTrigger",
		TriggerOnClass = CLASS.ANYPLAYER,
		OnEnter = function( ent )
		{
			if ( GetEntTeam( ent ) == TEAM.AXIS ) {
				if ( Map.RelicStatus == true ) {
					if ( GetEntFlags( ent, ENTFLAG.CARRYINGGOAL ) ) {
						if ( b ) {
							b = Util.GetBotByName( GetEntName( ent ) );
							b.SayTeam( "I'm taking relic via door!" );
						}
						foreach( id and bot in BotTable )
						{
							if ( bot.GetTeam() == TEAM.ALLIES ) {
								bot.SayTeam( "Relic is going door!" );
								break;
							}
						}
					}
				}
				Map.RelicFallback();
			}
		},
		OnExit = function( ent )
		{
		},
	},
	RoofTrigger =
	{
		Name = "RoofTrigger",
		TriggerOnClass = CLASS.ANYPLAYER,
		OnEnter = function( ent )
		{
			if ( GetEntTeam( ent ) == TEAM.AXIS ) {
				if ( Map.RelicStatus == true ) {
					if ( GetEntFlags( ent, ENTFLAG.CARRYINGGOAL ) ) {
						if ( b ) {
							b = Util.GetBotByName( GetEntName( ent ) );
							b.SayTeam( "I'm taking relic via roof!" );
						}
						foreach( id and bot in BotTable )
						{
							if ( bot.GetTeam() == TEAM.ALLIES ) {
								bot.SayTeam( "Relic is going roof!" );
								break;
							}
						}
					}
				}
				Map.RelicFallback();
			}
		},
		OnExit = function( ent )
		{
		},
	},
	AltarTrigger =
	{
		Name = "AltarTrigger",
		TriggerOnClass = CLASS.ANYPLAYER,
		OnEnter = function( ent )
		{
			if ( GetEntTeam( ent ) == TEAM.AXIS ) {
				if ( Map.RelicStatus == true ) {
					if ( GetEntFlags( ent, ENTFLAG.CARRYINGGOAL ) ) {
						if ( b ) {
							b = Util.GetBotByName( GetEntName( ent ) );
							b.SayTeam( "I'm taking relic via altar!" );
						}
						foreach( id and bot in BotTable )
						{
							if ( bot.GetTeam() == TEAM.ALLIES ) {
								bot.SayTeam( "Relic is going behind altar!" );
								break;
							}
						}

					}
				}
			}
		},
		OnExit = function( ent )
		{
		},
	},

	check_grate = function()
	{
		wpOne = {};
		wpTwo = {};
		Wp.GetWaypointByName( "top", wpOne );
		Wp.GetWaypointByName( "bottom", wpTwo );
		offset = Vector3( 0,0,10 );

		while ( !Map.Grate_Destroyed )
		{
			tr = TraceLine( wpOne.position + offset, wpTwo.position + offset, null, TRACE.ALL, 0, false );

			if ( tr.fraction < 1 ) {
				if ( Map.Debug ) {
					DrawDebugLine( wpOne.position + offset, wpTwo.position + offset, COLOR.RED, 0.25 );
				}
			} else
			{
				if ( Map.Debug ) {
					DrawDebugLine( wpOne.position + offset, wpTwo.position + offset, COLOR.GREEN, 0.25 );
				}
				Map.Grate_Destroyed = true;

			}

			sleep( 0.25 );
		}

		if ( Map.Debug ) {
			print( "grate_destroyed" );
		}
	},
	Plant =
	{
		Name = "Plant",
		TriggerOnClass = CLASS.ENGINEER,
		OnEnter = function( ent )
		{
			if ( TestMap ) {
				return;
			}

			if ( !ent || GetEntClass( ent ) != CLASS.ENGINEER ) {
				return;
			}
			if ( GetEntTeam( ent ) == TEAM.AXIS && Map.DoorStatus == false ) {
				foreach( id and bot in BotTable )
				{
					if ( bot.GetTeam() == TEAM.ALLIES ) {
						bot.SayTeam( "Axis are planting at the Side Door!" );
						break;
					}
				}
			}
		},
		OnExit = function( ent )
		{
			if ( TestMap ) {
				return;
			}
		},
	},
	AlliedSpawn =
	{
		Name = "AlliedSpawn",
		TriggerOnClass = CLASS.ANYPLAYER,
		OnEnter = function( ent )
		{
			if ( TestMap ) {
				return;
			}
			if ( GetEntTeam( ent ) == TEAM.AXIS )
			{
				Map.RelicFallback();
			}

		},
		OnExit = function( ent )
		{
			if ( TestMap ) {
				return;
			}
		},
	},
	// Axis are close to the relic
	RelicFallback = function()
	{
		if (!Map.RelicStatus)
		{
			print("fallback");
			SetAvailableMapGoals( TEAM.ALLIES, false, "DEFEND_bEngPlant.*" );
			SetAvailableMapGoals( TEAM.ALLIES, false, "PANZER_.*" );
			SetAvailableMapGoals( TEAM.ALLIES, true, "DEFEND_bRelic_[235]" );
			if (Map.DoorStatus)
			{
				SetAvailableMapGoals( TEAM.ALLIES, true, "DEFEND_bRelic_[14]" );
			}
		}
	},
};

global OnMapLoad = function()
{

	thread( Map.check_grate );

	if ( TestMapOn ) {
		Util.AutoTestMap();
	}

	OnTrigger( "the Side Door Destroyed.", Map.Side_Door_Destroyed );
	OnTrigger( "Planted at the Side Door.", Map.Side_Door_Planted );
	OnTrigger( "Defused at the Side Door.", Map.Side_Door_Defused );
	OnTrigger( "Axis have stolen the Holy Relic!", Map.Holy_Relic_Taken );
	OnTrigger( "Flag returned Holy Relic!", Map.Holy_Relic_Returned );
	OnTrigger( "two minute warning.", Map.two_minute );
	OnTrigger( "thirty second warning.", Map.thirty_second );
	OnTrigger( "The Allied Alarm is on", Map.alarm_on );
	OnTrigger( "The Allied Alarm is off", Map.alarm_off );

	SetMapGoalProperties( "SNIPE_.*", {mincamptime = 45, maxcamptime = 60} );
	SetMapGoalProperties( "ATTACK_.*", {mincamptime = 10, maxcamptime = 20} );
	SetMapGoalProperties( "DEFEND_.*", {mincamptime = 20, maxcamptime = 35} );
	SetMapGoalProperties( "PANZER_.*", {mincamptime = 45, maxcamptime = 60} );
	SetMapGoalProperties( "DEFEND_bRoam.*", {mincamptime = 0, maxcamptime = 1} );
	SetMapGoalProperties( "DEFEND_bDeliver.*", {mincamptime = 5, maxcamptime = 10} );
	SetMapGoalProperties( "DEFEND_bTruck.*", {mincamptime = 5, maxcamptime = 10} );
	RTCWUtil.SetPrimaryGoals( 1.0 );
	Util.DisableGoal( ".*", true ); //all but routes
	Util.DisableGoal( "ROUTE_door" );

	Util.SetMaxUsersInProgress( 1, "PANZER.*" );
	Util.SetMaxUsersInProgress( 1, "SWITCH.*" );
	Util.SetMaxUsersInProgress( 1, "ATTACK.*" );

	SetGoalPriority( "DEFEND_bEngPlant.*", 0.9 );    // Higher than alarm
	SetGoalPriority( "ATTACK_rPlant.*", 0.86 );  // More than OBJ
	SetGoalPriority( "PANZER_rPlant.*", 0.9 );   // Higher than alarm
	SetGoalPriority( "DEFEND_bRoam.*", 0.49 );
	SetGoalPriority( "CALL.*", 1.0 );
	SetGoalPriority( "ARTILLERY.*", 1.0 );
	SetGoalPriority( "SWITCH_Alarm", 0.87 );
	SetGoalPriority( "DEFEND_bRelic.*", 0.55 );

	RTCWUtil.LimitToClass( "DEFEND_bEngPlant.*", TEAM.ALLIES, CLASS.ENGINEER );
	RTCWUtil.LimitToClass( "SWITCH.*", TEAM.ALLIES, CLASS.SOLDIER );
	RTCWUtil.LimitToClass( "SWITCH.*", TEAM.AXIS, CLASS.SOLDIER, CLASS.LIEUTENANT );

	SetAvailableMapGoals( TEAM.AXIS, true, "PLANT.*" );
	SetAvailableMapGoals( TEAM.AXIS, true, "ATTACK_rPlant.*" );
	SetAvailableMapGoals( TEAM.AXIS, true, "PANZER_rPlant.*" );

	SetAvailableMapGoals( TEAM.ALLIES, true, "DEFEND_bEngPlant.*" );
	SetAvailableMapGoals( TEAM.ALLIES, true, "DEFEND_bMain.*" );
	SetAvailableMapGoals( TEAM.ALLIES, true, "PANZER_bMain.*" );
	//SetAvailableMapGoals( TEAM.ALLIES, true, "SNIPE_bSnipe.*" );

	Util.EnableGoal( "FLAG_Holy_Relic" );
	Util.EnableGoal( "CAPPOINT_truck" );

	Util.LimitToTeam( TEAM.ALLIES, "SWITCH_Alarm" );

	// Triggers to know where relic is going
	tOne = OnTriggerRegion( AABB( -360,-636,-344,-248,-459,-175 ), Map.SewerTrigger );
	tTwo = OnTriggerRegion( AABB( 1110,1055,-1,1156,1167,77 ), Map.DoorTrigger );
	tThree = OnTriggerRegion( AABB( 1138,368,655,1176,501,705 ), Map.RoofTrigger );
	tFour = OnTriggerRegion( AABB( 1665,-48,-112,1703,48,-12 ), Map.AltarTrigger );

	plant = OnTriggerRegion( AABB( 851.000,865.000,-1.000,1024.000,1024.000,73.000 ), Map.Plant );
	bSpawn = OnTriggerRegion( AABB( 1980.000,-860.000,-62.000,2019.000,-771.000,12.000 ), Map.AlliedSpawn );



	MapRoutes =
	{
		DEFEND_bRelic_1 =
		{
			ROUTE_bspawn =
			{
				ROUTE_rearalliedspawn = {Weight = 3,},
				ROUTE_rearaltar = {},
			},
		},
		CAPPOINT_truck =
		{
			ROUTE_relicsteal =
			{
				ROUTE_organroof =
				{
					Weight = 2,
					ROUTE_roof = {},
				},
				ROUTE_door =
				{
					Weight = 4,
					ROUTE_northgallery = {Weight = 2,},
					ROUTE_maingallery = {Weight = 2,},
					ROUTE_sewer = {},
				},
				ROUTE_rearaltar =
				{
					ROUTE_northgallery = {},
					ROUTE_maingallery = {Weight = 2,},
					ROUTE_sewer = {},
				},
				ROUTE_rearalliedspawn =
				{
					ROUTE_southpassage =
					{
						Weight = 2,
						ROUTE_sewer = {},
					},
					ROUTE_southgallery = {},
				},
			},
		},
		PLANT_Side_Door =
		{
			ROUTE_rspawn =
			{
				ROUTE_northentrance =
				{
					Weight = 3,
					ROUTE_maingallery = {},
					ROUTE_northgallery = {Weight = 3,},
					ROUTE_n_maingallery = {},
				},
				ROUTE_southentrance =
				{
					Weight = 2,
					ROUTE_maingallery = {},
				},
				ROUTE_sewer = {},
			},
		},
		ATTACK_rPlant_1 =
		{
			ROUTE_rspawn =
			{
				ROUTE_northentrance =
				{
					Weight = 2,
					ROUTE_n_maingallery = {Weight = 2,},
					ROUTE_maingallery = {},
					ROUTE_northgallery = {},
				},
				ROUTE_southentrance =
				{
					Weight = 2,
					ROUTE_maingallery = {},
					ROUTE_s_maingallery = {},
					ROUTE_southpassage = {},
				},
				ROUTE_sewer = {},
			},
		},
		FLAG_Holy_Relic =
		{
			ROUTE_rspawn =
			{
				ROUTE_northentrance =
				{
					Weight = 3,
					ROUTE_northgallery = {},
					ROUTE_n_maingallery =
					{
						ROUTE_door = {},
						ROUTE_rearaltar = {},
					},
					ROUTE_maingallery =
					{
						ROUTE_door = {},
						ROUTE_rearaltar = {},
					},
					ROUTE_roof =
					{
						ROUTE_organroof = {},
					},
				},
				ROUTE_southentrance =
				{
					Weight = 3,
					ROUTE_southpassage =
					{
						ROUTE_rearaltar = {},
						ROUTE_rearalliedspawn = {Weight = 2,},
					},
					ROUTE_southgallery =
					{
						ROUTE_rearaltar = {Weight = 2,},
						ROUTE_rearalliedspawn = {},
					},
					ROUTE_s_maingallery =
					{
						ROUTE_door = {},
						ROUTE_rearaltar = {},
					},
					ROUTE_maingallery =
					{
						ROUTE_door = {},
						ROUTE_rearaltar = {},
					},
					ROUTE_roof =
					{
						ROUTE_organroof = {},
					},
				},
				ROUTE_sewer =
				{
					ROUTE_rearaltar = {},
					ROUTE_door = {},
				},
			},
		},
	};
	MapRoutes.DEFEND_bRelic_2 = MapRoutes.DEFEND_bRelic_1;
	MapRoutes.DEFEND_bRelic_3 = MapRoutes.DEFEND_bRelic_1;
	MapRoutes.DEFEND_bRelic_4 = MapRoutes.DEFEND_bRelic_1;
	MapRoutes.DEFEND_bRelic_5 = MapRoutes.DEFEND_bRelic_1;
	MapRoutes.ATTACK_rPlant_2 = MapRoutes.ATTACK_rPlant_1;

	Util.Routes( MapRoutes );
	Util.MapDebugPrint( "OnMapLoad" );

	// Break entities bots suck at getting past
	EntityKill( 199 );
	EntityKill( 342 );
	EntityKill( 222 );
	EntityKill( 365 );
	EntityKill( 230 );
	EntityKill( 231 );
	EntityKill( 341 );
	EntityKill( 200 );
};

global OnBotJoin = function( bot )
{
	bot.TargetBreakableDist = 80.0;
	RTCWUtil.SelectWeapon( bot, WEAPON.PANZERFAUST );
};

