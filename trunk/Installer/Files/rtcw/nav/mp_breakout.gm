global Map =
{
	Quiet = true,
	Debug = false,
	ChurchAlley = false,
	BackAlley = false,
	FlagStatus = 0,
	FlagAttacker = 0,	// Team activly going for flag
	OpsDyno = 0,
	AADyno = 0,	
	GateStatus = false, // closed
	
	AxisASTable = {},
	AlliesASTable = {},
	AxisASPriority = 0.94,	// less than Defend's. thx Martin
	AlliesASPriority = 0.94, // less than Defend's. thx Martin
	
	opsas = { "rSpawnkillAS_1", "rSpawnkillAS_2",},
	aa_as = { "bHouseAS_1", },
	
	//scripted defend spots for dual objective support
	Defend =
	{
		AxisSpawnPt = 101, // axis defenders will choose this spawn point
		AlliesSpawnPt = 1, // allied defenders will choose this spawn point
		//the first bot joining defending team will switch to crucial class
		CrucialClass = CLASS.ENGINEER,
		AxisDefenders = 0, // a variable to keep a count of defenders
		MaxAxisDefenders = 5, // maximum defenders for this team
		AlliesDefenders = 0,
		MaxAlliesDefenders = 5,
		
		// initialize some tables for adding waypoints for them to use
		Axis = {}, 
		Allies = {},		
	},
	
	Switches =
	{
		gate1 =
		{
			Enabled = true,
			Priority = 0.0,
			WaypointName = "gate1",
			Wait = function()
			{
				sleep(3);
				return true;
			},			

		},
		gate2 =
		{
			Enabled = true,
			Priority = 0.0,
			WaypointName = "gate2",
			Wait = function()
			{
				sleep(3);
				return true;
			},			

		},
	},
	
	Target =
	{
		Door =
		{
			Priority = 1.2, // just do this first ...
			Enabled = true,
			GrenadeTargetGoalName = "EXPLODE_360",
			LimitBots = 1,
			LimitTeam = (1<<TEAM.AXIS),
			LimitClass = (1<<CLASS.ENGINEER),
			Offset = 
			{
				Vector3(-397.370, 0.538, -45.875),
			}
		},
	},
	
	aa_tight = { "dual_aa_1", "dual_aa_2", "dual_aa_3", "dual_aa_4", "dual_aa_5", "dual_aa_6", },
	ops_tight = { "dual_ops_1", "dual_ops_2", "dual_ops_3", "dual_ops_4", "dual_ops_5", },
	ops_conservative = { "bOutsideOps_1", "bOutsideOps_2", "bOutsideOps_3", "bOutsideOps_4", "bOutsideOps_5", "bOutsideOps_6", },
	
	Allied_Field_Communications_Destroyed = function( trigger )
	{
		if ( TestMap )
			{ return; }
			
		
		foreach ( id and bot in BotTable )
		{
			if (RandInt(0,10) < 2)
				{
					bot.SayVoice(VOICE.G_GOODGAME);
				}
			if (bot.GetTeam() == TEAM.AXIS)
			{
				if (RandInt(0,10) < 5)
				{
					bot.SayVoice(VOICE.G_CHEER);
				}					
				sleep(0.5);
			}
			if (bot.GetTeam() == TEAM.ALLIES)
			{
				if (RandInt(0,10) < 5)
				{
					bot.SayVoice(VOICE.G_NEGATIVE);
				}					
				sleep(0.5);
			}
		}
	},
	Allied_Field_Communications_Defused = function( trigger )
	{
		if ( TestMap )
			{ return; }
		Map.OpsDyno -= 1;
	},
	Allied_Field_Communications_Planted = function( trigger )
	{
		if ( TestMap )
			{ return; }
		Map.OpsDyno += 1;
		SetAvailableMapGoals( TEAM.AXIS, true, "DEFEND_rEng_Ops.*" );
		Map.AlliedDualDefend();
	},

	Back_Alley_Wall_Destroyed = function( trigger )
	{
		if ( TestMap )
			{ return; }
		Map.BackAlley = true;

		SetAvailableMapGoals( TEAM.AXIS, true, "PLANT_Allied_Field_Communications" );
		SetAvailableMapGoals( TEAM.AXIS, false, "DEFEND_rEng_BackWall.*" );
		Map.AlliedDualDefend();
	},
	Back_Alley_Wall_Planted = function( trigger )
	{
		if ( TestMap )
			{ return; }

		SetAvailableMapGoals( TEAM.AXIS, true, "DEFEND_rEng_BackWall.*" );
	},
	Back_Alley_Wall_Defused = function( trigger )
	{
		if ( TestMap )
			{ return; }

		SetAvailableMapGoals( TEAM.AXIS, false, "DEFEND_rEng_BackWall.*" );
	},

	Church_Alley_Gate_Destroyed = function( trigger )
	{
		if ( TestMap )
			{ return; }
		Map.ChurchAlley = true;

		Wp.SetWaypointFlag( "sewerhole", "closed", true);	// Axis should just go around to catch any allies sneaking in
		SetAvailableMapGoals( TEAM.ALLIES, true, "PLANT_German_88" );
		SetAvailableMapGoals( TEAM.ALLIES, false, "DEFEND_bEng_ChurchWall.*" );
	},
	Church_Alley_Gate_Planted = function( trigger )
	{
		if ( TestMap )
			{ return; }

		SetAvailableMapGoals( TEAM.ALLIES, true, "DEFEND_bEng_ChurchWall.*" );
	},
	
	Church_Alley_Gate_Defused = function( trigger )
	{
		if ( TestMap )
			{ return; }

		SetAvailableMapGoals( TEAM.ALLIES, false, "DEFEND_bEng_ChurchWall.*" );
	},

	German_88_Destroyed = function( trigger )
	{
		if ( TestMap )
			{ return; }
			
		foreach ( id and bot in BotTable )
		{
			if (RandInt(0,10) < 2)
			{
				bot.SayVoice(VOICE.G_GOODGAME);
			}
			if (bot.GetTeam() == TEAM.ALLIES)
			{
				if (RandInt(0,10) < 5)
				{
					bot.SayVoice(VOICE.G_CHEER);
				}					
				sleep(0.5);
			}
			if (bot.GetTeam() == TEAM.AXIS)
			{
				if (RandInt(0,10) < 5)
				{
					bot.SayVoice(VOICE.G_NEGATIVE);
				}					
				sleep(0.5);
			}
		}
	},
	
	German_88_Defused = function( trigger )
	{
		if ( TestMap )
			{ return; }
		Map.AADyno -= 1;
	},
	
	German_88_Planted = function( trigger )
	{
		if ( TestMap )
			{ return; }
		Map.AADyno += 1;
	},

	obj_flag_Axis_Captured = function( trigger )
	{
		if ( TestMap )
			{ return; }
		Map.FlagStatus = 1;
		Util.SetMaxUsersInProgress( 2, "CHECKPOINT_obj_flag" );

		SetAvailableMapGoals( TEAM.AXIS, false, "MOUNTMG42_aamg" );
		SetAvailableMapGoals( TEAM.AXIS, false, "DEFEND_rChurch.*" );
		SetAvailableMapGoals( TEAM.AXIS, true, "DEFEND_rOps.*" );
		SetAvailableMapGoals( TEAM.AXIS, false, "SNIPE_rChurch.*" );
		SetAvailableMapGoals( TEAM.AXIS, true, "DEFEND_rOpsLT.*" );
		
		SetAvailableMapGoals( TEAM.ALLIES, true, "MOUNTMG42_opsmg" );
		SetAvailableMapGoals( TEAM.ALLIES, true, "DEFEND_bOutsideOps.*" );
		SetAvailableMapGoals( TEAM.ALLIES, false, "DEFEND_bAA.*" );
		SetAvailableMapGoals( TEAM.ALLIES, true, "SNIPE_bOps.*" );
		SetAvailableMapGoals( TEAM.ALLIES, false, "DEFEND_bAA_LT.*" );
		Map.AlliedDualDefend();
		Map.SupportFire();
	},

	obj_flag_Allies_Captured = function( trigger )
	{
		if ( TestMap )
			{ return; }
		Map.FlagStatus = 2;
		Util.SetMaxUsersInProgress( 2, "CHECKPOINT_obj_flag" );

		SetAvailableMapGoals( TEAM.AXIS, true, "MOUNTMG42_aamg" );
		SetAvailableMapGoals( TEAM.AXIS, true, "DEFEND_rChurch.*" );
		SetAvailableMapGoals( TEAM.AXIS, false, "DEFEND_rOps.*" );
		SetAvailableMapGoals( TEAM.AXIS, true, "SNIPE_rChurch.*" );
		SetAvailableMapGoals( TEAM.AXIS, false, "DEFEND_rOpsLT.*" );
		
		SetAvailableMapGoals( TEAM.ALLIES, false, "MOUNTMG42_opsmg" );
		SetAvailableMapGoals( TEAM.ALLIES, false, "DEFEND_bOutsideOps.*" );
		SetAvailableMapGoals( TEAM.ALLIES, true, "DEFEND_bAA.*" );
		SetAvailableMapGoals( TEAM.ALLIES, false, "SNIPE_bOps.*" );
		SetAvailableMapGoals( TEAM.ALLIES, true, "DEFEND_bAA_LT.*" );
		Map.AlliedDualDefend();
		Map.SupportFire();
	},
	
	toggle_flag = function()
	{
		count = 1;
		//swap availablilty every 5 minutes
		while ( 1 )
		{
			if ( TestMap )
				{ return; }

			count += 1;

			if ( count % 300 == 0 )
			{
				if ( Map.FlagStatus == 1 )
				{
					print("Allies Attack Flag");
					SetAvailableMapGoals( TEAM.ALLIES, true, "CHECKPOINT_obj_flag" );
					SetAvailableMapGoals( TEAM.AXIS, false, "CHECKPOINT_obj_flag" );
					Map.FlagAttacker = 2;	// Allies
					Map.SupportFire();
				}
				else
				{
					print("Axis Attack Flag");
					SetAvailableMapGoals( TEAM.ALLIES, false, "CHECKPOINT_obj_flag" );
					SetAvailableMapGoals( TEAM.AXIS, true, "CHECKPOINT_obj_flag" );	
					Map.FlagAttacker = 1;	//Axis
					Map.SupportFire();
				}
				
				count = 1;
			}
			sleep(1);
		}
	},
	SupportFire = function()
	{
		//Spawnkill Supportfire - Based on flag owner
		if (Map.FlagStatus == 1)	// Axis own flag
		{
			Map.AxisASTable = Map.opsas;
			SetAvailableMapGoals( TEAM.AXIS, false, "ARTILLERY_S_rChurch.*" );
			SetAvailableMapGoals( TEAM.AXIS, false, "CALLARTILLERY_rChurch.*" );
			
			Map.AlliesASTable = {};			
			SetAvailableMapGoals( TEAM.ALLIES, false, "ARTILLERY_S_.*" );
			SetAvailableMapGoals( TEAM.ALLIES, false, "CALLARTILLERY_.*" );
		}
		if (Map.FlagStatus == 2)	// Allies own flag
		{
			Map.AxisASTable = {};	
			SetAvailableMapGoals( TEAM.AXIS, false, "ARTILLERY_S_.*" );
			SetAvailableMapGoals( TEAM.AXIS, false, "CALLARTILLERY_.*" );
			
			Map.AlliesASTable = Map.aa_as;
			SetAvailableMapGoals( TEAM.ALLIES, false, "ARTILLERY_S_.*" );
			SetAvailableMapGoals( TEAM.ALLIES, false, "CALLARTILLERY_.*" );
			SetAvailableMapGoals( TEAM.ALLIES, true, "ARTILLERY_S_bSpawnkill.*" );
		}
		if (Map.FlagAttacker == 1 && Map.FlagStatus == 1)	// Axis own it and Allies NOT going for it
		{
			Map.AlliesASTable = { "bOpsAS_1", "bOpsAS_2",};	// Allies spam attacking Axis
			SetAvailableMapGoals( TEAM.ALLIES, true, "ARTILLERY_S_bOps.*" );
		}
		if (Map.FlagAttacker == 2 && Map.FlagStatus == 2)	// Allies own it and Axis NOT going for it
		{
			SetAvailableMapGoals( TEAM.AXIS, true, "ARTILLERY_S_rChurch.*" );
			SetAvailableMapGoals( TEAM.AXIS, true, "CALLARTILLERY_rChurch.*" );
			Map.AxisASTable = {"rCarAS_1",};
		}
	},
	AlliedDualDefend = function()
	{
		if (Map.FlagStatus == 1)
		{
			if (Map.BackAlley == true)
			{
				Map.Defend.Allies = Map.ops_tight;
			}else{	//Wall isnt blown
				Map.Defend.Allies = Map.ops_conservative;
			}
		}
		else
		{
			Map.Defend.Allies = Map.ops_conservative;
		}
		if (Map.OpsDyno > 0)
		{
			Map.Defend.Allies = Map.ops_tight;
		}
	},

	gate_lever = function( trigger )
	{
		if ( TestMap )
			{ return; }

		//disable immediately to prevent repeated lever usage
		Map.Switches.gate1.Enabled = false;
		Map.Switches.gate2.Enabled = false;
	},

	gate_trigger = function( trigger )
	{
		if ( TestMap )
			{ return; }

		vel = ToVector(trigger.Action);

		if ( vel.z < 0 )
		{
			if ( Map.Debug ) { print("Gate Closing"); }
			Map.Switches.gate1.Enabled = true;
			Map.Switches.gate2.Enabled = true;				
			Map.GateStatus = false; 
		}
		else if ( vel.z > 0 )
		{
			if ( Map.Debug ) { print("Gate Opening"); }
			Map.Switches.gate1.Enabled = false;
			Map.Switches.gate2.Enabled = false;			
			Map.GateStatus = true;
		}
	},
	
	DoorTrigger = function( trigger )
	{
		Wp.SetWaypointFlag( "doorhack", "closed", false);
	},
};

global OnMapLoad = function()
{
	if ( TestMapOn )
		{ Util.AutoTestMap(); }

	OnTrigger( "The Allied Field Communications Destroyed.", Map.Allied_Field_Communications_Destroyed );
	OnTrigger( "Defused at the Allied Field Communications.", Map.Allied_Field_Communications_Defused );
	OnTrigger( "Planted at the Allied Field Communications.", Map.Allied_Field_Communications_Planted );
	OnTrigger( "The Back Alley Wall Destroyed.", Map.Back_Alley_Wall_Destroyed );
	OnTrigger( "Planted at The Back Alley Wall.", Map.Back_Alley_Wall_Planted );
	OnTrigger( "Defused at The Back Alley Wall.", Map.Back_Alley_Wall_Defused );
	OnTrigger( "The Church Alley Gate Destroyed.", Map.Church_Alley_Gate_Destroyed );
	OnTrigger( "Planted at The Church Alley Gate.", Map.Church_Alley_Gate_Planted );
	OnTrigger( "Defused at The Church Alley Gate.", Map.Church_Alley_Gate_Defused );
	OnTrigger( "The German 88 Destroyed.", Map.German_88_Destroyed );
	OnTrigger( "Defused at The German 88.", Map.German_88_Defused );
	OnTrigger( "Planted at The German 88.", Map.German_88_Planted );
	OnTrigger( "Axis capture the Forward Deployment Area!", Map.obj_flag_Axis_Captured );
	OnTrigger( "Allies capture the Forward Deployment Area!", Map.obj_flag_Allies_Captured );
	OnTrigger( "sgate_goto", Map.gate_trigger );
	OnTrigger( "sgate_trigger1", Map.gate_lever );
	OnTrigger( "Explode_347 Exploded", Map.DoorTrigger );
	
	SetMapGoalProperties( "MOUNTMG42_.*", {mincamptime=60, maxcamptime=90});
	SetMapGoalProperties( "SNIPE_.*", {mincamptime=60, maxcamptime=90});
	SetMapGoalProperties( "DEFEND_.*", {mincamptime=15, maxcamptime=30});
	SetMapGoalProperties( "DEFEND_rOpsLT.*", {mincamptime=30, maxcamptime=31});
	SetMapGoalProperties( "DEFEND_bAA_LT.*", {mincamptime=30, maxcamptime=31});
	SetMapGoalProperties( "DEFEND_rENG.*", {mincamptime=45, maxcamptime=45});
	SetMapGoalProperties( "DEFEND_bENG.*", {mincamptime=45, maxcamptime=45});
	SetMapGoalProperties( "PANZER_.*", {mincamptime=60, maxcamptime=90});
	SetMapGoalProperties( "ATTACK_.*", {mincamptime=1, maxcamptime=1}); //used as 'roams'
		
	RTCWUtil.DisableGoal(".*", true); //all but the routes
	
	SetGoalPriority("CALL.*", 1.0);
	SetGoalPriority("ARTILLERY.*", 1.0);
	SetGoalPriority("DEFEND_bEng.*", 0.9, TEAM.ALLIES, CLASS.ENGINEER);
	SetGoalPriority("DEFEND_rEng.*", 0.9, TEAM.AXIS, CLASS.ENGINEER);
	SetGoalPriority("DEFEND_rOpsLT.*", 0.7, TEAM.AXIS, CLASS.LIEUTENANT);
	SetGoalPriority("DEFEND_bAA_LT.*", 0.7, TEAM.ALLIES, CLASS.LIEUTENANT);
	SetGoalPriority("ATTACK.*", 0.45);
	
	RTCWUtil.LimitToClass("DEFEND_rEng.*", TEAM.AXIS, CLASS.ENGINEER);
	RTCWUtil.LimitToClass("DEFEND_bEng.*", TEAM.ALLIES, CLASS.ENGINEER);
	RTCWUtil.LimitToClass("DEFEND_rOpsLT.*", TEAM.AXIS, CLASS.LIEUTENANT);
	RTCWUtil.LimitToClass("DEFEND_bAA_LT.*", TEAM.ALLIES, CLASS.LIEUTENANT);
	
	SetAvailableMapGoals( TEAM.AXIS, true, "PLANT_Back_Alley_Wall" );
	SetAvailableMapGoals( TEAM.AXIS, true, "CHECKPOINT_obj_flag" );
	SetAvailableMapGoals( TEAM.AXIS, true, "DEFEND_rOps.*" );
	SetAvailableMapGoals( TEAM.AXIS, true, "ATTACK_rOps.*" );
	
	SetAvailableMapGoals( TEAM.ALLIES, true, "PLANT_Church_Alley_Gate" );
	SetAvailableMapGoals( TEAM.ALLIES, true, "CHECKPOINT_obj_flag" );
	SetAvailableMapGoals( TEAM.ALLIES, true, "DEFEND_bAA.*" );
	SetAvailableMapGoals( TEAM.ALLIES, true, "ATTACK_bAA.*" );
	
	Map.Defend.Axis = Map.aa_tight;
	Map.Defend.Allies = Map.ops_conservative;	// Was ops_tight
	
	Util.AddUseWp("PLANT_Church_Alley_Gate", "churchgate_1");
	Util.AddUseWp("PLANT_Allied_Field_Communications", "ops1");
	Util.AddUseWp("PLANT_German_88", "aa1");
	Util.AddUseWp("PLANT_German_88", "aa2");
	Util.AddUseWp("PLANT_German_88", "aa3");
	Wp.SetWaypointFlag( "doorhack", "closed", true);
	
	//run a thread to toggle flag availability
	thread(Map.toggle_flag);
	
	Util.SetMaxUsersInProgress( 64, "CHECKPOINT_obj_flag" );	// Martin - Everyone go for it initialy
	Util.SetMaxUsersInProgress( 1, "MOUNTMG42.*" );
	Util.SetMaxUsersInProgress( 1, "SNIPE.*" );
	Util.SetMaxUsersInProgress( 1, "PANZER.*" );
	Util.SetMaxUsersInProgress( 1, "DEFEND.*" );
	Util.SetMaxUsersInProgress( 1, "DEFUSE_Back.*" );
	Util.SetMaxUsersInProgress( 1, "DEFUSE_Church.*" );
	
	MapRoutes =
	{
		CHECKPOINT_obj_flag =
		{
			ROUTE_bspawn =
			{
				ROUTE_alliedsouthroad = {Weight = 3,},
				ROUTE_alliednorthroad = {Weight = 2,},
			},
			ROUTE_rspawn =
			{
				ROUTE_axissouthroad =
				{ 
					Weight = 3,
					ROUTE_car = {},
				},
				ROUTE_axisnorthroad =
				{ 
					Weight = 3,
					ROUTE_car = {Weight = 3},
					ROUTE_tunnelwest = {ROUTE_alliednorthroad = {},},	//Don't try to always force it up the car alleyway
				},
				
			},
		},
		DEFEND_rOps_1 =
		{
			ROUTE_flagspawn =
			{
				ROUTE_alliedsouthroad = {},
				ROUTE_alliednorthroad = {},
			},
			ROUTE_rspawn =
			{
				ROUTE_alliedsouthroad = {},
				ROUTE_alliednorthroad = {},
				ROUTE_tunnelwest = {Weight=3,},
			},
		},
		DEFEND_bAA_1 =
		{
			ROUTE_flagspawn =
			{
				ROUTE_car =
				{
					ROUTE_axissouthroad = {Weight = 3,},
					ROUTE_aamghouse = {},
					ROUTE_axisnorthroad = 
					{
						Weight = 2,
						ROUTE_aahousebottom = {},
						ROUTE_aahousetop = {},
					},
				},
			},
			ROUTE_bspawn =
			{
				ROUTE_alliednorthops = 
				{
					ROUTE_tunnelwest = 
					{ 
						Weight = 3,
						ROUTE_tunneleast = 
						{
							ROUTE_axissouthroad = {Weight = 3,},
							ROUTE_aamghouse = {},
							ROUTE_axisnorthroad = 
							{
								Weight =2,
								ROUTE_aahousebottom = {},
								ROUTE_aahousetop = {},
							},
						},
					},
					ROUTE_alliednorthroad = 
					{
						ROUTE_car =
						{
							ROUTE_axissouthroad = {Weight = 3,},
							ROUTE_aamghouse = {},
							ROUTE_axisnorthroad = 
							{
								Weight = 2,
								ROUTE_aahousebottom = {},
								ROUTE_aahousetop = {},
							},
						},
					},
				},
				ROUTE_alliedsouthops = 
				{
					ROUTE_tunnelwest = 
					{ 
						Weight = 3,
						ROUTE_tunneleast = 
						{
							ROUTE_axissouthroad = {Weight = 3,},
							ROUTE_aamghouse = {},
							ROUTE_axisnorthroad = 
							{
								Weight =2,
								ROUTE_aahousebottom = {},
								ROUTE_aahousetop = {},
							},
						},
					},
					ROUTE_alliedsouthroad = 
					{
						ROUTE_car =
						{
							ROUTE_axissouthroad = {Weight = 3,},
							ROUTE_aamghouse = {},
							ROUTE_axisnorthroad = 
							{
								Weight = 2,
								ROUTE_aahousebottom = {},
								ROUTE_aahousetop = {},
							},
						},
					},
				},
			},
		},
		DEFEND_rChurch_2 =
		{
			ROUTE_rspawn =
			{
				ROUTE_axissouthroad = {},
				ROUTE_axisnorthroad = {},
			},
		},
		PLANT_German_88 =
		{
			ROUTE_flagspawn =
			{
				ROUTE_car =
				{
					ROUTE_axissouthroad = {},
					ROUTE_axisnorthroad = 
					{
						ROUTE_aahousetop = {},
						ROUTE_aahousebottom = {},
					},
				},
			},
			ROUTE_bspawn =
			{
				ROUTE_tunnelwest = 
				{ 
					Weight = 3,
					ROUTE_tunneleast = 
					{
						ROUTE_axissouthroad = {Weight = 3,},
						ROUTE_aamghouse = {},
						ROUTE_axisnorthroad = 
						{
							Weight =2,
							ROUTE_aahousebottom = {},
							ROUTE_aahousetop = {},
						},
					},
				},
			},
		},
		PLANT_Allied_Field_Communications =
		{
			ROUTE_flagspawn =
			{
				ROUTE_alliednorthroad = {},
			},
			ROUTE_rspawn =
			{
				ROUTE_tunnelwest =
				{
					Weight = 3,
					ROUTE_tunneleast =
					{
						ROUTE_backwall = {},
					},
				},
			},
		},
		PLANT_Back_Alley_Wall = 
		{
			ROUTE_flagspawn =
			{
				ROUTE_alliednorthroad = {},
			},
			ROUTE_rspawn =
			{
				ROUTE_tunnelwest =
				{
					Weight = 3,
					ROUTE_tunneleast =
					{
						ROUTE_backwall = {},
					},
				},
			},
		},
	};
	
	MapRoutes.DEFEND_rOps_2 = MapRoutes.DEFEND_rOps_1;
	MapRoutes.DEFEND_rOps_3 = MapRoutes.DEFEND_rOps_1;
	MapRoutes.DEFEND_rOps_4 = MapRoutes.DEFEND_rOps_1;
	MapRoutes.DEFEND_rOps_5 = MapRoutes.DEFEND_rOps_1;
	MapRoutes.DEFEND_bAA_3 = MapRoutes.DEFEND_bAA_1;
	MapRoutes.DEFEND_bAA_4 = MapRoutes.DEFEND_bAA_1;
	MapRoutes.DEFEND_bAA_5 = MapRoutes.DEFEND_bAA_1;
	MapRoutes.DEFEND_bAA_6 = MapRoutes.DEFEND_bAA_1;
	MapRoutes.ATTACK_bAA_1 = MapRoutes.DEFEND_bAA_1;
	MapRoutes.ATTACK_bAA_2 = MapRoutes.DEFEND_bAA_1;
	MapRoutes.ATTACK_bAA_3 = MapRoutes.DEFEND_bAA_1;
	MapRoutes.ATTACK_bAA_4 = MapRoutes.DEFEND_bAA_1;
	MapRoutes.ATTACK_bAA_5 = MapRoutes.DEFEND_bAA_1;
	MapRoutes.ATTACK_bAA_6 = MapRoutes.DEFEND_bAA_1;
	MapRoutes.DEFEND_rChurch_3 = MapRoutes.DEFEND_rChurch_2;
	MapRoutes.DEFEND_rChurch_4 = MapRoutes.DEFEND_rChurch_2;
	MapRoutes.PLANT_German_88.ROUTE_flagspawn.ROUTE_tunnelwest = MapRoutes.PLANT_German_88.ROUTE_flagspawn.ROUTE_car;
	MapRoutes.UGOAL_rSpawnkillAS_1 = MapRoutes.PLANT_Allied_Field_Communications;
	MapRoutes.UGOAL_rSpawnkillAS_2 = MapRoutes.PLANT_Allied_Field_Communications;
	MapRoutes.UGOAL_bSpawnkillAS_1 = MapRoutes.PLANT_German_88;
	
	Util.UpdateSwitchData();
	Util.Routes(MapRoutes);

	print( "OnMapLoad" );
};

global OnBotJoin = function( bot )
{	
	bot.TargetBreakableDist = 100.0;
	
	//default spawn
	bot.ChangeSpawnPoint( 0 );
	
	//select spawn point and change class if necessary
	RTCWUtil.SetDualObjective(bot);
};
