global Map =
{
	Quiet = true,
	
	Checkpoint_forward_spawn = "CHECKPOINT_forward_spawn",
	Destroy_bunker_controls_script = "PLANT_Bunker_Controls",
	Destroy_side_door_script = "PLANT_side_door",
	Destroy_main_gate_script = "PLANT_Main_Gate",

	// Set Status' for conditionals
	SideDoorStatus = 0, //intact
	MainGateStatus = 0, //intact
	FlagStatus = 0, //0 nobody, 1 axis, 2 allies
	
	// Dyno counters - used to determine defensive shifts 
	SideDoorDyno = 0,
	MainGateDyno = 0,
	ControlsDyno = 0,

	//tables to hold current AS goals	
	AxisASTable = {},
	AlliesASTable = {},
	
	side_door_script_Destroyed = function( trigger )
	{
		if ( TestMap )
			{ return; }

		//set status to destroyed
		Map.SideDoorStatus = 1;

		// Allied Goals
		if ( Map.MainGateStatus == 1 )
		{
			SetAvailableMapGoals( TEAM.ALLIES, true, Map.Destroy_bunker_controls_script );
		}
		
		SetAvailableMapGoals( TEAM.ALLIES, false, Map.Destroy_side_door_script );
		
		Map.BaseDefense();	//Fallback to prevent sneak attack
	},

	main_gate_script_Destroyed = function( trigger )
	{
		if ( TestMap )
			{ return; }
			
		//set status to destroyed
		Map.MainGateStatus = 1;
		Map.MainGateDyno = 0;
				
		//running short on time, better focus on bunker controls
		if (GetGameTimeLeft() < 90 || Map.SideDoorStatus > 0) 
		{
			SetAvailableMapGoals( TEAM.ALLIES, false, Map.Destroy_side_door_script );
		}
		
		SetAvailableMapGoals( TEAM.ALLIES, false, Map.Destroy_main_gate_script );
		SetAvailableMapGoals( TEAM.ALLIES, true, "PLANT_Bunker_Controls" );
		
		//shift axis defense 
		if (Map.ControlsDyno == 0 && Map.SideDoorStatus == false)
		{
			Map.GateDefense();	
		}
		else
		{
			Map.BaseDefense();
		}
	},

	bunker_controls_script_Destroyed = function( trigger )
	{
		if ( TestMap )
			{ return; }
	},

	allied_cp_open_Destroyed = function( trigger )
	{
		if ( TestMap )
			{ return; }
	},

	axis_cp_open_Destroyed = function( trigger )
	{
		if ( TestMap )
			{ return; }
	},

 	Allies_Capture_Flag = function( trigger )
 	{
 		if ( TestMap )
 			{ return; }
			
		Map.FlagStatus = 2;

		Map.AlliesASTable = { "bFlagAS_1",};

		if (Map.MainGateStatus && Map.SideDoorStatus)
		{
			Map.BaseDefense();
		}
		else if (Map.MainGateStatus == true && Map.SideDoorStatus == false)
		{
			Map.GateDefense();
		}
		else
		{
			Map.FlagDefense();
		}
 	},

 	Axis_Capture_Flag = function( trigger )
 	{
 		if ( TestMap )
 			{ return; }
			
		Map.FlagStatus = 1;
 	},
	
	Dyno_Plant_Main = function ( trigger )
	{
		if ( TestMap )
			{ return; }
			
		Map.MainGateDyno += 1;

		//prolly some cases where this is going to result in a poor decision
		//but it errs on the side of caution...
		if (Map.SideDoorStatus < 1 && Map.FlagStatus > 1)
		{
			while (Map.MainGateDyno != 0 && Map.MainGateStatus != 1)
			{
				if ( Util.AliveCount(TEAM.AXIS, CLASS.ENGINEER) < 1 )
				{
					//shift the defense
					SetAvailableMapGoals( TEAM.AXIS, true, "DEFEND_Inside_Gate_.*" );
					SetAvailableMapGoals( TEAM.AXIS, false, Map.Checkpoint_forward_spawn );
					SetAvailableMapGoals( TEAM.AXIS, false, "DEFEND_FLAG_.*" );
					break;
				}
				yield();
			}
		}
	},
	
	Dyno_Defuse_Main = function ( trigger )
	{
		if ( TestMap )
			{ return; }
			
		Map.MainGateDyno -= 1;
		
		if ( (Map.MainGateDyno < 1) && (Map.SideDoorStatus == 0) )
		{
			//make sure the defense shifts back if all dyno's defused
			SetAvailableMapGoals( TEAM.AXIS, true, Map.Checkpoint_forward_spawn );
			SetAvailableMapGoals( TEAM.AXIS, true, "DEFEND_FLAG_.*" );
			SetAvailableMapGoals( TEAM.AXIS, false, "DEFEND_Inside_Gate_.*" );
		}
	},
	
	Dyno_Plant_Controls = function ( trigger )
	{
		if ( TestMap )
			{ return; }
			
		Map.ControlsDyno += 1;
		
		//shift axis defense
		SetAvailableMapGoals( TEAM.AXIS, true, "DEFEND_Controls_Base_.*" );
		SetAvailableMapGoals( TEAM.AXIS, false, "DEFEND_Controls_Flex_.*" );
	},
	
	Dyno_Defuse_Controls = function ( trigger )
	{
		if ( TestMap )
			{ return; }
			
		Map.ControlsDyno -= 1;
		
		if ( Map.ControlsDyno  < 1 )
		{
			//all dyno defused, back to the flex spots
			SetAvailableMapGoals( TEAM.AXIS, true, "DEFEND_Controls_Flex_.*" ); 
		}
	},
	
	Dyno_Plant_SideDoor = function ( trigger )
	{
		if ( TestMap )
			{ return; }
			
		Map.SideDoorDyno += 1;
		
	        //axis should forget about defusing side if main is destroyed or planted
	        if ( Map.MainGateStatus > 0 || Map.MainGateDyno > 0 )
	               { SetAvailableMapGoals( TEAM.AXIS, false, "Defuse_side_door.*"); }
	},
	
	Dyno_Defuse_SideDoor = function ( trigger )
	{
		if ( TestMap )
			{ return; }
			
		Map.ControlsDyno -= 1;
	},
	
	FlagDefense = function ()
	{
		Map.AxisASTable = { "rFlagAS_1", "rFlagAS_2", };
		SetAvailableMapGoals( TEAM.AXIS, false, "DEFEND_.*" );
		SetAvailableMapGoals( TEAM.AXIS, false, "PANZER_.*" );
		SetAvailableMapGoals( TEAM.AXIS, false, "CALL.*" );
		SetAvailableMapGoals( TEAM.AXIS, false, "ARTILLERY.*" );
		SetAvailableMapGoals( TEAM.AXIS, true, "DEFEND_Flag_Defense.*" );
		SetAvailableMapGoals( TEAM.AXIS, true, "PANZER_rFlag.*" );
		SetAvailableMapGoals( TEAM.AXIS, true, "ARTILLERY_S_rFlag.*" );
		SetAvailableMapGoals( TEAM.AXIS, true, "CALLARTILLERY_rFlag.*" );
	
		SetAvailableMapGoals( TEAM.ALLIES, true, "ATTACK_Flag_Attack.*" );
	},
	
	GateDefense = function ()
	{
		Map.AxisASTable = { "rGateAS_1", "rGateAS_2",};
		SetAvailableMapGoals( TEAM.AXIS, false, "DEFEND_.*" );
		SetAvailableMapGoals( TEAM.AXIS, false, "PANZER_.*" );
		SetAvailableMapGoals( TEAM.AXIS, false, "CALL.*" );
		SetAvailableMapGoals( TEAM.AXIS, false, "ARTILLERY.*" );
		SetAvailableMapGoals( TEAM.AXIS, true, "DEFEND_rGate.*" );
		SetAvailableMapGoals( TEAM.AXIS, false, "CHECKPOINT.*" );

		Map.AlliesASTable = {};
		SetAvailableMapGoals( TEAM.ALLIES, false, "ATTACK_.*" );
		SetAvailableMapGoals( TEAM.ALLIES, true, "ATTACK_Controls_Attack.*" );
	},

	BaseDefense = function ()
	{
		Map.AxisASTable = {};
		SetAvailableMapGoals( TEAM.AXIS, false, "DEFEND_.*" );
		SetAvailableMapGoals( TEAM.AXIS, false, "PANZER_.*" );
		SetAvailableMapGoals( TEAM.AXIS, false, "CALL.*" );
		SetAvailableMapGoals( TEAM.AXIS, false, "ARTILLERY.*" );
		SetAvailableMapGoals( TEAM.AXIS, false, "CHECKPOINT.*" );
		SetAvailableMapGoals( TEAM.AXIS, true, "DEFEND_Controls_Base.*" );
		if (Map.ControlsDyno == 0)
		{
			SetAvailableMapGoals( TEAM.AXIS, true, "DEFEND_Controls_Flex.*" );
		}

		Map.AlliesASTable = {};
		SetAvailableMapGoals( TEAM.ALLIES, false, "ATTACK_.*" );
		SetAvailableMapGoals( TEAM.ALLIES, true, "ATTACK_Controls_Attack.*" );
	},	
};

global OnMapLoad = function()
{
	if ( TestMapOn )
		{ Util.AutoTestMap(); }

	OnTrigger( "Allied team breached the Main Door!", Map.main_gate_script_Destroyed );
	OnTrigger( "Allies have destroyed the Bunker Controls!", Map.bunker_controls_script_Destroyed );
	OnTrigger( "Allied team breached the Side door!", Map.side_door_script_Destroyed );
 	OnTrigger( "Allies capture the Factory flag!", Map.Allies_Capture_Flag );
 	OnTrigger( "Axis capture the Factory flag!", Map.Axis_Capture_Flag );
	OnTrigger( "Planted at the main gate.", Map.Dyno_Plant_Main );
	OnTrigger( "Defused at the main gate.", Map.Dyno_Defuse_Main );
	OnTrigger( "Planted at the bunker controls.", Map.Dyno_Plant_Controls );
	OnTrigger( "Defused at the bunker controls.", Map.Dyno_Defuse_Controls );
	OnTrigger( "Planted at the side door.", Map.Dyno_Plant_SideDoor );
	OnTrigger( "Defused at the side door.", Map.Dyno_Defuse_SideDoor );

	RTCWUtil.DisableGoal(".*", true); //all but routes
	RTCWUtil.SetPrimaryGoals(1.0);
	
	SetMapGoalProperties( "ATTACK_.*", {mincamptime=15, maxcamptime=30});
	SetMapGoalProperties( "DEFEND_.*", {mincamptime=30, maxcamptime=45});        
	SetMapGoalProperties( "PANZER_.*", {mincamptime=40, maxcamptime=60});
	SetGoalPriority( Map.Destroy_main_gate_script, 1.5);
	
	RTCWUtil.EnableGoal("CHECKPOINT.*");

	// Allied Goals
	SetAvailableMapGoals( TEAM.ALLIES, true, Map.Destroy_side_door_script );
	SetAvailableMapGoals( TEAM.ALLIES, true, Map.Destroy_main_gate_script );

	Map.FlagDefense();

	SetGoalPriority( "CALL.*", 1.0 );
	SetGoalPriority( "ARTILLLERY.*", 1.0 );

	// Max users per goal
	if ( RTCWUtil.CountTeam(TEAM.AXIS) < 8 )
		{ Util.SetMaxUsersInProgress( 1, "DEFEND_.*" ); }
	else
		{ Util.SetMaxUsersInProgress( 2, "DEFEND_.*" ); }

	if ( RTCWUtil.CountTeam(TEAM.ALLIES) < 8 )
		{ Util.SetMaxUsersInProgress( 1, "ATTACK_.*" ); }
	else
		{ Util.SetMaxUsersInProgress( 2, "ATTACK_.*" ); }

	SetGoalPriority( "CHECKPOINT.*", 0.8 );
	Util.SetMaxUsersInProgress( 2, "CHECKPOINT_.*" );
	Map.AlliesASTable = {};

	// Default Status'
	Map.SideGateStatus = 0; //intact
	Map.MainGateStatus = 0; //intact
	Map.FlagStatus = 0; //no team owns it by default

	// Dyno counters
	Map.SideDoorDyno = 0;
	Map.MainGateDyno = 0;
	Map.ControlsDyno = 0;

	//set up some routes
	print("Configuring Routes");

	MapRoutes =
	{
		CHECKPOINT_forward_spawn =
		{
			ROUTE_AllySpawn =
			{
				ROUTE_lefthall = {},
				ROUTE_middle = {},
				ROUTE_right = {},
			},
		},
		PLANT_Bunker_Controls =
		{
			ROUTE_FlagSpawn =
			{
				ROUTE_upperhill =
				{
					Weight = 2,
					ROUTE_westhall = {},
				},
				ROUTE_midentrance =
				{
					ROUTE_westhall = { Weight = 2, },
					ROUTE_lowermid = {},
				},
			},
			ROUTE_CpSpawn =
			{
				ROUTE_easthallsplit = 
				{
					ROUTE_east1 = {},
					ROUTE_east2 = 
					{
						ROUTE_lowermid = {},
					},
				},
			},
		},
	};
	
	//copy some routes
	MapRoutes.PLANT_Main_Gate = MapRoutes.CHECKPOINT_forward_spawn;
	MapRoutes.ATTACK_Controls_Attack_1 = MapRoutes.PLANT_Bunker_Controls;
	MapRoutes.ATTACK_Controls_Attack_2 = MapRoutes.PLANT_Bunker_Controls;
	MapRoutes.ATTACK_Controls_Attack_3 = MapRoutes.PLANT_Bunker_Controls;
	MapRoutes.ATTACK_Controls_Attack_4 = MapRoutes.PLANT_Bunker_Controls;
	MapRoutes.ATTACK_Controls_Attack_5 = MapRoutes.PLANT_Bunker_Controls;
	MapRoutes.ATTACK_Controls_Attack_6 = MapRoutes.PLANT_Bunker_Controls;
	MapRoutes.ATTACK_Controls_Attack_7 = MapRoutes.PLANT_Bunker_Controls;

	Util.Routes(MapRoutes);
	
	print( "OnMapLoad" );
};

// Uncomment for shootable breakables

global OnBotJoin = function( bot )
{
	bot.TargetBreakableDist = 40.0;
	RTCWUtil.SelectWeapon(bot, WEAPON.PANZERFAUST);

	//default spawn
	bot.ChangeSpawnPoint( 0 );
};

/*
Attack / Defend Goal Naming conventions (Groups)

Flag / Main Gate:
DEFEND_Flag_Defense_# 
ATTACK_Flag_Attack_#

Axis Inside Gate (only if they dont have time to defuse dyno)
DEFEND_Inside_Gate_#

Axis Semi Aggressive Controls Defense
DEFEND_Controls_Flex_#

Axis Conservative Controls Defense
DEFEND_Controls_Base_#

Allied Bunker Controls Offense
ATTACK_Controls_Attack_#
*/