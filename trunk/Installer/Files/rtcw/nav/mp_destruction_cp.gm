global Map =
{
	Quiet = true,

	checkpoint1 = "CHECKPOINT_checkpoint1", //allied 1
	checkpoint2 = "CHECKPOINT_checkpoint2", //allied 2
	checkpoint3 = "CHECKPOINT_checkpoint3", //allied 3
	checkpoint4 = "CHECKPOINT_checkpoint4", //axis 3
	checkpoint5 = "CHECKPOINT_checkpoint5", //axis 2
	checkpoint6 = "CHECKPOINT_checkpoint6", //axis 1
	Explode_87 = "EXPLODE_87",
	Explode_88 = "EXPLODE_88",
	Explode_89 = "EXPLODE_89",
	Explode_90 = "EXPLODE_90",
	Mount_east_cyd_mg = "MOUNTMG42_east_cyd_mg",
	Mount_east_mg = "MOUNTMG42_east_mg",
	Mount_west_cyd_mg = "MOUNTMG42_west_cyd_mg",
	Mount_west_mg = "MOUNTMG42_west_mg",
	Repair_east_cyd_mg = "REPAIRMG42_east_cyd_mg",
	Repair_east_mg = "REPAIRMG42_east_mg",
	Repair_west_cyd_mg = "REPAIRMG42_west_cyd_mg",
	Repair_west_mg = "REPAIRMG42_west_mg",
	
	spawnkill = false,	// Turn this off to stop the bots from spawnkilling and win the round instead.
	thirtysecond = false,
	c1status = 0,
	c2status = 0,
	c3status = 0,
	c4status = 0,
	c5status = 0,
	c6staturs = 0,
	
	AxisASTable = {},
	AlliesASTable = {},
	
	// FirstSpawnSpam
	AlliesFirstspawn = { "bFirstspawn",},
	AxisFirstspawn = { "rFirstspawn", },

	Navigation =
	{
		ladders =
		{
			navigate = function(_this)
			{
				_this.Bot.HoldButton(BTN.FORWARD, 2);
				sleep(2);
			},			
		},			
	},	

	checkpoint1_Axis_Captured = function( trigger )
	{
		if ( TestMap )
			{ return; }
			
		Map.c1status = 1;
		
		Map.EvalSpawnkill();
		Map.ToggleDefends();
	},

	checkpoint1_Allies_Captured = function( trigger )
	{
		if ( TestMap )
			{ return; }
			
		Map.c1status = 2;
		
		Map.EvalSpawnkill();
		Map.ToggleDefends();
	},

	checkpoint2_Axis_Captured = function( trigger )
	{
		if ( TestMap )
			{ return; }
			
		Map.c2status = 1;	

		Map.EvalSpawnkill();
		Map.ToggleDefends();
	},

	checkpoint2_Allies_Captured = function( trigger )
	{
		if ( TestMap )
			{ return; }
			
		Map.c2status = 2;

		Map.EvalSpawnkill();
		Map.ToggleDefends();
	},

	checkpoint3_Axis_Captured = function( trigger )		// Allied 3rd
	{
		if ( TestMap )
			{ return; }
			
		Map.c3status = 1;
		
		SetAvailableMapGoals( TEAM.AXIS, false, "ARTILLERY_S_rCheckpoint3.*" );
		if (Map.spawnkill == false)
		{
			SetAvailableMapGoals( TEAM.AXIS, true, "CHECKPOINT_checkpoint1" );
		}

		Map.AxisASTable = {};

		SetAvailableMapGoals( TEAM.ALLIES, true, "MOUNTMG42_bCheckpoint2" );
		SetAvailableMapGoals( TEAM.ALLIES, false, "MOUNTMG42_bCourtyard" );
		
		Map.EvalSpawnkill();
		Map.ToggleDefends();
	},

	checkpoint3_Allies_Captured = function( trigger )	// Allied 3rd
	{
		if ( TestMap )
			{ return; }
			
		Map.c3status = 2;
		
		SetAvailableMapGoals( TEAM.AXIS, true, "ARTILLERY_S_rCheckpoint3.*" );

		Map.AlliesASTable = {};	// Turn off first spawn AS
		Map.AlliesASTable = {"bCourtyard_1",};

		Map.EvalSpawnkill();
		Map.ToggleDefends();
	},

	checkpoint4_Axis_Captured = function( trigger )		// Axis 3rd
	{
		if ( TestMap )
			{ return; }
			
		Map.c4status = 1;
		
		SetAvailableMapGoals( TEAM.ALLIES, true, "ARTILLERY_S_bCheckpoint4.*" );

		Map.AxisASTable = {};	// Turn off first spawn AS
		Map.AxisASTable = {"rCourtyard_1", "rCourtyard_2",};

		Map.EvalSpawnkill();
		Map.ToggleDefends();
	},

	checkpoint4_Allies_Captured = function( trigger )	// Axis 3rd
	{
		if ( TestMap )
			{ return; }
			
		Map.c4status = 2;
		
		SetAvailableMapGoals( TEAM.ALLIES, false, "ARTILLERY_S_bCheckpoint4.*" );
		SetAvailableMapGoals( TEAM.ALLIES, true, "CHECKPOINT_checkpoint5" );
		if (Map.spawnkill == false)
		{
			SetAvailableMapGoals( TEAM.ALLIES, true, "CHECKPOINT_checkpoint6" );
		}
		Map.AlliesASTable = {};

		Map.EvalSpawnkill();
		Map.ToggleDefends();
	},

	checkpoint5_Axis_Captured = function( trigger )		// Axis 2nd
	{
		if ( TestMap )
			{ return; }
			
		Map.c5status = 1;

		Map.EvalSpawnkill();
		Map.ToggleDefends();
	},

	checkpoint5_Allies_Captured = function( trigger )	// Axis 2nd
	{
		if ( TestMap )
			{ return; }
			
		Map.c5status = 2;

		Map.EvalSpawnkill();
		Map.ToggleDefends();
	},

	checkpoint6_Axis_Captured = function( trigger )		// Axis 1st
	{
		if ( TestMap )
			{ return; }
			
		Map.c6status = 1;
		
		Map.EvalSpawnkill();
		Map.ToggleDefends();
	},

	checkpoint6_Allies_Captured = function( trigger )	// Axis 1st
	{
		if ( TestMap )
			{ return; }
			
		Map.c6status = 2;	
		
		Map.EvalSpawnkill();
		Map.ToggleDefends();
	},
	
	thirty_second = function( trigger )
	{
		if ( TestMap )
			{ return; }
			
		Map.thirtysecond = true;
		
		//abandon scripted defends at this point
		Map.Defend.Axis = {};
		Map.Defend.Allies = {};
		
		//let the soldiers grab the flags
		SetGoalPriority( "CHECKPOINT.*", 1.0, TEAM.AXIS, CLASS.SOLDIER );
		SetGoalPriority( "CHECKPOINT.*", 1.0, TEAM.ALLIES, CLASS.SOLDIER );
		
		// make sure all flags are active
		RTCWUtil.EnableGoal( "CHECKPOINT.*" );
	},	
	
	ToggleDefends = function()
	{
		if ( TestMap )
			{ return; }
			
		if ( Map.c1status == 2 && Map.c2status == 2 && Map.c3status == 2 && Map.c4status ==2 )
		{
			Map.Defend.Allies = Map.bDefends;
			SetAvailableMapGoals( TEAM.AXIS, false, "MOUNTMG42_rCheckpoint5" );
			SetAvailableMapGoals( TEAM.AXIS, true, "MOUNTMG42_rCourtyard" );			
		}
		else
		{
			Map.Defend.Allies = Map.c2Defends;
			SetAvailableMapGoals( TEAM.ALLIES, true, "MOUNTMG42_bCheckpoint2" );
			SetAvailableMapGoals( TEAM.ALLIES, false, "MOUNTMG42_bCourtyard" );			
		}
		
		if ( Map.c6status == 1 && Map.c5status == 1 && Map.c4status ==1 && Map.c3status == 1 )
		{
			Map.Defend.Axis = Map.rDefends;
			SetAvailableMapGoals( TEAM.AXIS, true, "MOUNTMG42_rCourtyard" );
			SetAvailableMapGoals( TEAM.AXIS, false, "MOUNTMG42_rCheckpoint5" );			
		}
		else
		{
			Map.Defend.Axis = Map.c5Defends;
			SetAvailableMapGoals( TEAM.AXIS, false, "MOUNTMG42_rCourtyard" );
			SetAvailableMapGoals( TEAM.AXIS, true, "MOUNTMG42_rCheckpoint5" );				
		}
	},
	
	EvalSpawnkill = function()
	{
		if ( TestMap )
			{ return; }
			
		if ( !Map.spawnkill )
			{ return; }
			
		if ( Map.c1status == 2 && Map.c2status == 2 && Map.c3status == 2 && Map.c4status ==2 )
		{
			SetAvailableMapGoals( TEAM.ALLIES, false, "DEFEND_.*" );
			SetAvailableMapGoals( TEAM.ALLIES, false, "MOUNTMG42_.*" );
			SetAvailableMapGoals( TEAM.ALLIES, false, "CHECKPOINT_checkpoint6" );
			SetAvailableMapGoals( TEAM.ALLIES, true, "DEFEND_bSpawnkill_.*" );
			SetAvailableMapGoals( TEAM.ALLIES, true, "ARTILLERY_S_bSpawnkill" );
			SetAvailableMapGoals( TEAM.ALLIES, true, "CALLARTILLERY_bSpawnkill" );
			Map.AlliesASTable = { "bSpawnkill", };
		}
		else	
		{
			SetAvailableMapGoals( TEAM.ALLIES, false, "DEFEND_bSpawnkill_.*" );
			SetAvailableMapGoals( TEAM.ALLIES, false, "ARTILLERY_S_bSpawnkill" );
			SetAvailableMapGoals( TEAM.ALLIES, false, "CALLARTILLERY_bSpawnkill" );
			Map.AlliesASTable = {};
		}
		
		if ( Map.c6status == 1 && Map.c5status == 1 && Map.c4status ==1 && Map.c3status == 1 )
		{
			SetAvailableMapGoals( TEAM.AXIS, false, "CHECKPOINT_checkpoint1" );
			SetAvailableMapGoals( TEAM.AXIS, false, "DEFEND_.*" );
			SetAvailableMapGoals( TEAM.AXIS, false, "MOUNTMG42_.*" );
			SetAvailableMapGoals( TEAM.AXIS, true, "DEFEND_rSpawnkill_.*" );
			SetAvailableMapGoals( TEAM.AXIS, true, "ARTILLERY_S_rSpawnkill" );
			SetAvailableMapGoals( TEAM.AXIS, true, "CALLARTILLERY_rSpawnkill" );
			Map.AxisASTable = { "rSpawnkill", };
		}
		else	
		{
			SetAvailableMapGoals( TEAM.AXIS, false, "DEFEND_rSpawnkill_.*" );
			SetAvailableMapGoals( TEAM.AXIS, false, "ARTILLERY_S_rSpawnkill" );
			SetAvailableMapGoals( TEAM.AXIS, false, "CALLARTILLERY_rSpawnkill" );
			Map.AxisASTable = {};
		}		
	},
	
	rDefends = { "rDefend1", "rDefend2", "rDefend3", "rDefend4", "rDefend5", },
	bDefends = { "bDefend1", "bDefend2", "bDefend3", "bDefend4", "bDefend5", },
	c5Defends = { "c5d1", "c5d2", "c5d3", "c5d4", "c5d5" },
	c2Defends = { "c2d1", "c2d2", "c2d3", "c2d4", "c2d5" },
	
	Defend = 
	{
		Priority = 0.94,
		MaxBots = 4,
		AlliesUsers = {},
		AxisUsers = {},
		Allies = {},
		Axis = {},
	},	
};

global OnMapLoad = function()
{
	if ( TestMapOn )
		{ Util.AutoTestMap(); }

	OnTrigger( "Axis take the Northern Control Point!", Map.checkpoint6_Axis_Captured );
	OnTrigger( "Allies take the Northern Control Point!", Map.checkpoint6_Allies_Captured );
	OnTrigger( "Axis take the Eastern Control Point!", Map.checkpoint5_Axis_Captured );
	OnTrigger( "Allies take the Eastern Control Point!", Map.checkpoint5_Allies_Captured );
	OnTrigger( "Axis take the Eastern Courtyard!", Map.checkpoint4_Axis_Captured );
	OnTrigger( "Allies take the Eastern Courtyard!", Map.checkpoint4_Allies_Captured );
	OnTrigger( "Axis take the Western Courtyard!", Map.checkpoint3_Axis_Captured );
	OnTrigger( "Allies take the Western Courtyard!", Map.checkpoint3_Allies_Captured );
	OnTrigger( "Axis take the Western Control Point!", Map.checkpoint2_Axis_Captured );
	OnTrigger( "Allies take the Western Control Point!", Map.checkpoint2_Allies_Captured );
	OnTrigger( "Axis take the Southern Control Point!", Map.checkpoint1_Axis_Captured );
	OnTrigger( "Allies take the Southern Control Point!", Map.checkpoint1_Allies_Captured );
	OnTrigger( "thirty second warning.", Map.thirty_second );

	//priority should be based on closest available checkpoint
	SetGoalPriority( Map.checkpoint6, 1.0, TEAM.AXIS );
	SetGoalPriority( Map.checkpoint5, 0.95, TEAM.AXIS );
	SetGoalPriority( Map.checkpoint4, 0.90, TEAM.AXIS );
	SetGoalPriority( Map.checkpoint1, 1.0, TEAM.ALLIES );
	SetGoalPriority( Map.checkpoint2, 0.95, TEAM.ALLIES );
	SetGoalPriority( Map.checkpoint3, 0.90, TEAM.ALLIES );

	SetMapGoalProperties( "MOUNT_.*", {mincamptime=45, maxcamptime=60});

	SetGoalPriority( "CALL.*", 1.0 );
	SetGoalPriority( "ARTILLLERY.*", 1.0 );
	
	Map.Defend.Allies = Map.c2Defends;
	Map.Defend.Axis = Map.c5Defends;	
	
	//set these a bit higher so they will prefer once activated
	SetGoalPriority( "DEFEND_rSpawnkill.*", 0.6 );
	SetGoalPriority( "DEFEND_bSpawnkill.*", 0.6 );

	Map.AlliesASTable = Map.AlliesFirstspawn;
	Map.AxisASTable = Map.AxisFirstspawn;
	
	Util.SetMaxUsersInProgress( 1, "MOUNT.*" );
	Util.SetMaxUsersInProgress( 3, "CHECKPOINT.*" );

	RTCWUtil.DisableGoal( ".*", true );

	//soldiers will use mg's && rear flags
	RTCWUtil.ExcludeClass( "CHECKPOINT_checkpoint4", TEAM.AXIS, CLASS.SOLDIER );
	RTCWUtil.ExcludeClass( "CHECKPOINT_checkpoint3", TEAM.AXIS, CLASS.SOLDIER );
	RTCWUtil.ExcludeClass( "CHECKPOINT_checkpoint2", TEAM.AXIS, CLASS.SOLDIER );
	RTCWUtil.ExcludeClass( "CHECKPOINT_checkpoint1", TEAM.AXIS, CLASS.SOLDIER );	
	RTCWUtil.ExcludeClass( "CHECKPOINT_checkpoint6", TEAM.ALLIES, CLASS.SOLDIER );
	RTCWUtil.ExcludeClass( "CHECKPOINT_checkpoint5", TEAM.ALLIES, CLASS.SOLDIER );
	RTCWUtil.ExcludeClass( "CHECKPOINT_checkpoint4", TEAM.ALLIES, CLASS.SOLDIER );
	RTCWUtil.ExcludeClass( "CHECKPOINT_checkpoint3", TEAM.ALLIES, CLASS.SOLDIER );

	RTCWUtil.EnableGoal("CHECKPOINT.*");

	SetAvailableMapGoals( TEAM.AXIS, true, "MOUNTMG42_rCheckpoint5" );
	SetAvailableMapGoals( TEAM.ALLIES, true, "MOUNTMG42_bCheckpoint2" );

	MapRoutes =
	{
		CHECKPOINT_checkpoint2 = 	// Allied 2
		{
			ROUTE_bSpawn = 
			{
				ROUTE_wRoad = {},
			},
		},
		CHECKPOINT_checkpoint3 =	// Allied 3
		{
			ROUTE_bSpawn =
			{
				ROUTE_wRoad = {},
				ROUTE_sAlleyway = {Weight = 3,},
			},
			ROUTE_rSpawn =
			{
				ROUTE_eRoad = 
				{
					ROUTE_sCourtyard = {Weight = 2,},
					ROUTE_Courtyard = {Weight = 3,},
					ROUTE_nCourtyard = {},
				},
				ROUTE_nAlleyway =
				{
					Weight = 3,
					ROUTE_sCourtyard = {},
					ROUTE_Courtyard = {Weight = 4,},
					ROUTE_nCourtyard = {Weight = 2,},
				},
			},
		},
		CHECKPOINT_checkpoint4 =
		{
			ROUTE_bSpawn = 
			{
				ROUTE_wRoad = 
				{
					ROUTE_sCourtyard = {},
					ROUTE_Courtyard = {Weight = 3,},
					ROUTE_nCourtyard = {Weight = 2,},
				},
				ROUTE_sAlleyway =
				{
					ROUTE_sCourtyard = {},
					ROUTE_Courtyard = {Weight = 4,},
					ROUTE_nCourtyard = {Weight = 2,},
				},
			},
			ROUTE_rSpawn =
			{
				ROUTE_eRoad = {},
				ROUTE_nAlleyway = {Weight = 3,},
			},
		},
		DEFEND_rCheckpoint3_1 =
		{
			ROUTE_rSpawn =
			{
				ROUTE_eRoad = {},
				ROUTE_nAlleyway = {Weight = 3,},
			},
		},
		DEFEND_bCheckpoint4_1 =
		{
			ROUTE_bSpawn = 
			{
				ROUTE_wRoad = 
				{
					ROUTE_sCourtyard = {},
					ROUTE_Courtyard = {Weight = 3,},
					ROUTE_nCourtyard = {Weight = 2,},
				},
				ROUTE_sAlleyway =
				{
					ROUTE_sCourtyard = {},
					ROUTE_Courtyard = {Weight = 4,},
					ROUTE_nCourtyard = {Weight = 2,},
				},
			},		
		},
	};
	
	MapRoutes.DEFEND_rCheckpoint3_2 = MapRoutes.DEFEND_rCheckpoint3_1;
	MapRoutes.DEFEND_rCheckpoint3_3 = MapRoutes.DEFEND_rCheckpoint3_1;
	MapRoutes.DEFEND_rCheckpoint3_4 = MapRoutes.DEFEND_rCheckpoint3_1;
	MapRoutes.DEFEND_rCheckpoint3_5 = MapRoutes.DEFEND_rCheckpoint3_1;
	MapRoutes.DEFEND_rCheckpoint3_6 = MapRoutes.DEFEND_rCheckpoint3_1;
	MapRoutes.DEFEND_rSpawnkill_1= MapRoutes.DEFEND_rCheckpoint3_1;
	MapRoutes.DEFEND_rSpawnkill_2= MapRoutes.DEFEND_rCheckpoint3_1;
	MapRoutes.DEFEND_rSpawnkill_3= MapRoutes.DEFEND_rCheckpoint3_1;
	MapRoutes.DEFEND_rSpawnkill_4= MapRoutes.DEFEND_rCheckpoint3_1;
	MapRoutes.DEFEND_bCheckpoint4_2 = MapRoutes.DEFEND_bCheckpoint4_1;
	MapRoutes.DEFEND_bCheckpoint4_3 = MapRoutes.DEFEND_bCheckpoint4_1;
	MapRoutes.DEFEND_bCheckpoint4_4 = MapRoutes.DEFEND_bCheckpoint4_1;
//	MapRoutes.DEFEND_bCheckpoint4_5 = MapRoutes.DEFEND_bCheckpoint4_1;
	MapRoutes.DEFEND_bCheckpoint4_6 = MapRoutes.DEFEND_bCheckpoint4_1;
	MapRoutes.DEFEND_bSpawnkill_1 = MapRoutes.DEFEND_bCheckpoint4_1;
	MapRoutes.DEFEND_bSpawnkill_2 = MapRoutes.DEFEND_bCheckpoint4_1;
	MapRoutes.DEFEND_bSpawnkill_3 = MapRoutes.DEFEND_bCheckpoint4_1;
	MapRoutes.DEFEND_bSpawnkill_4 = MapRoutes.DEFEND_bCheckpoint4_1;
	MapRoutes.UGOAL_rDefend1 = MapRoutes.DEFEND_rCheckpoint3_1;
	MapRoutes.UGOAL_rDefend2 = MapRoutes.DEFEND_rCheckpoint3_1;
	MapRoutes.UGOAL_rDefend3 = MapRoutes.DEFEND_rCheckpoint3_1;
	MapRoutes.UGOAL_rDefend4 = MapRoutes.DEFEND_rCheckpoint3_1;
	MapRoutes.UGOAL_rDefend5 = MapRoutes.DEFEND_rCheckpoint3_1;
	MapRoutes.UGOAL_bDefend1 = MapRoutes.DEFEND_bCheckpoint4_1;
	MapRoutes.UGOAL_bDefend2 = MapRoutes.DEFEND_bCheckpoint4_1;
	MapRoutes.UGOAL_bDefend3 = MapRoutes.DEFEND_bCheckpoint4_1;
	MapRoutes.UGOAL_bDefend4 = MapRoutes.DEFEND_bCheckpoint4_1;
	MapRoutes.UGOAL_bDefend5 = MapRoutes.DEFEND_bCheckpoint4_1;

	Util.Routes(MapRoutes);
	print( "OnMapLoad" );
};

global OnBotJoin = function( bot )
{
	RTCWUtil.NoSnipe(bot);		// Not exactly a great sniping map is it...
	//default spawn
	bot.ChangeSpawnPoint( 0 );

		if ( TestMap )
			{ return; }
			
	team = bot.GetTeam();
	class = bot.GetClass();

	//set some bots up to use scripted camps
	if ( team == TEAM.ALLIES && class != CLASS.SOLDIER  )
	{
		RTCWUtil.numallies += 1;
		
		if ( tableCount(Map.Defend.AlliesUsers) < Map.Defend.MaxBots  )
		{
			if ( RTCWUtil.numallies % 2 == 0 )
			{		
				Map.Defend.AlliesUsers[ bot.GetGameId() ] = true;
				bot.AddScriptGoal("DualObjective");
			}
		}
	}	
	
	if ( team == TEAM.AXIS && class != CLASS.SOLDIER  )
	{
		RTCWUtil.numaxis += 1;
		
		if ( tableCount(Map.Defend.AxisUsers) < Map.Defend.MaxBots  )
		{
			if ( RTCWUtil.numaxis % 2 == 0 )
			{		
				Map.Defend.AxisUsers[ bot.GetGameId() ] = true;
				bot.AddScriptGoal("DualObjective");
			}
		}
	}		
};
