global Map =
{
	Quiet = true,
	Checkpoint_forwardspawn = "CHECKPOINT_forwardspawn",
	Flag_Allied_Flag = "FLAG_Allied_Flag",
	Flag_Axis_Flag = "FLAG_Axis_Flag",
	DispenseAmmoTime = 1,
	DontDispenseAmmo = true,
	rPanzLTBots = 0,
	FlagStatus = 0,
	FirstTimeCheck = 1,
	LevelTime = 0,
	LastAxisPanzTime = 0,
	LastAlliedPanzTime = 0,
	
	Navigation =
	{
		// LTs need to be killed
		rpanzlts =
		{
			navigate = function( _this )
			{
				if ( Map.FlagStatus == 2 && Map.LevelTime - Map.LastAxisPanzTime > 10 /*&& Map.rPanzLTBots == 0*/ && _this.Bot.HasWeapon( WEAPON.PANZERFAUST ) ) {
					wpTable = Util.WpNameInfo( "rPanzLTs" );
					Map.LastAxisPanzTime = Map.LevelTime ;

					_this.Bot.HoldButton( BTN.SPRINT, 999 );
					if ( _this.Goto( wpTable.position ) == EVENT.PATH_SUCCESS ) {
						_this.Bot.ReleaseButton( BTN.SPRINT );
						
						if ( _this.Bot.IsWeaponCharged( WEAPON.PANZERFAUST, 0 ) ) {
							_this.Bot.HoldButton( BTN.CROUCH, 20 );
							_this.AddAimRequest( Priority.High, "facing", wpTable.facing );
							_this.AddWeaponRequest( Priority.High, WEAPON.PANZERFAUST );
							_this.BlockForWeaponChange( WEAPON.PANZERFAUST );
							sleep( 0.3 ); // make sure its ready to fire
							_this.Bot.HoldButton( BTN.ATTACK1, 2 );
							sleep( 2 );
							_this.Bot.ReleaseButton( BTN.CROUCH );
						}
					}
					Map.rPanzLTBots -= 1;
				}
				yield();
			},
		},
		bpanzlts =
		{
			navigate = function( _this )
			{
				if ( Map.FlagStatus == 1 && Map.LevelTime - Map.LastAlliesPanzTime > 10 && _this.Bot.HasWeapon( WEAPON.PANZERFAUST ) ) {
					wpTable = Util.WpNameInfo( "bPanzLTs" );
					Map.LastAlliesPanzTime = Map.LevelTime ;

					_this.Bot.HoldButton( BTN.SPRINT, 999 );
					if ( _this.Goto( wpTable.position ) == EVENT.PATH_SUCCESS ) {
						_this.Bot.ReleaseButton( BTN.SPRINT );
						
						if ( _this.Bot.IsWeaponCharged( WEAPON.PANZERFAUST, 0 ) ) {
							_this.Bot.HoldButton( BTN.CROUCH, 20 );
							_this.AddAimRequest( Priority.High, "facing", wpTable.facing );
							_this.AddWeaponRequest( Priority.High, WEAPON.PANZERFAUST );
							_this.BlockForWeaponChange( WEAPON.PANZERFAUST );
							sleep( 0.3 ); // make sure its ready to fire
							_this.Bot.HoldButton( BTN.ATTACK1, 2 );
							sleep( 2 );
							_this.Bot.ReleaseButton( BTN.CROUCH );
						}
					}
				}
				yield();
			},
		},
	},

	Airstrike =
	{
		bnorthdoor =
		{
			Enabled = true,
			Team = ( 1 << TEAM.ALLIES ),
			Facing = Vector3( 0.586, -0.197, 0.786 ),
			NoPause = true,
		},
		bsouthdoor =
		{
			Enabled = true,
			Team = ( 1 << TEAM.ALLIES ),
			Facing = Vector3( 0.656, -0.060, 0.753 ),
			NoPause = true,
		},
		rnorthdoor =
		{
			Enabled = true,
			Team = ( 1 << TEAM.AXIS ),
			Facing = Vector3( -0.583, 0.045, 0.811 ),
			NoPause = true,

		},
		rsouthdoor =
		{
			Enabled = true,
			Team = ( 1 << TEAM.AXIS ),
			Facing = Vector3( -0.675, 0.106, 0.731 ),
			NoPause = true,
		},
	},
	Allied_Flag_Taken = function( trigger )
	{
		if ( TestMap ) {
			return;
		}

		print( "Allied_Flag_Taken" );
	},

	Axis_Flag_Taken = function( trigger )
	{
		if ( TestMap ) {
			return;
		}

		print( "Axis_Flag_Taken" );
	},

	forwardspawn_Axis_Captured = function( trigger )
	{
		if ( TestMap ) {
			return;
		}
		Map.FlagStatus = 1;

		Util.MapDebugPrint( "forwardspawn_Axis_Captured" );
		RTCWUtil.StopSniping();
		Map.DisableAirstrikes();

		SetAvailableMapGoals( TEAM.AXIS, false, "MOUNTMG42_.*" );
		SetAvailableMapGoals( TEAM.AXIS, true, "MOUNTMG42_rCapMG" );
		SetAvailableMapGoals( TEAM.AXIS, true, "AIRSTRIKE_rDeliver.*" );
		SetAvailableMapGoals( TEAM.AXIS, true, "DEFEND_rLT.*" );
		SetAvailableMapGoals( TEAM.AXIS, false, "ARTILLERY_S_rBoxes.*" );

		SetAvailableMapGoals( TEAM.ALLIES, false, "MOUNTMG42_.*" );
		SetAvailableMapGoals( TEAM.ALLIES, true, "MOUNTMG42_bSpawnMG" );
		SetAvailableMapGoals( TEAM.ALLIES, false, "AIRSTRIKE_bDeliver.*" );
		SetAvailableMapGoals( TEAM.ALLIES, false, "DEFEND_bLT.*" );
	},

	forwardspawn_Allies_Captured = function( trigger )
	{
		if ( TestMap ) {
			return;
		}
		Map.FlagStatus = 2;
		
		Util.MapDebugPrint( "forwardspawn_Allies_Captured" );
		RTCWUtil.StopSniping();
		Map.DisableAirstrikes();

		SetAvailableMapGoals( TEAM.AXIS, false, "MOUNTMG42_.*" );
		SetAvailableMapGoals( TEAM.AXIS, true, "MOUNTMG42_rSpawnMG" );
		SetAvailableMapGoals( TEAM.AXIS, false, "AIRSTRIKE_rDeliver.*" );
		SetAvailableMapGoals( TEAM.AXIS, false, "DEFEND_rLT.*" );
		SetAvailableMapGoals( TEAM.AXIS, true, "ARTILLERY_S_rBoxes.*" );

		SetAvailableMapGoals( TEAM.ALLIES, false, "MOUNTMG42_.*" );
		SetAvailableMapGoals( TEAM.ALLIES, true, "MOUNTMG42_bCapMG" );
		SetAvailableMapGoals( TEAM.ALLIES, true, "AIRSTRIKE_bDeliver.*" );
		SetAvailableMapGoals( TEAM.ALLIES, true, "DEFEND_bLT.*" );
	},
	DisableAirstrikes = function()
	{
		Util.SetMaxUsersInProgress( 3, "CHECKPOINT.*" );
		Map.Airstrike.bsouthdoor.Enabled = false;
		Map.Airstrike.bnorthdoor.Enabled = false;
		Map.Airstrike.rsouthdoor.Enabled = false;
		Map.Airstrike.rnorthdoor.Enabled = false;
	},
	DisableCombatMove =
	{
		Name = "DisableCombatMove",
		TriggerOnClass = CLASS.ANYPLAYER,
		OnEnter = function( ent )
		{
			b = Util.GetBotByName( GetEntName( ent ) );
			if ( b ) {
				b.DisableBotPush( true );
				b.DisableCombatMovement = true;
			}
		},
		OnExit = function( ent )
		{
			b = Util.GetBotByName( GetEntName( ent ) );
			if ( b ) {
				b.DisableBotPush( false );
				b.DisableCombatMovement = false;
			}
		},
	},
	
	AlliesWin = function()
	{
		if ( TestMap ) {
			return;
		}

		Util.MapDebugPrint( "timelimit_hit" );
		foreach( id and bot in BotTable )
		{
			if ( RandInt( 0,10 ) < 3 ) {
				bot.SayVoice( VOICE.G_GOODGAME );
			}
			sleep( 0.2 );
			if ( RandInt( 0,10 ) > 7 ) {
				bot.SayVoice( VOICE.G_CHEER );
				sleep( 0.2 );
			}
			if ( RandInt( 0,10 ) < 6 && RandInt( 0,10 ) > 3 ) {
				bot.SayVoice( VOICE.G_ENEMY_WEAK );
				sleep( 0.2 );
			}
		}
	},
	panzertimer = function()
	{
		while ( 1 )
		{
			/*if ( Map.FirstTimeCheck == true ) {
				Map.FirstTimeCheck = false;
				sleep( 3 );
			}*/
			Map.LevelTime += 1;
			sleep( 1 );
		}
	},
};

global OnMapLoad = function()
{
	if ( TestMapOn ) {
		Util.AutoTestMap();
	}
	
	thread( Map.panzertimer );
	
	ras = OnTriggerRegion( AABB( -2224.000,-344.000,401.000,-1794.000,1.000,475.000 ), Map.DisableCombatMove );

	OnTrigger( "MISSING_STRING", Map.Allied_Flag_Taken );
	OnTrigger( "MISSING_STRING", Map.Axis_Flag_Taken );
	OnTrigger( "Axis Team captured the forward spawn!", Map.forwardspawn_Axis_Captured );
	OnTrigger( "Allied Team captured forward spawn!", Map.forwardspawn_Allies_Captured );
	OnTrigger( "Allies successfully Captured the Flag!", Map.AlliesWin ); // This is the same script event for both teams...

	SetMapGoalProperties( "SNIPE_.*", {mincamptime = 45, maxcamptime = 60} );
	SetMapGoalProperties( "ATTACK_.*", {mincamptime = 10, maxcamptime = 20} );
	SetMapGoalProperties( "DEFEND_.*", {mincamptime = 20, maxcamptime = 35} );
	SetMapGoalProperties( "DEFEND_rLT.*", {mincamptime = 21, maxcamptime = 25} );
	SetMapGoalProperties( "DEFEND_bLT.*", {mincamptime = 21, maxcamptime = 25} );
	SetMapGoalProperties( "PANZER_.*", {mincamptime = 45, maxcamptime = 60} );
	SetMapGoalProperties( "MOUNT.*", {mincamptime = 60, maxcamptime = 90} );

	RTCWUtil.SetPrimaryGoals( 1.0 );
	RTCWUtil.DisableGoal( ".*", true ); //all but routes

	SetAvailableMapGoals( TEAM.ALLIES, true, "ATTACK_bAttack.*" );
	SetAvailableMapGoals( TEAM.ALLIES, true, "CAPPOINT_alliescap" );
	SetAvailableMapGoals( TEAM.ALLIES, true, "MOUNTMG42_bSpawnMG" );
	SetAvailableMapGoals( TEAM.ALLIES, true, "REPAIRMG42_b.*" );
	SetAvailableMapGoals( TEAM.ALLIES, true, "FLAG_Axis_Flag" );

	SetAvailableMapGoals( TEAM.AXIS, true, "ATTACK_rAttack.*" );
	SetAvailableMapGoals( TEAM.AXIS, true, "CAPPOINT_axiscap" );
	SetAvailableMapGoals( TEAM.AXIS, true, "MOUNTMG42_rSpawnMG" );
	SetAvailableMapGoals( TEAM.AXIS, true, "REPAIRMG42_r.*" );
	SetAvailableMapGoals( TEAM.AXIS, true, "FLAG_Allied_Flag" );

	RTCWUtil.EnableGoal( "CHECKPOINT.*" );

	Util.SetMaxUsersInProgress( 1, "MOUNT.*" );
	Util.SetMaxUsersInProgress( 10, "CHECKPOINT.*" ); // we need to get this to win
	Util.SetMaxUsersInProgress( 3, "FLAG.*" );

	SetGoalPriority( "AIRSTRIKE_.*", 0.94 );
	SetGoalPriority( "CAMP_.*", 0.95 );
	SetGoalPriority( "DEFEND_rLT.*", 0.55 );
	SetGoalPriority( "DEFEND_bLT.*", 0.55 );
	SetGoalPriority( "MOUNTMG42_.*", 0.91 );

	RTCWUtil.LimitToClass( "MOUNTMG42.*", TEAM.ALLIES, CLASS.SOLDIER );
	RTCWUtil.LimitToClass( "DEFEND_bLT.*", TEAM.ALLIES, CLASS.LIEUTENANT );
	RTCWUtil.LimitToClass( "FLAG_Axis_Flag", TEAM.ALLIES, CLASS.MEDIC, CLASS.ENGINEER, CLASS.SOLDIER );

	RTCWUtil.LimitToClass( "MOUNTMG42.*", TEAM.AXIS, CLASS.SOLDIER );
	RTCWUtil.LimitToClass( "DEFEND_rLT.*", TEAM.AXIS, CLASS.LIEUTENANT );
	RTCWUtil.LimitToClass( "FLAG_Allied_Flag", TEAM.AXIS, CLASS.MEDIC, CLASS.ENGINEER, CLASS.SOLDIER );

	MapRoutes =
	{
		// THIS NEEDS WORK, bots dont use the overlook at all
		CHECKPOINT_forwardspawn =
		{
			ROUTE_rspawn =
			{
				ROUTE_rcargo =
				{
					ROUTE_rsewer =
					{
						ROUTE_rmidcenter = {},
						ROUTE_roverlook = 
						{
							Weight = 2,
							ROUTE_rnorthcenter ={},
						},
					},
					ROUTE_rwesttank =
					{
						ROUTE_rmidcenter = {},
						ROUTE_rsouthcenter = {},
					},
				},
				ROUTE_rboxes =
				{
					ROUTE_rsewer =
					{
						ROUTE_rmidcenter = {},
						ROUTE_roverlook = 
						{
							Weight = 2,
							ROUTE_rnorthcenter ={},
						},
					},
					ROUTE_rwesttank =
					{
						ROUTE_rmidcenter = {},
						ROUTE_rsouthcenter = {},
					},
				},
				ROUTE_rladder =
				{
					Weight = 2,
					ROUTE_reasttank =
					{
						ROUTE_rmidcenter = {},
						ROUTE_rtankmg42 =
						{
							ROUTE_rsouthcenter = {},
						},
					},
				},
			},
			ROUTE_bspawn =
			{
				ROUTE_bcargo =
				{
					ROUTE_bsewer =
					{
						ROUTE_bmidcenter = {},
						ROUTE_boverlook = 
						{
							Weight = 2,
							ROUTE_bnorthcenter ={},
						},
					},
					ROUTE_bwesttank =
					{
						ROUTE_bmidcenter = {},
						ROUTE_bsouthcenter = {},
					},
				},
				ROUTE_bboxes =
				{
					ROUTE_bsewer =
					{
						ROUTE_bmidcenter = {},
						ROUTE_boverlook = 
						{
							Weight = 2,
							ROUTE_bnorthcenter ={},
						},
					},
					ROUTE_bwesttank =
					{
						ROUTE_bmidcenter = {},
						ROUTE_bsouthcenter = {},
					},
				},
				ROUTE_bladder =
				{
					Weight = 2,
					ROUTE_beasttank =
					{
						ROUTE_bmidcenter = {},
						ROUTE_btankmg42 =
						{
							ROUTE_bsouthcenter = {},
						},
					},
				},
			},
		},
		CAPPOINT_axiscap =
		{
			ROUTE_axisdocsteal =
			{
				ROUTE_bsouthcenter =
				{
					ROUTE_boverlook =
					{
						ROUTE_bsewer =
						{
							ROUTE_bboxes ={},
							ROUTE_bcargo = {Weight=3,},
						},
						ROUTE_beasttank =
						{
							ROUTE_bboxes ={},
							ROUTE_bcargo = {},
							ROUTE_bladder = {},
						},
					},
				},
				ROUTE_bmidcenter =
				{
					ROUTE_bsewer =
					{
						ROUTE_bboxes ={},
						ROUTE_bcargo = {Weight=3,},
					},
					ROUTE_beasttank =
					{
						ROUTE_bboxes ={},
						ROUTE_bcargo = {},
						ROUTE_bladder = {},
					},
					ROUTE_bwesttank =
					{
						ROUTE_bladder = {},
					},
				},
				ROUTE_bnorthcenter =
				{
					ROUTE_beasttank =
					{
						ROUTE_bboxes ={},
						ROUTE_bcargo = {Weight=3,},
					},
					ROUTE_bwesttank =
					{
						ROUTE_bladder = {},
					},
					ROUTE_btankmg42 =
					{
						ROUTE_bladder = {},
					},
				},
			},
		},
		ATTACK_rAttack_1 =
		{
			ROUTE_spawnflag =
			{
				ROUTE_bsouthcenter =
				{
					ROUTE_boverlook =
					{
						ROUTE_bsewer =	{},
						ROUTE_beasttank = {},
					},
				},
				ROUTE_bmidcenter =
				{
					Weight = 2,
					ROUTE_bsewer =	{},
					ROUTE_beasttank = {},
					ROUTE_bwesttank = {},
				},
				ROUTE_bnorthcenter =
				{
					Weight = 2,
					ROUTE_beasttank = {},
					ROUTE_bwesttank = {},
					ROUTE_btankmg42 = {},
				},
			},
		},
		AIRSTRIKE_rDeliver_1 =
		{
			ROUTE_spawnflag =
			{
				ROUTE_bsouthcenter =
				{
					Weight = 2,
					ROUTE_boverlook = {},
				},
				ROUTE_bmidcenter = {},
			},
		},
		// ** ALLIES **
		CAPPOINT_alliescap =
		{
			ROUTE_alliesdocsteal =
			{
				ROUTE_rsouthcenter =
				{
					ROUTE_roverlook =
					{
						ROUTE_rsewer =
						{
							ROUTE_rboxes ={},
							ROUTE_rcargo = {Weight=3,},
						},
						ROUTE_reasttank =
						{
							ROUTE_rboxes ={},
							ROUTE_rcargo = {},
							ROUTE_rladder = {},
						},
					},
				},
				ROUTE_rmidcenter =
				{
					ROUTE_rsewer =
					{
						ROUTE_rboxes ={},
						ROUTE_rcargo = {Weight=3,},
					},
					ROUTE_reasttank =
					{
						ROUTE_rboxes ={},
						ROUTE_rcargo = {},
						ROUTE_rladder = {},
					},
					ROUTE_rwesttank =
					{
						ROUTE_rladder = {},
					},
				},
				ROUTE_rnorthcenter =
				{
					ROUTE_reasttank =
					{
						ROUTE_rboxes ={},
						ROUTE_rcargo = {Weight=3,},
					},
					ROUTE_rwesttank =
					{
						ROUTE_rladder = {},
					},
					ROUTE_rtankmg42 =
					{
						ROUTE_rladder = {},
					},
				},
			},
		},
		ATTACK_bAttack_1 =
		{
			ROUTE_spawnflag =
			{
				ROUTE_rsouthcenter =
				{
					ROUTE_roverlook =
					{
						ROUTE_rsewer =	{},
						ROUTE_reasttank = {},
					},
				},
				ROUTE_rmidcenter =
				{
					Weight = 2,
					ROUTE_rsewer =	{},
					ROUTE_reasttank = {},
					ROUTE_rwesttank = {},
				},
				ROUTE_rnorthcenter =
				{
					Weight = 2,
					ROUTE_reasttank = {},
					ROUTE_rwesttank = {},
					ROUTE_rtankmg42 = {},
				},
			},
		},
		AIRSTRIKE_bDeliver_1 =
		{
			ROUTE_spawnflag =
			{
				ROUTE_rsouthcenter =
				{
					Weight = 2,
					ROUTE_roverlook = {},
				},
				ROUTE_rmidcenter = {},
			},
		},
	};
	
	MapRoutes.ATTACK_rAttack_1.ROUTE_rspawn = MapRoutes.CHECKPOINT_forwardspawn;
	MapRoutes.ATTACK_rAttack_2 = MapRoutes.ATTACK_rAttack_1;
	MapRoutes.ATTACK_rAttack_3 = MapRoutes.ATTACK_rAttack_1;
	MapRoutes.ATTACK_rAttack_4 = MapRoutes.ATTACK_rAttack_1;
	MapRoutes.ATTACK_rAttack_5 = MapRoutes.ATTACK_rAttack_1;
	MapRoutes.ATTACK_rAttack_6 = MapRoutes.ATTACK_rAttack_1;
	MapRoutes.ATTACK_rAttack_7 = MapRoutes.ATTACK_rAttack_1;
	MapRoutes.ATTACK_rAttack_8 = MapRoutes.ATTACK_rAttack_1;
	MapRoutes.FLAG_Allied_Flag = MapRoutes.CHECKPOINT_forwardspawn;
	
	Util.Routes( MapRoutes );

	print( "OnMapLoad" );
};

// Uncomment for shootable breakables

global OnBotJoin = function( bot )
{
	//~ bot.TargetBreakableDist = 80.0;
	bot.ChangeSpawnPoint( 0 );
	bot.TargetBreakableDist = 100.0;
	RTCWUtil.StopSniping();
	RTCWUtil.SelectWeapon( bot, WEAPON.PANZERFAUST );
};
