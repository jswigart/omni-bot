global Map =
{
	Quiet = true,
	FocusPrimary = false,

	Checkpoint_south_flag = "CHECKPOINT_south_flag",
	FLAG_UFO_Documents = "FLAG_UFO_Documents",
	Cappoint_transmitter = "CAPPOINT_transmitter",
	Plant_allied_obj1 = "PLANT_Main_Gate",
	Plant_allied_obj1a = "PLANT_South_Gate",
	Mount_sentry_MG = "MOUNTMG42_sentry_MG",
	Repair_sentry_MG = "REPAIRMG42_sentry_MG",
	Snipe_phase1_blue_snipe1 = "SNIPE_phase1_blue_snipe1",
	Snipe_phase1_red_snipe1 = "SNIPE_phase1_red_snipe1",
	FriendlyFire,

	//initially disabled so they airstrike faster
	DispenseAmmoDisable = true,
	DontDispenseAmmo  = true,
	DispenseAmmoTime = 3,
	MainStatus = true,
	SouthStatus = true,
	DocStatus = true,
	Suicide = MAP_SUICIDE,

	Navigation =
	{
		window =
		{
			navigate = function( _this )
			{
				_this.Bot.PressButton( BTN.JUMP );
				sleep( 0.25 );
				_this.Bot.HoldButton( BTN.SPRINT, 3 );
				_this.Bot.HoldButton( BTN.CROUCH, 1 );
				sleep( 3 );
			},
		},
		boxes =
		{
			navigate = function( _this )
			{
				_this.Bot.PressButton( BTN.JUMP );
				sleep( 0.25 );
			},
		},
		rail =
		{
			navigate = function( _this )
			{
				_this.Bot.PressButton( BTN.JUMP );
				sleep( 0.25 );
			},
		},
	},

	south_flag_Allies_Captured = function( trigger )
	{
		if ( TestMap ) {
			return;
		}

		SetAvailableMapGoals( TEAM.AXIS, false, "AIRSTRIKE_.*" );
		SetAvailableMapGoals( TEAM.AXIS, false, "DEFEND_phase1.south.*" );
		SetAvailableMapGoals( TEAM.AXIS, false, "DEFEND_phase1.main.*" );
		SetAvailableMapGoals( TEAM.AXIS, false, "DEFEND_phase1.d.*" );
		SetAvailableMapGoals( TEAM.ALLIES, false, "ATTACK_phase1.*" );
		SetAvailableMapGoals( TEAM.AXIS, false, Map.Mount_sentry_MG );
		SetAvailableMapGoals( TEAM.AXIS, false, Map.Repair_sentry_MG );
		SetAvailableMapGoals( TEAM.AXIS, true, "ARTILLERY_S_rSpawnkill.*" );

		if ( Map.DocStatus ) {
			SetAvailableMapGoals( TEAM.AXIS, true, "DEFEND_ufo.*" );
			SetAvailableMapGoals( TEAM.AXIS, true, "DEFEND_docs.*" );
			SetAvailableMapGoals( TEAM.AXIS, true, "AIRSTRIKE_rBridgeAS_.*" );
			SetAvailableMapGoals( TEAM.AXIS, true, "PANZER_rRoof_.*" );
		}
		if ( Map.FriendlyFire < 1 ) {
			SetAvailableMapGoals( TEAM.ALLIES, true, "ARTILLERY_S_bSpawnkill.*" );
		}

	},

	south_flag_Axis_Captured = function( trigger )
	{
		if ( TestMap ) {
			return;
		}

		SetAvailableMapGoals( TEAM.AXIS, false, "PANZER_rRoof_.*" );
		SetAvailableMapGoals( TEAM.AXIS, false, "ARTILLERY_S_rSpawnkill.*" );
	},

	allied_obj1a_Destroyed = function( trigger )
	{
		if ( TestMap ) {
			return;
		}

		Map.SouthStatus = false;

		SetAvailableMapGoals( TEAM.ALLIES, false, "AIRSTRIKE_.*" );
		SetAvailableMapGoals( TEAM.ALLIES, true, Map.FLAG_UFO_Documents );
		SetAvailableMapGoals( TEAM.ALLIES, true, Map.Checkpoint_south_flag );
		SetAvailableMapGoals( TEAM.ALLIES, true, "ATTACK_doc_attack.*" );
		SetAvailableMapGoals( TEAM.ALLIES, false, "ATTACK_phase1.*" );
		SetAvailableMapGoals( TEAM.ALLIES, false, "SNIPE_phase1_blue.*" );
		SetAvailableMapGoals( TEAM.AXIS, false, "SNIPE_phase1_red.*" );
		SetAvailableMapGoals( TEAM.AXIS, false, Map.Mount_sentry_MG );
		SetAvailableMapGoals( TEAM.AXIS, false, Map.Repair_sentry_MG );

		if ( Map.MainStatus && Map.DocStatus ) {
			SetAvailableMapGoals( TEAM.AXIS, true, "DEFEND_phase1.south.*" );
		}

		if ( !Map.DocStatus ) {
			SetAvailableMapGoals( TEAM.ALLIES, true, "ATTACK_trans.*" );
		}

		if ( !Map.MainStatus && Map.DocStatus ) {
			SetAvailableMapGoals( TEAM.AXIS, true, "DEFEND_ufo.*" );
			SetAvailableMapGoals( TEAM.AXIS, true, "DEFEND_docs.*" );
			SetAvailableMapGoals( TEAM.AXIS, false, "DEFEND_phase1.south.*" );
			SetAvailableMapGoals( TEAM.AXIS, false, "DEFEND_phase1.main.*" );
			SetAvailableMapGoals( TEAM.AXIS, false, "DEFEND_phase1.d.*" );
		}

		//soldiers should switch to panzer
		RTCWUtil.SwitchWeapon( WEAPON.PANZERFAUST );

		if ( Map.Suicide ) {
			RTCWUtil.SetSuicide( TEAM.AXIS, CLASS.LIEUTENANT, 0, 0 );
		}
	},

	allied_obj1_Destroyed = function( trigger )
	{
		if ( TestMap ) {
			return;
		}

		Map.MainStatus = false;

		Map.DontDispenseAmmo = false;
		Util.EnableGoal( "ROUTE_main_gate_defense" );

		SetAvailableMapGoals( TEAM.ALLIES, false, "AIRSTRIKE_.*" );
		SetAvailableMapGoals( TEAM.ALLIES, true, Map.FLAG_UFO_Documents );
		SetAvailableMapGoals( TEAM.ALLIES, true, Map.Checkpoint_south_flag );
		SetAvailableMapGoals( TEAM.ALLIES, true, "ATTACK_doc_attack.*" );
		SetAvailableMapGoals( TEAM.ALLIES, false, "ATTACK_phase1.*" );
		SetAvailableMapGoals( TEAM.ALLIES, false, "SNIPE_phase1_blue.*" );
		SetAvailableMapGoals( TEAM.AXIS, false, "SNIPE_phase1_red.*" );
		SetAvailableMapGoals( TEAM.AXIS, false, Map.Mount_sentry_MG );
		SetAvailableMapGoals( TEAM.AXIS, false, Map.Repair_sentry_MG );
		SetAvailableMapGoals( TEAM.ALLIES, false, "ARTILLERY_S_bInitial.*" );

		if ( Map.SouthStatus && Map.DocStatus ) {
			SetAvailableMapGoals( TEAM.AXIS, true, "DEFEND_phase1.main.*" );
		}

		if ( !Map.DocStatus ) {
			SetAvailableMapGoals( TEAM.ALLIES, true, "ATTACK_trans.*" );
		}

		if ( !Map.SouthStatus && Map.DocStatus ) {
			SetAvailableMapGoals( TEAM.AXIS, true, "DEFEND_ufo.*" );
			SetAvailableMapGoals( TEAM.AXIS, true, "DEFEND_docs.*" );
			SetAvailableMapGoals( TEAM.AXIS, false, "DEFEND_phase1.south.*" );
			SetAvailableMapGoals( TEAM.AXIS, false, "DEFEND_phase1.main.*" );
			SetAvailableMapGoals( TEAM.AXIS, false, "DEFEND_phase1.d.*" );
		}

		//soldiers should switch to panzer
		RTCWUtil.SwitchWeapon( WEAPON.PANZERFAUST );

		if ( Map.Suicide ) {
			RTCWUtil.SetSuicide( TEAM.AXIS, CLASS.LIEUTENANT, 0, 0 );
		}
	},


	main_planted = function( trigger )
	{
		if ( TestMap ) {
			return;
		}

		Util.DisableGoal( "DEFUSE_Main_Gate.*" );
	},

	main_defused = function( trigger )
	{
		if ( TestMap ) {
			return;
		}
	},

	south_planted = function( trigger )
	{
		if ( TestMap ) {
			return;
		}

		Util.DisableGoal( "DEFUSE_South_Gate.*" );
	},

	south_defused = function( trigger )
	{
		if ( TestMap ) {
			return;
		}
	},

	The_UFO_Documents_Taken = function( trigger )
	{
		if ( TestMap ) {
			return;
		}

		Map.DocStatus = false;
		Map.DontDispenseAmmo = true;

		SetAvailableMapGoals( TEAM.AXIS, true, "DEFEND_trans.*" );
		SetAvailableMapGoals( TEAM.AXIS, true, "DEFEND_flex_trans.*" );

		SetAvailableMapGoals( TEAM.AXIS, false, "DEFEND_ufo.*" );
		SetAvailableMapGoals( TEAM.AXIS, false, "DEFEND_docs.*" );

		//two humans can boost over fence
		if ( !Map.SouthStatus || !Map.MainStatus ) {
			SetAvailableMapGoals( TEAM.ALLIES, true, "ATTACK_trans.*" );
			SetAvailableMapGoals( TEAM.ALLIES, false, "SNIPE_phase1_blue.*" );
		}

		SetAvailableMapGoals( TEAM.ALLIES, false, "ATTACK_doc_attack.*" );
		SetAvailableMapGoals( TEAM.AXIS, false, "DEFEND_phase1.south.*" );
		SetAvailableMapGoals( TEAM.AXIS, false, "DEFEND_phase1.main.*" );
		SetAvailableMapGoals( TEAM.AXIS, false, "DEFEND_phase1.d.*" );
		SetAvailableMapGoals( TEAM.AXIS, false, Map.sentry_MG );
		SetAvailableMapGoals( TEAM.ALLIES, false, Map.FLAG_UFO_Documents );

		SetAvailableMapGoals( TEAM.ALLIES, true, "PANZER_axis_spawn_north" );
		SetAvailableMapGoals( TEAM.AXIS, false, "PANZER_rRoof.*" );

		//activate some AS goals for Axis
		SetAvailableMapGoals( TEAM.AXIS, false, "AIRSTRIKE_.*" );
		SetAvailableMapGoals( TEAM.AXIS, true, "AIRSTRIKE_red_as[12]_trans" );
	},

	docs_returned = function( trigger )
	{
		if ( TestMap ) {
			return;
		}

		Map.DocStatus = true;

		SetAvailableMapGoals( TEAM.AXIS, false, "DEFEND_trans.*" );
		SetAvailableMapGoals( TEAM.AXIS, false, "DEFEND_flex_trans.*" );
		SetAvailableMapGoals( TEAM.ALLIES, false, "ATTACK_trans.*" );
		SetAvailableMapGoals( TEAM.AXIS, true, "DEFEND_ufo.*" );
		SetAvailableMapGoals( TEAM.AXIS, true, "DEFEND_docs.*" );
		SetAvailableMapGoals( TEAM.ALLIES, true, "ATTACK_doc_attack.*" );
		SetAvailableMapGoals( TEAM.ALLIES, true, Map.FLAG_UFO_Documents );


		if ( Map.SouthStatus && Map.MainStatus ) {
			SetAvailableMapGoals( TEAM.ALLIES, true, "SNIPE_phase1_blue.*" );
			SetAvailableMapGoals( TEAM.AXIS, true, "SNIPE_phase1_red.*" );
			SetAvailableMapGoals( TEAM.AXIS, true, "DEFEND_phase1.south.*" );
			SetAvailableMapGoals( TEAM.AXIS, true, "DEFEND_phase1.main.*" );
			SetAvailableMapGoals( TEAM.ALLIES, false, "ATTACK_doc_attack.*" );
			SetAvailableMapGoals( TEAM.AXIS, true, "DEFEND_phase1.d.*" );
			SetAvailableMapGoals( TEAM.AXIS, true, Map.sentry_MG );
			SetAvailableMapGoals( TEAM.AXIS, false, "DEFEND_ufo.*" );
			SetAvailableMapGoals( TEAM.AXIS, false, "DEFEND_docs.*" );
			SetAvailableMapGoals( TEAM.AXIS, true, Map.sentry_MG );
			SetAvailableMapGoals( TEAM.ALLIES, false, Map.FLAG_UFO_Documents );
		}

		if ( !Map.MainStatus ) {
			Map.DontDispenseAmmo = false;
		}

		//clear the AS goals
		SetAvailableMapGoals( TEAM.AXIS, false, "AIRSTRIKE_.*" );
		SetAvailableMapGoals( TEAM.ALLIES, false, "PANZER_axis_spawn_north" );
		SetAvailableMapGoals( TEAM.AXIS, true, "PANZER_rRoof.*" );
	},

	transmitter_Captured = function( trigger )
	{
		if ( TestMap ) {
			return;
		}
	},

	two_minute = function( trigger )
	{
		if ( TestMap ) {
			return;
		}

		//time is low, so start focusing on main obj
		Map.FocusPrimary = true;

		SetAvailableMapGoals( TEAM.AXIS, true, Map.FLAG_UFO_Documents );
	},
	
		DisableCombatMove =
	{
		Name = "DisableCombatMove",
		TriggerOnClass = CLASS.ANYPLAYER,
		OnEnter = function( ent )
		{
			b = Util.GetBotByName( GetEntName( ent ) );
			if ( b ) {
				b.DisableCombatMovement = true;
			}
		},
		OnExit = function( ent )
		{
			b = Util.GetBotByName( GetEntName( ent ) );
			if ( b ) {
				b.DisableCombatMovement = false;
			}
		},
	},

	//thirty_second = function( trigger )
	//{
	//
	//},
};

global OnMapLoad = function()
{
	if ( TestMapOn ) {
		RTCWUtil.AutoTestMap();
	}

	NoCombat = OnTriggerRegion( AABB( -2863.000,-2208.000,777.000,-2032.000,-799.000,851.000 ), Map.DisableCombatMove );
	OnTrigger( "The Main Gate has been breached!", Map.allied_obj1_Destroyed );
	OnTrigger( "The South Gate has been breached!", Map.allied_obj1a_Destroyed );
	OnTrigger( "Allies have stolen The UFO Documents!", Map.The_UFO_Documents_Taken );
	OnTrigger( "Flag returned UFO Documents!", Map.docs_returned );
	OnTrigger( "Allies Transmitted the UFO Documents!", Map.transmitter_Captured );
	OnTrigger( "Axis Regain Control of The Reinforcement Point!", Map.south_flag_Axis_Captured );
	OnTrigger( "Allies Capture The Reinforcement Point!", Map.south_flag_Allies_Captured );
	OnTrigger( "Planted at The Main Gate.", Map.main_planted );
	OnTrigger( "Defused at The Main Gate.", Map.main_defused );
	OnTrigger( "Planted at The South Gate.", Map.south_planted );
	OnTrigger( "Defused at The South Gate.", Map.south_defused );
	OnTrigger( "two minute warning.", Map.two_minute );
	//OnTrigger( "thirty second warning.", Map.thirty_second );

	Util.SetMaxUsersInProgress( 8, Map.FLAG_UFO_Documents );
	Util.SetMaxUsersInProgress( 1, "ATTACK.*" );
	Util.SetMaxUsersInProgress( 1, "DEFEND.*" );
	Util.SetMaxUsersInProgress( 1, "MOUNT.*" );
	Util.SetMaxUsersInProgress( 1, "REPAIR.*" );

	SetMapGoalProperties( "SNIPE_.*", {mincamptime = 999, maxcamptime = 999} );
	SetMapGoalProperties( "PANZER_.*", {mincamptime = 30, maxcamptime = 60} );
	SetMapGoalProperties( "ATTACK_.*", {mincamptime = 15, maxcamptime = 30} );
	SetMapGoalProperties( "DEFEND_.*", {mincamptime = 30, maxcamptime = 45} );
	SetMapGoalProperties( "MOUNT.*", {mincamptime = 30, maxcamptime = 45} );
	RTCWUtil.SetPrimaryGoals( 1.0 );
	Map.FriendlyFire = GetCvar( "g_friendlyfire" );
	SetGoalPriority( "DEFEND_phase1.south.*", 0.6 );
	SetGoalPriority( "DEFEND_phase1.main.*", 0.6 );
	SetGoalPriority( "DEFEND_docs.*", 0.6 );
	SetGoalPriority( "DEFEND_trans.*", 0.6 );
	SetGoalPriority( "ARTILLERY_S.*", 1.0 );

	Util.DisableGoal( ".*", true );
	Util.DisableGoal( "ROUTE_main_gate_defense" );
	SetAvailableMapGoals( TEAM.ALLIES, true, Map.Plant_allied_obj1 );
	SetAvailableMapGoals( TEAM.ALLIES, true, Map.Plant_allied_obj1a );
	SetAvailableMapGoals( TEAM.ALLIES, true, Map.Cappoint_transmitter );
	SetAvailableMapGoals( TEAM.ALLIES, true, "SNIPE_phase1_blue.*" );
	SetAvailableMapGoals( TEAM.ALLIES, true, "ATTACK_phase1.*" );
	SetAvailableMapGoals( TEAM.ALLIES, true, "AIRSTRIKE_blue_as[123]_phase1.*" );
	//SetAvailableMapGoals( TEAM.ALLIES, true, "ARTILLERY_S_bInitial.*" );

	SetAvailableMapGoals( TEAM.AXIS, true, Map.Mount_sentry_MG  );
	SetAvailableMapGoals( TEAM.AXIS, true, Map.Repair_sentry_MG  );
	SetAvailableMapGoals( TEAM.AXIS, true, "SNIPE_phase1_red.*" );
	SetAvailableMapGoals( TEAM.AXIS, true, "DEFEND_phase1_d.*" );
	SetAvailableMapGoals( TEAM.AXIS, true, "AIRSTRIKE_red_as[123]_phase1.*" );

	if ( Map.Suicide ) {
		RTCWUtil.SetSuicide( TEAM.AXIS, CLASS.LIEUTENANT, 1, 1 );
	}

	MapRoutes =
	{
		PLANT_South_Gate =
		{
			ROUTE_AlliesSpawn = { ROUTE_south_route = {}, },
		},
		PLANT_Main_Gate =
		{
			ROUTE_AlliesSpawn =
			{
				ROUTE_hill_route = {},
				ROUTE_north_route = {},
			},
		},
		FLAG_UFO_Documents =
		{
			ROUTE_AlliesSpawn =
			{
				ROUTE_hill_route =
				{
					ROUTE_main_gate =
					{
						ROUTE_trans_route =
						{
							ROUTE_spawn_stairs =
							{
								ROUTE_spawn_route = {},
								ROUTE_upper_ufo =
								{
									Weight = 2,
									ROUTE_upper_west = {},
									ROUTE_upper_east = {},
								},
							},
						},

						ROUTE_north_alley =
						{
							ROUTE_garage =
							{
								ROUTE_duct =
								{
									ROUTE_roof = {},
									ROUTE_duct_exit = {},
								},

								ROUTE_stairs = { Weight = 4, },
							},
						},
					},
				},
				ROUTE_south_route =
				{
					ROUTE_south_gate =
					{
						ROUTE_nw_corner =
						{
							ROUTE_garage =
							{
								ROUTE_duct =
								{
									ROUTE_roof = {},
									ROUTE_duct_exit = {},
								},

								ROUTE_stairs = { Weight = 4, },
							},
						},
						ROUTE_mid_alley =
						{
							ROUTE_garage =
							{
								ROUTE_duct =
								{
									ROUTE_roof = {},
									ROUTE_duct_exit = {},
								},

								ROUTE_stairs = { Weight = 4, },
							},
						},
					},
				},
			},
			ROUTE_CPSpawn =
			{
				ROUTE_nw_corner =
				{
					ROUTE_garage =
					{
						ROUTE_duct =
						{
							ROUTE_roof = {},
							ROUTE_duct_exit = {},
						},

						ROUTE_stairs = { Weight = 4, },
					},
				},
				ROUTE_south_gate =
				{
					Weight = 3,
					ROUTE_mid_alley =
					{
						ROUTE_garage =
						{
							ROUTE_duct =
							{
								ROUTE_roof = {},
								ROUTE_duct_exit = {},
							},

							ROUTE_stairs = { Weight = 4, },
						},
					},
					ROUTE_main_gate =
					{
						Weight = 2,
						ROUTE_trans_route =
						{
							ROUTE_spawn_stairs =
							{
								ROUTE_spawn_route = {},
								ROUTE_upper_ufo =
								{
									Weight = 2,
									ROUTE_upper_west = {},
									ROUTE_upper_east = {},
								},
							},
						},
					},
				},
			},
		},
		CAPPOINT_transmitter =
		{
			ROUTE_DocSteal =
			{
				ROUTE_nw_corner =
				{
					ROUTE_main_gate =
					{
						ROUTE_trans_stairs = {},
						ROUTE_trans_ladder = {},
					},
				},

				ROUTE_trans_ladder = {},
				ROUTE_north_alley =
				{
					ROUTE_trans_stairs = {},
				},

				ROUTE_duct =
				{
					Weight = 2,
					ROUTE_trans_ladder = {},
					ROUTE_north_alley =
					{
						ROUTE_trans_stairs = {},

					},
				},
			},
		},

		MOUNTMG42_sentry_MG =
		{
			ROUTE_AxisSpawn = { ROUTE_main_gate_defense = {}, }
		},
	};

	MapRoutes.FLAG_UFO_Documents.CPSpawn2 = MapRoutes.FLAG_UFO_Documents.CPSpawn;
	MapRoutes.ATTACK_doc_attack1 = MapRoutes.FLAG_UFO_Documents;
	MapRoutes.ATTACK_doc_attack2 = MapRoutes.FLAG_UFO_Documents;
	MapRoutes.ATTACK_doc_attack3 = MapRoutes.FLAG_UFO_Documents;
	MapRoutes.ATTACK_doc_attack4 = MapRoutes.FLAG_UFO_Documents;
	MapRoutes.ATTACK_doc_attack5 = MapRoutes.FLAG_UFO_Documents;
	MapRoutes.ATTACK_doc_attack6 = MapRoutes.FLAG_UFO_Documents;
	MapRoutes.ATTACK_doc_attack7 = MapRoutes.FLAG_UFO_Documents;
	MapRoutes.DEFEND_phase1_main_d1 = MapRoutes.MOUNTMG42_sentry_MG;
	MapRoutes.DEFEND_phase1_main_d2 = MapRoutes.MOUNTMG42_sentry_MG;
	MapRoutes.DEFEND_phase1_main_d3 = MapRoutes.MOUNTMG42_sentry_MG;
	MapRoutes.DEFEND_phase1_d1 = MapRoutes.MOUNTMG42_sentry_MG;
	MapRoutes.DEFEND_phase1_d2 = MapRoutes.MOUNTMG42_sentry_MG;
	MapRoutes.DEFEND_phase1_d5 = MapRoutes.MOUNTMG42_sentry_MG;

	Util.Routes( MapRoutes );
	
	EntityKill(276);
	EntityKill(279);
	EntityKill(280);
	EntityKill(291);
	EntityKill(292);
	EntityKill(293);
	EntityKill(298);

	Util.MapDebugPrint( "OnMapLoad" );
};

global OnBotJoin = function( bot )
{
	bot.TargetBreakableDist = 80.0;

	RTCWUtil.SelectWeapon( bot, WEAPON.MAUSER );

	//default spawn
	bot.ChangeSpawnPoint( 0 );
};
