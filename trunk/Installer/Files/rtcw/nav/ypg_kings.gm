global Map =
{
	Quiet = true,
	Checkpoint_the_flag = "CHECKPOINT_the_flag",
	Flag_Idol = "FLAG_Idol",
	Plant_Ark_of_the_Covenant = "PLANT_Ark_of_the_Covenant",
	Mount_181 = "MOUNTMG42_181",
	Repair_181 = "REPAIRMG42_181",
	DispenseAmmoTime = 15, // give axis time to go call the arty
	IdolStatus = false,
	FlexDefense = true,

	Ark_of_the_Covenant_Planted = function( trigger )
	{
		if ( TestMap ) {
			return;
		}

		Util.MapDebugPrint( "Ark_of_the_Covenant_Planted" );
	},

	Ark_of_the_Covenant_Destroyed = function( trigger )
	{
		if ( TestMap ) {
			return;
		}

		RTCWUtil.EnableGoal( "FLAG.*", true ); // all but routes
		
		Util.MapDebugPrint( "Ark_of_the_Covenant_Destroyed" );
	},

	Idol_Taken = function( trigger )
	{
		if ( TestMap ) {
			return;
		}

		Map.IdolStatus = true;

		SetAvailableMapGoals( TEAM.AXIS, false, "DEFEND_.*" );
		SetAvailableMapGoals( TEAM.AXIS, true, "DEFEND_rTransmit_.*" );

		SetAvailableMapGoals( TEAM.ALLIES, true, "PANZER_bPnzTransmit.*" );
		
		Util.MapDebugPrint( "Idol_Taken" );
	},

	Idol_Secured = function( trigger )
	{
		if ( TestMap ) {
			return;
		}

		Map.IdolStatus = false;

		SetAvailableMapGoals( TEAM.AXIS, false, "DEFEND.*" );
		SetAvailableMapGoals( TEAM.AXIS, true, "DEFEND_rCrypt.*" );
		SetAvailableMapGoals( TEAM.AXIS, true, "DEFEND_rPreCrypt.*" );

		SetAvailableMapGoals( TEAM.ALLIES, false, "PANZER_bPnzTransmit.*" );
		
		Util.MapDebugPrint( "Idol_Secured" );
	},

	the_flag_Axis_Captured = function( trigger )
	{
		if ( TestMap ) {
			return;
		}

		Util.MapDebugPrint( "the_flag_Axis_Captured" );
	},

	the_flag_Allies_Captured = function( trigger )
	{
		if ( TestMap ) {
			return;
		}

		SetAvailableMapGoals( TEAM.ALLIES, false, "AIRSTRIKE_.*" );
		SetAvailableMapGoals( TEAM.ALLIES, true, "AIRSTRIKE_bCryptAS_.*" );

		Util.MapDebugPrint( "the_flag_Allies_Captured" );
	},

	CheckAlliesThread = null, // for thread id
	CheckAllies = function()
	{
		while ( !RTCWUtil.IsTeamDead( TEAM.ALLIES ) && !Map.IdolStatus )
		{
			sleep( 1 );
		}

		// push back out if all the allies are down
		if ( !Map.IdolStatus ) {
			SetAvailableMapGoals( TEAM.AXIS, false, "DEFEND_.*" );
			SetAvailableMapGoals( TEAM.AXIS, false, "ARTILLERY_S_rCrypt.*" );
			SetAvailableMapGoals( TEAM.AXIS, true, "DEFEND_rInitial.*" );
			SetAvailableMapGoals( TEAM.AXIS, true, "ARTILLERY_S_rCourtyard.*" );
		}
	},

	CryptTrigger =
	{
		Name = "CryptTrigger",
		TriggerOnClass = CLASS.ANYPLAYER,
		OnEnter = function( ent )
		{
			if ( TestMap ) {
				return;
			}

			if ( Map.IdolStatus == false ) {
				if ( GetEntTeam( ent ) == TEAM.ALLIES ) {
					if ( Map.CheckAlliesThread ) {
						threadKill( Map.CheckAlliesThread );
					}

					SetAvailableMapGoals( TEAM.AXIS, false, "DEFEND_.*" );
					SetAvailableMapGoals( TEAM.AXIS, true, "DEFEND_rCrypt.*" );
					SetAvailableMapGoals( TEAM.AXIS, true, "DEFEND_rPreCrypt.*" );
					SetAvailableMapGoals( TEAM.AXIS, true, "ARTILLERY_S_rCrypt.*" );
					SetAvailableMapGoals( TEAM.AXIS, false, "CHECKPOINT.*" );

					if ( Map.FlexDefense ) {
						Map.CheckAlliesThread = thread( Map.CheckAllies );
					}
				}
			}
		},
		OnExit = function( ent )
		{
			if ( TestMap ) {
				return;
			}
		},
	},

};

global OnMapLoad = function()
{
	if ( TestMapOn ) {
		Util.AutoTestMap();
	}

	OnTrigger( "Allied forces have destroyed the Ark!", Map.Ark_of_the_Covenant_Destroyed );
	OnTrigger( "Planted at Ark of the Covenant.", Map.Ark_of_the_Covenant_Planted );
	OnTrigger( "Allies have stolen the Idol!", Map.Idol_Taken );
	OnTrigger( "Axis have returned the Idol!", Map.Idol_Secured );
	OnTrigger( "Axis reclaims the Forward Spawn!", Map.the_flag_Axis_Captured );
	OnTrigger( "Allies capture the Forward Spawn!", Map.the_flag_Allies_Captured );

	tOne = OnTriggerRegion( AABB( -4955,2663,-36,-4910,2920,77 ), Map.CryptTrigger );
	tTwo = OnTriggerRegion( AABB( -5065,2359,-67,-5020,2624,121 ), Map.CryptTrigger );

	SetMapGoalProperties( "ATTACK_.*", {mincamptime = 15, maxcamptime = 30} );
	SetMapGoalProperties( "DEFEND_.*", {mincamptime = 20, maxcamptime = 40} );
	SetMapGoalProperties( "DEFEND_rInitial.*", {mincamptime = 45, maxcamptime = 60} );
	SetMapGoalProperties( "PANZER_.*", {mincamptime = 30, maxcamptime = 60} );
	SetMapGoalProperties( "MOUNT.*", {mincamptime = 30, maxcamptime = 60} );
	SetMapGoalProperties( "PANZER_bPnzTransmit.*", {mincamptime = 999, maxcamptime = 999} );

	Util.AddUseWp( "PLANT_Ark_of_the_Covenant", "crypt1" );
	Util.AddUseWp( "PLANT_Ark_of_the_Covenant", "crypt2" );

	RTCWUtil.SetPrimaryGoals( 1.0 );
	RTCWUtil.DisableGoal( ".*", true ); // all but routes

	SetAvailableMapGoals( TEAM.AXIS, true, "DEFEND_rInitial.*" );
	SetAvailableMapGoals( TEAM.AXIS, true, "ARTILLERY_S_rCourtyard.*" );
	//SetAvailableMapGoals( TEAM.AXIS, true, "CHECKPOINT.*" );

	SetAvailableMapGoals( TEAM.ALLIES, true, "CHECKPOINT.*" );
	SetAvailableMapGoals( TEAM.ALLIES, true, "PLANT.*" );
	SetAvailableMapGoals( TEAM.ALLIES, true, "ATTACK_bCrypt.*" );
	SetAvailableMapGoals( TEAM.ALLIES, true, "ARTILLERY_S_bCrypt.*" );

	RTCWUtil.EnableGoal( "CAPPOINT.*", true ); // all but routes

	SetGoalPriority( "CALL.*", 1.0 );
	SetGoalPriority( "ARTILLLERY.*", 1.0 );
	SetGoalPriority( "DEFEND_rPreCrypt.*", 0.45 );

	Util.SetMaxUsersInProgress( 3, "CHECKPOINT.*" );
	Util.SetMaxUsersInProgress( 1, "DEFEND_rInitial.*" );

	MapRoutes =
	{
		PLANT_Ark_of_the_Covenant =
		{
			ROUTE_flagspawn =
			{
				ROUTE_uppersouth =
				{
					ROUTE_cryptnorth = {},
					ROUTE_cryptsouth = {},
				}
			},
			ROUTE_bspawn =
			{
				ROUTE_lowernorth =
				{
					ROUTE_cryptnorth = {},
					ROUTE_cryptsouth = {},
				},
				ROUTE_lowersouth =
				{
					ROUTE_cryptnorth = {},
					ROUTE_cryptsouth = {},
				},
			},
		},
		CAPPOINT_transmit =
		{
			ROUTE_docgrab =
			{
				ROUTE_cryptsouth =
				{
					ROUTE_lowersouth =
					{
						ROUTE_mapsouth = {},
						ROUTE_mapmid = {},
					},
				},
				ROUTE_cryptnorth =
				{
					ROUTE_lowernorth =
					{
						ROUTE_mapnorth = {},
					},
				},
			},
		},
	};

	MapRoutes.PLANT_Ark_of_the_Covenant.ROUTE_flagspawn.ROUTE_uppernorth = MapRoutes.PLANT_Ark_of_the_Covenant.ROUTE_flagspawn.ROUTE_uppersouth;
	MapRoutes.ATTACK_bCrypt_1 = MapRoutes.PLANT_Ark_of_the_Covenant;
	MapRoutes.ATTACK_bCrypt_2 = MapRoutes.PLANT_Ark_of_the_Covenant;
	MapRoutes.ATTACK_bCrypt_3 = MapRoutes.PLANT_Ark_of_the_Covenant;
	MapRoutes.ATTACK_bCrypt_4 = MapRoutes.PLANT_Ark_of_the_Covenant;
	MapRoutes.ATTACK_bCrypt_5 = MapRoutes.PLANT_Ark_of_the_Covenant;
	MapRoutes.ATTACK_bCrypt_6 = MapRoutes.PLANT_Ark_of_the_Covenant;
	MapRoutes.ATTACK_bCrypt_7 = MapRoutes.PLANT_Ark_of_the_Covenant;
	MapRoutes.AIRSTRIKE_bCryptAS_1 = MapRoutes.PLANT_Ark_of_the_Covenant;
	MapRoutes.AIRSTRIKE_bCryptAS_2 = MapRoutes.PLANT_Ark_of_the_Covenant;
	MapRoutes.FLAG_Idol = MapRoutes.PLANT_Ark_of_the_Covenant;
	Util.Routes( MapRoutes );
	Util.MapDebugPrint( "OnMapLoad" );
};

global OnBotJoin = function( bot )
{
	bot.TargetBreakableDist = 100.0;

	//default spawn
	bot.ChangeSpawnPoint( 0 );

};
