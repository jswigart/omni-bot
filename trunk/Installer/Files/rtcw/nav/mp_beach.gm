global Map =
{
	Quiet = true,
	Debug = false,
	DebugAvailability = false,
	ViewDistance = 3500,
	Suicide = true,
	TowerPlayers = 0,
	DocsGone = false,

	//this function is called from goal_grenadetarget
	EvalGrenadeTarget = function()
	{
		if ( Map.DoorStatus || Map.WallStatus ) {
			//turn it off for the rest of the round
			this.Disable = true;
			return false;
		}

		return true;
	},
	Airstrike =
	{
		bridge =
		{
			Enabled = false,
			Team = ( 1 << TEAM.AXIS ),
			Facing = Vector3( -0.774,-0.000,0.631 ),
			NoPause = true,
		},
		spawnpt3 =
		{
			Enabled = true,
			Team = ( 1 << TEAM.ALLIES ),
			Waypoint = "spawnpt3as",
			//NoPause = false,
		},
	},

	Navigation =
	{
		towerjump =
		{
			navigate = function( _this )
			{
				_this.Bot.PressButton( BTN.JUMP );
				sleep( 1 );
				_this.Bot.HoldButton( BTN.STRAFE_R, 1 );
				_this.Bot.HoldButton( BTN.JUMP, 2 );
				sleep( 2 );
			},
		},

		trenchjump =
		{
			navigate = function( _this )
			{
				_this.Bot.PressButton( BTN.JUMP );
				_this.Bot.HoldButton( BTN.STRAFE_L, 0.5 );
				_this.Bot.HoldButton( BTN.SPRINT, 1 );
				sleep( 1 );
			},
		},
	},

	Checkpoint_beach_flag = "CHECKPOINT_beach_flag",
	Flag_War_Documents = "FLAG_War_Documents",
	Cappoint_Transmitter = "CAPPOINT_Transmitter",
	Plant_Door = "PLANT_Sea_Wall_door",
	Plant_Wall = "PLANT_Sea_Wall_breach",
	Explode_t373 = "EXPLODE_t373",
	Explode_t374 = "EXPLODE_t374",
	Explode_t375 = "EXPLODE_t375",
	Mount_mg42_1 = "MOUNTMG42_mg42_1",
	Mount_mg42_2 = "MOUNTMG42_mg42_2",
	Mount_mg42_3 = "MOUNTMG42_mg42_3",
	Mount_t364 = "MOUNTMG42_t364",
	Mount_t367 = "MOUNTMG42_t367",
	Repair_mg42_1 = "REPAIRMG42_mg42_1",
	Repair_mg42_2 = "REPAIRMG42_mg42_2",
	Repair_mg42_3 = "REPAIRMG42_mg42_3",
	Repair_t364 = "REPAIRMG42_t364",
	Repair_t367 = "REPAIRMG42_t367",
	DontDispenseAmmo = true,

	CompSettings = false,

	//set status' for conditionals
	FlagStatus = 0, //0 nobody, 1 axis, 2 allies
	DocStatus = false, //home
	DoorStatus = false, //intact
	WallStatus = false, //intact
	WarRoomShift = false,

	//tables to hold current AS goals
	AxisASTable = {},
	AlliesASTable = {},

	//tables to copy to current AS goal tables
	AxisASWall = { "red_as1_p1", "red_as2_p1", "red_as3_p1", },
	AlliesASWall = { "blue_as1_p1", "blue_as2_p1", "blue_as3_p1", },

	Target =
	{
		Barricade1 =
		{
			Priority = 0.67,
			Enabled = true,
			GrenadeTargetGoalName = "EXPLODE_barrier1",
			LimitBots = 1,
			LimitTeam = ( 1 << TEAM.ALLIES ),
			LimitClass = ( 1 << CLASS.MEDIC ) | ( 1 << CLASS.LIEUTENANT ),
			Offset =
			{
				Vector3( 0, -400, 0 ),
			}
		},
		Barricade2 =
		{
			Priority = 0.66,
			Enabled = true,
			GrenadeTargetGoalName = "EXPLODE_barrier2",
			LimitBots = 1,
			LimitTeam = ( 1 << TEAM.ALLIES ),
			LimitClass = ( 1 << CLASS.MEDIC ) | ( 1 << CLASS.LIEUTENANT ),
			Offset =
			{
				Vector3( 0, -500, 0 ),
			}
		},
		Barricade3 =
		{
			Priority = 0.65,
			Enabled = true,
			GrenadeTargetGoalName = "EXPLODE_barrier3",
			LimitBots = 1,
			LimitTeam = ( 1 << TEAM.ALLIES ),
			LimitClass = ( 1 << CLASS.MEDIC ) | ( 1 << CLASS.LIEUTENANT ),
			Offset =
			{
				Vector3( -300, -300, 0 ),
			}
		},
	},

	BackStairsTrigger =
	{
		Name = "BackStairsTrigger",
		TriggerOnClass = CLASS.ANYPLAYER,
		OnEnter = function( ent )
		{
			if ( GetEntTeam( ent ) == TEAM.ALLIES ) {
				Map.WarRoomShift = true;

				if ( !Map.DocStatus ) {
					SetAvailableMapGoals( TEAM.AXIS, false, "DEFEND_.*" );
					SetAvailableMapGoals( TEAM.AXIS, true, "DEFEND_rWar.*" );

					if ( Map.CompSettings ) {
						RTCWUtil.SetTeamSuicide( TEAM.AXIS, 0, 0 );
					}
				} else if ( Map.DocStatus )   {
					if ( GetEntFlags( ent, ENTFLAG.CARRYINGGOAL ) ) {
						// Martin - Let bots tell teammates where documents are going
						b = Util.GetBotByName( GetEntName( ent ) );
						if ( b ) {
							b.SayTeam( "I'm going long!" );
						}

						Map.WarRoomShift = false;
						SetGoalPriority( "DEFEND_rTransmit.*", 0.5 );
						SetGoalPriority( "DEFEND_rTransmitLong.*", 0.6 );
						SetGoalPriority( "ATTACK_bTransmit[4567]", 0.6 );   //Allies focus on one side
						SetAvailableMapGoals( TEAM.AXIS, false, "DEFEND_.*" );
						SetAvailableMapGoals( TEAM.AXIS, true, "DEFEND_rTransmit.*" );

						foreach( id and bot in BotTable )
						{
							if ( bot.GetTeam() == TEAM.AXIS ) {
								bot.SayTeam( "Docs are going long!" );
								break;
							}
						}
					}
				}
			}
		},
		OnExit = function( ent )
		{
		},
	},

	RadioStairsTrigger =
	{
		Name = "RadioStairsTrigger",
		TriggerOnClass = CLASS.ANYPLAYER,
		OnEnter = function( ent )
		{
			if ( GetEntTeam( ent ) == TEAM.ALLIES ) {
				Map.AlliesNearDocs = true;

				if ( !Map.DocStatus ) {
					Map.WarRoomShift = true;
					SetAvailableMapGoals( TEAM.AXIS, false, "DEFEND_.*" );
					SetAvailableMapGoals( TEAM.AXIS, true, "DEFEND_rWar.*" );

					if ( Map.CompSettings ) {
						RTCWUtil.SetTeamSuicide( TEAM.AXIS, 0, 0 );
					}
				} else if ( Map.DocStatus )   {
					if ( GetEntFlags( ent, ENTFLAG.CARRYINGGOAL ) ) {
						// Martin - Let bots tell teammates where documents are going
						b = Util.GetBotByName( GetEntName( ent ) );
						if ( b ) {
							b.SayTeam( "I'm going short!" );
						}

						Map.WarRoomShift = false;
						SetGoalPriority( "DEFEND_rTransmit.*", 0.5 );
						SetGoalPriority( "DEFEND_rTransmitShort.*", 0.6 );
						SetGoalPriority( "ATTACK_bTransmit[1236]", 0.6 );   //Allies focus on one side
						SetAvailableMapGoals( TEAM.AXIS, false, "DEFEND_.*" );
						SetAvailableMapGoals( TEAM.AXIS, true, "DEFEND_rTransmit.*" );

						foreach( id and bot in BotTable )
						{
							if ( bot.GetTeam() == TEAM.AXIS ) {
								bot.SayTeam( "Docs are going short!" );
								break;
							}
						}
					}
				}
			}
		},
		OnExit = function( ent )
		{
		},
	},

	allied_obj1_1_Destroyed = function( trigger )
	{
		if ( TestMap ) {
			return;
		}

		Map.DoorStatus = true;

		if ( !Map.DocStatus ) {
			Map.eval_beach_shift();
		}

		Map.DontDispenseAmmo = false;
		Util.MapDebugPrint( "allied_obj1_1_Destroyed" );
	},

	allied_obj1_2_Destroyed = function( trigger )
	{
		if ( TestMap ) {
			return;
		}

		Map.WallStatus = true;

		if ( !Map.DocStatus ) {
			Map.eval_beach_shift();
		}

		Map.DontDispenseAmmo = false;
		Util.MapDebugPrint( "allied_obj1_2_Destroyed" );
	},

	eval_beach_shift = function()
	{
		if ( Map.WallStatus && Map.DoorStatus ) { //both destroyed
			SetAvailableMapGoals( TEAM.AXIS, true, "DEFEND_rUpper.*" );
			SetAvailableMapGoals( TEAM.AXIS, true, "DEFEND_rAlt.*" );
			SetAvailableMapGoals( TEAM.AXIS, true, "PANZER_rUpper.*" );
			SetAvailableMapGoals( TEAM.AXIS, true, "VENOM_rUpper.*" );
			SetAvailableMapGoals( TEAM.AXIS, true, "FLAME_rUpper.*" );

			SetAvailableMapGoals( TEAM.AXIS, false, "SNIPE_rBeach.*" );
			SetAvailableMapGoals( TEAM.ALLIES, false, "SNIPE_bBeach.*" );
			SetAvailableMapGoals( TEAM.AXIS, false, "DEFEND_rWall.*" );
			SetAvailableMapGoals( TEAM.AXIS, false, "DEFEND_rDoor.*" );
			SetAvailableMapGoals( TEAM.AXIS, false, Map.Mount_t367 );
			SetAvailableMapGoals( TEAM.AXIS, false, Map.Mount_mg42_2 );
			SetAvailableMapGoals( TEAM.AXIS, false, Map.Mount_mg42_1 );

			//only axis soldiers should try and grab flag
			RTCWUtil.LimitToClass( Map.Checkpoint_beach_flag, TEAM.AXIS, CLASS.SOLDIER );

			//no more a/s here
			Map.AxisASTable = {};
			Map.AlliesASTable = {};
		} else if ( Map.WallStatus && !Map.DoorStatus )   { //wall destroyed, door intact
			SetAvailableMapGoals( TEAM.AXIS, true, "DEFEND_rWall.*" );
			SetAvailableMapGoals( TEAM.AXIS, true, Map.Mount_t367 );

			//shift a/s focus
			Map.AxisASTable = { "red_as1_p1", "red_as3_p1", };
			Map.AlliesASTable = { "blue_as3_p1", };
		} else if ( !Map.WallStatus && Map.DoorStatus )   { //door destroyed, wall intact
			SetAvailableMapGoals( TEAM.AXIS, true, "DEFEND_rDoor.*" );
			SetAvailableMapGoals( TEAM.AXIS, true, Map.Mount_mg42_2 );
			SetAvailableMapGoals( TEAM.AXIS, true, Map.Mount_mg42_1 );

			//shift a/s focus`
			Map.AxisASTable = { "red_as2_p1", };
			Map.AlliesASTable = { "blue_as1_p1", "blue_as2_p1", };
		}

		//switch from sniper to other soldier weap
		if ( Map.CompSettings ) {
			RTCWUtil.SwitchWeapon( WEAPON.PANZERFAUST );
		} else
		{
			RTCWUtil.StopSniping();
		}

		//set these if either has been destroyed
		RTCWUtil.EnableGoal( Map.Checkpoint_beach_flag );
		SetAvailableMapGoals( TEAM.AXIS, false, Map.Mount_mg42_3 );
		SetAvailableMapGoals( TEAM.AXIS, false, Map.Mount_t364 );
		SetAvailableMapGoals( TEAM.AXIS, false, "DEFEND_rBeach.*" );
		SetAvailableMapGoals( TEAM.ALLIES, false, "ATTACK_bBeach.*" );

		Wp.SetWaypointFlag( "ladder", "closed", false );    // Open up the ladder
		Util.MapDebugPrint( "eval_beach_shift" );
	},

	Allies_Capture_Flag = function( trigger )
	{
		if ( TestMap ) {
			return;
		}

		Map.FlagStatus = 2;

		//did humans wall boost?
		if ( Map.DoorStatus || Map.WallStatus ) {
			SetAvailableMapGoals( TEAM.ALLIES, true, Map.Flag_War_Documents );
			Map.AlliesASTable = {};
		}

		Map.EvalArty();

		if ( Map.DocStatus == false ) {
			Map.AxisASTable = {"rTrenchAS_1", "rTrenchAS_2",};
		}
		Map.Airstrike.bridge.Enabled = true;
		Map.Airstrike.spawnpt3.Enabled = true;
		SetGoalPriority( "CALL.*", 0.6 );
		SetGoalPriority( "ARTILLLERY.*", 0.6 );

		Util.SetMaxUsersInProgress( 1, "CHECKPOINT.*" );    // Martin - 1 axis at a time go for it
		Wp.SetWaypointFlag( "pt_nav_towerjump", "closed", false );  // Open up the towerjump
		Util.MapDebugPrint( "Allies_Capture_Flag" );
	},

	Axis_Capture_Flag = function( trigger )
	{
		if ( TestMap ) {
			return;
		}

		Map.FlagStatus = 1;
		Map.AxisASTable = {};
		Map.EvalArty();

		Map.Airstrike.bridge.Enabled = false;
		SetGoalPriority( "CALL.*", 1.2 );
		SetGoalPriority( "ARTILLLERY.*", 1.2 );

		Util.SetMaxUsersInProgress( 3, "CHECKPOINT.*" );    // Martin - But let 3 allies go for it.
		Util.MapDebugPrint( "Axis_Capture_Flag" );
	},

	documents_stolen = function( trigger )
	{
		if ( TestMap ) {
			return;
		}

		// cs: this gets called when picked up off ground too, so don't re-shift to war room in that case.
		if ( !Map.DocStatus ) {
			Map.DocStatus = true;

			Map.EvalArty(); //Martin - Lets stop spamming sooner

			Map.Airstrike.spawnpt3.Enabled = false;

			// make sure they fully shift even if only one dyno goal is destroyed
			if ( Map.CompSettings ) {
				RTCWUtil.SwitchWeapon( WEAPON.PANZERFAUST );
			} else
			{
				RTCWUtil.StopSniping();
			}

			SetAvailableMapGoals( TEAM.AXIS, false, "SNIPE_rBeach.*" );
			SetAvailableMapGoals( TEAM.ALLIES, false, "SNIPE_bBeach.*" );
			SetAvailableMapGoals( TEAM.AXIS, false, Map.Mount_t367 );
			SetAvailableMapGoals( TEAM.AXIS, false, Map.Mount_mg42_2 );
			SetAvailableMapGoals( TEAM.AXIS, false, Map.Mount_mg42_1 );

			SetAvailableMapGoals( TEAM.ALLIES, true, "ATTACK_bTransmit.*" );
			SetAvailableMapGoals( TEAM.AXIS, false, Map.Checkpoint_beach_flag );
			SetAvailableMapGoals( TEAM.AXIS, false, "DEFEND.*" );
			SetAvailableMapGoals( TEAM.AXIS, true, "DEFEND_rWar.*" ); //make sure
			Map.AxisASTable = {};

			// cs: just exit right away if docs are returned
			// Martin - Use a trigger to eval if docs have left to prevent human camp in WR
			//timeout = 0;
			//while ( timeout <= 8 && Map.DocStatus == true )
			while ( Map.DocsGone == false && Map.DocStatus == true )
			{
				//timeout += 1;
				sleep( 1 );
			}

			// cs: moved this out. in both cases we want them out of war room ...
			SetAvailableMapGoals( TEAM.AXIS, false, "DEFEND_rWar.*" );

			// cs: changed this. why would they defend trasmit when docs are returned?
			if ( Map.DocStatus ) {
				SetAvailableMapGoals( TEAM.AXIS, true, "DEFEND_rTransmit.*" );

				if ( Map.CompSettings ) {
					RTCWUtil.SetTeamSuicide( TEAM.AXIS, 0, 0 );
				}
			}
		}

		Util.MapDebugPrint( "documents_stolen" );

	},

	EvalArty = function()
	{
		if ( Map.Suicide ) {
			RTCWUtil.SetSuicide( TEAM.AXIS, CLASS.LIEUTENANT, 0, 0 );
		}

		if ( !Map.DocStatus && Map.FlagStatus == 1 ) {
			SetAvailableMapGoals( TEAM.AXIS, true, "CALLARTILLERY_ubase_spot_axis_[2]" );
			SetAvailableMapGoals( TEAM.AXIS, true, "ARTILLERY_S_rBeach.*" );
		}

		if ( ( !Map.WallStatus || !Map.DoorStatus ) && !Map.DocStatus && Map.FlagStatus == 1 ) {
			SetAvailableMapGoals( TEAM.ALLIES, true, "ARTILLERY_S_bBeach.*" );
			SetAvailableMapGoals( TEAM.AXIS, false, "ARTILLERY_S_rFlag.*" );
			if ( Map.Suicide ) {
				RTCWUtil.SetSuicide( TEAM.AXIS, CLASS.LIEUTENANT, 1, 1 );
			}
		}

		if ( !Map.DocStatus && Map.FlagStatus == 2 ) {
			SetAvailableMapGoals( TEAM.ALLIES, true, "ARTILLERY_S_bTower.*" );
			//SetAvailableMapGoals( TEAM.ALLIES, true, "CALLARTILLERY_trenches_spot_allies" );	//Martin - This should be paththrough
			SetAvailableMapGoals( TEAM.ALLIES, false, "CALLARTILLERY_spot_beach_[12345678]" );
			SetAvailableMapGoals( TEAM.ALLIES, false, "ARTILLERY_S_bBeach.*" );
			SetAvailableMapGoals( TEAM.AXIS, true, "CALLARTILLERY_ubase_spot_axis_[2]" );
			SetAvailableMapGoals( TEAM.AXIS, true, "ARTILLERY_S_rFlag.*" );
			SetAvailableMapGoals( TEAM.AXIS, false, "ARTILLERY_S_rBeach.*" );
		}

		if ( Map.DocStatus ) {
			RTCWUtil.DisableGoal( "CALLARTILLERY.*" );
			RTCWUtil.DisableGoal( "ARTILLERY.*" );
		}

		Util.MapDebugPrint( "EvalArty" );
	},

	documents_returned = function( trigger )
	{
		if ( TestMap ) {
			return;
		}

		Map.DocStatus = false;

		Map.Airstrike.spawnpt3.Enabled = true;

		SetAvailableMapGoals( TEAM.AXIS, true, "DEFEND_rUpper.*" );
		SetAvailableMapGoals( TEAM.AXIS, true, "DEFEND_rAlt.*" );
		SetAvailableMapGoals( TEAM.ALLIES, false, "ATTACK_bTransmit.*" );
		SetAvailableMapGoals( TEAM.AXIS, false, "DEFEND_rTransmit.*" );

		//set these back to default ( changed in the stairs triggers )
		SetGoalPriority( "DEFEND_rTransmit.*", 0.5 );
		if ( Map.FlagStatus == 2 ) {
			Map.AxisASTable = {"rTrenchAS_1","rTrenchAS_2",};
		}

		if ( Map.CompSettings ) {
			RTCWUtil.SetTeamSuicide( TEAM.AXIS, 1, 1 );
		}

		Map.EvalArty();
		Map.DocsGone = false;
		Util.MapDebugPrint( "documents_returned" );
	},

	documents_secured = function( trigger )
	{
		if ( TestMap ) {
			return;
		}

		Util.MapDebugPrint( "documents_secured" );
	},

	door_planted = function( trigger )
	{
		if ( TestMap ) {
			return;
		}

		SetAvailableMapGoals( TEAM.AXIS, false, "DEFUSE_Sea_Wall_door.*" );
		Util.MapDebugPrint( "door_planted" );
		if ( Map.Suicide ) {
			RTCWUtil.SetSuicide( TEAM.ALLIES, CLASS.LIEUTENANT, 0, 0 );
		}
	},

	door_defused = function( trigger )
	{
		if ( TestMap ) {
			return;
		}

		Util.MapDebugPrint( "door_defused" );
	},

	breach_planted = function( trigger )
	{
		if ( TestMap ) {
			return;
		}

		SetAvailableMapGoals( TEAM.AXIS, false, "DEFUSE_Sea_Wall_breach.*" );
		Util.MapDebugPrint( "breach_planted" );
		if ( Map.Suicide ) {
			RTCWUtil.SetSuicide( TEAM.ALLIES, CLASS.LIEUTENANT, 0, 0 );
		}
	},

	breach_defused = function( trigger )
	{
		if ( TestMap ) {
			return;
		}

		Util.MapDebugPrint( "breach_defused" );
	},

	two_minute = function( trigger )
	{
		if ( TestMap ) {
			return;
		}

		SetAvailableMapGoals( TEAM.AXIS, true, Map.Flag_War_Documents );
		Util.MapDebugPrint( "two_minute" );
	},
	alive_watch = function()
	{
		while ( 1 )
		{
			if ( !Map.DocStatus && !Map.WarRoomShift && RTCWUtil.IsTeamDead( TEAM.ALLIES ) ) {
				// guess there should be a spawn time check too ...
				SetAvailableMapGoals( TEAM.AXIS, true, "DEFUSE.*" );
			}

			sleep( 1 );
		}
	},
	TowerTrigger =
	{
		Name = "TowerTrigger",
		TriggerOnClass = CLASS.ANYPLAYER,
		OnEnter = function( ent )
		{
			if ( TestMap ) {
				return;
			}

			if ( GetEntTeam( ent ) == TEAM.ALLIES ) {
				Map.TowerPlayers += 1;
				SetAvailableMapGoals( TEAM.ALLIES, false, "ARTILLERY_S_bTower.*" );
				Map.Airstrike.spawnpt3.Enabled = false;
			}
		},
		OnExit = function( ent )
		{
			if ( TestMap ) {
				return;
			}

			if ( Map.DocStatus == true ) { //Docs are stolen
				return;
			}

			if ( Map.FlagStatus == 1 ) {  //Axis still own flag
				return;
			}

			if ( GetEntTeam( ent ) == TEAM.ALLIES ) {
				Map.TowerPlayers -= 1;
				if ( Map.TowerPlayers == 0 ) {
					SetAvailableMapGoals( TEAM.ALLIES, true, "ARTILLERY_S_bTower.*" );
					Map.Airstrike.spawnpt3.Enabled = true;
				}
			}
		},
	},

	DocsTrigger =
	{
		Name = "DocsTrigger",
		TriggerOnClass = CLASS.ANYPLAYER,
		OnEnter = function( ent )
		{
			if ( TestMap ) {
				return;
			}

			if ( GetEntTeam( ent ) == TEAM.ALLIES ) {
				if ( GetEntFlags( ent, ENTFLAG.CARRYINGGOAL ) ) {
					//docs are gone
					Map.DocsGone = true;
				}
			}
		},
		OnExit = function( ent )
		{
			if ( TestMap ) {
				return;
			}
		},
	},
};

global OnMapLoad = function()
{
	Util.SetGoalPosition( 1489, 1142, 621, "PLANT_Sea_Wall_breach" );

	Util.AddUseWp( "PLANT_Sea_Wall_door", "door1" );
	Util.AddUseWp( "PLANT_Sea_Wall_door", "door2" );
	Util.AddUseWp( "PLANT_Sea_Wall_breach", "breach1" );
	Util.AddUseWp( "PLANT_Sea_Wall_breach", "breach2" );

	if ( TestMapOn ) {
		Util.AutoTestMap();
	}

	OnTrigger( "the Sea Wall door Destroyed.", Map.allied_obj1_1_Destroyed );
	OnTrigger( "the Sea Wall breach Destroyed.", Map.allied_obj1_2_Destroyed );
	OnTrigger( "Allies capture the Forward Bunker!", Map.Allies_Capture_Flag );
	OnTrigger( "Axis reclaims the Forward Bunker!", Map.Axis_Capture_Flag );
	OnTrigger( "Allies have stolen the War Documents!", Map.documents_stolen );
	OnTrigger( "Flag returned War Documents!", Map.documents_returned );
	OnTrigger( "Planted at the Sea Wall door.", Map.door_planted );
	OnTrigger( "Defused at the Sea Wall door.", Map.door_defused );
	OnTrigger( "Planted at the Sea Wall breach.", Map.breach_planted );
	OnTrigger( "Defused at the Sea Wall breach.", Map.breach_defused );
	OnTrigger( "Allies transmitted the documents!", Map.documents_secured );
	OnTrigger( "two minute warning.", Map.two_minute );

	//some triggers to help bots know when to aggressively defend warroom
	tOne = OnTriggerRegion( Vector3( 3695,1483,896 ), 200, Map.BackStairsTrigger );
	tTwo = OnTriggerRegion( Vector3( 3614,3097,576 ), 200, Map.RadioStairsTrigger );

	tTower = OnTriggerRegion( AABB( 2399,2431,1097,3264,2880,1225 ), Map.TowerTrigger );
	//Martin - Traceboxes instead of vector
	//tLongOne = OnTriggerRegion(AABB(3935.000,1660.000,671.000,4016.000,1699.000,780.000), Map.BackStairsTrigger);
	//tShortOne = OnTriggerRegion(AABB(3516.000,2953.000,511.000,3554.000,3078.000,604.000), Map.RadioStairsTrigger);

	fbpush = OnTriggerRegion( AABB( 1351.000,3084.000,583.000,1520.000,3484.000,729.000 ), RegionTrigger.DisableBotPush );
	DocsGone = OnTriggerRegion( AABB( 3071.000,2142.000,511.000,3456.000,2181.000,585.000 ), Map.DocsTrigger );

	thread( Map.alive_watch );

	SetMapGoalProperties( "ATTACK_.*", {mincamptime = 15, maxcamptime = 30} );
	SetMapGoalProperties( "DEFEND_.*", {mincamptime = 20, maxcamptime = 40} );
	SetMapGoalProperties( "ATTACK_bTransmit.*", {mincamptime = 5, maxcamptime = 10} );
	SetMapGoalProperties( "DEFEND_rTransmit.*", {mincamptime = 5, maxcamptime = 10} );
	SetMapGoalProperties( "PANZER_.*", {mincamptime = 30, maxcamptime = 60} );
	SetMapGoalProperties( "FLAME_.*", {mincamptime = 30, maxcamptime = 60} );
	SetMapGoalProperties( "VENOM_.*", {mincamptime = 30, maxcamptime = 60} );
	SetMapGoalProperties( "MOUNT_.*", {mincamptime = 60, maxcamptime = 90} );
	SetMapGoalProperties( "SNIPE_.*", {mincamptime = 60, maxcamptime = 90} );
	RTCWUtil.SetPrimaryGoals( 1.0 );
	//SetGoalPriority( "DEFUSE_.*", 0.0, 0, CLASS.ENGINEER, true );	//Martin - Turned off via available goals when its planted
	//RTCWUtil.LimitToClass("MOUNT.*", 0, CLASS.ENGINEER, CLASS.MEDIC);
	RTCWUtil.LimitToClass( "MOUNT.*", TEAM.AXIS, CLASS.ENGINEER, CLASS.LIEUTENANT );

	RTCWUtil.DisableGoal( ".*", true ); //all but routes
	RTCWUtil.EnableGoal( "CAPPOINT_transmitter" );
	SetAvailableMapGoals( TEAM.ALLIES, true, "ATTACK_bBeach.*" );
	SetAvailableMapGoals( TEAM.ALLIES, true, "SNIPE_bBeach.*" );
	SetAvailableMapGoals( TEAM.ALLIES, true, "PLANT.*" );
	SetAvailableMapGoals( TEAM.ALLIES, true, "ARTILLERY_S_bBeach.*" );

	SetAvailableMapGoals( TEAM.AXIS, true, Map.Mount_mg42_3 ); // Upper Bunker
	// Martin 7/27/10 Going into the fb is suicide
	//SetAvailableMapGoals( TEAM.AXIS, true, Map.Mount_t364); // Forward Bunker
	SetAvailableMapGoals( TEAM.AXIS, true, "DEFEND_rBeach.*" );
	SetAvailableMapGoals( TEAM.AXIS, true, "SNIPE_rBeach.*" );
	SetAvailableMapGoals( TEAM.AXIS, true, "ARTILLERY_S_rBeach.*" );

	SetGoalPriority( "CALL.*", 1.0 );
	SetGoalPriority( "ARTILLERY.*", 1.0 );
	SetGoalPriority( "CHECKPOINT.*", 0.9 );
	SetGoalPriority( "DEFEND_rAlt.*", 0.45 );

	Wp.SetWaypointFlag( "ladder", "closed", true ); // close up the ladder
	Wp.SetWaypointFlag( "pt_nav_towerjump", "closed", true );   // close up the towerjump
	//Martin - 4/12/2010 - Too many get sniped by allies by trying this jump

	Util.SetMaxUsersInProgress( 1, "MOUNT.*" );
	Util.SetMaxUsersInProgress( 1, "SNIPE.*" );

	//copy the wall AS goal tables to the AS goal table to make them active
	Map.AxisASTable = Map.AxisASWall;
	Map.AlliesASTable = Map.AlliesASWall;

	if ( Map.Suicide ) {
		RTCWUtil.SetSuicide( TEAM.AXIS, CLASS.LIEUTENANT, 1, 1 );
		RTCWUtil.SetSuicide( TEAM.ALLIES, CLASS.LIEUTENANT, 1, 1 );
	}

	MapRoutes =
	{
		FLAG_War_Documents =
		{
			ROUTE_bunkerspawn =
			{
				ROUTE_lbunker =
				{
					ROUTE_ubunker =
					{
						ROUTE_radio = {},
						ROUTE_ubase_stairs =
						{
							ROUTE_back_stairs =
							{
								ROUTE_duct1 =
								{
									ROUTE_duct2 = {},
									ROUTE_duct3 = {},
								},
								ROUTE_back_stairs2 = { Weight = 3, },
							},
						},
					},
				},
				ROUTE_ubase =
				{
					ROUTE_back_stairs =
					{
						ROUTE_duct1 =
						{
							ROUTE_duct2 = {},
							ROUTE_duct3 = {},
						},
						ROUTE_back_stairs2 = { Weight = 3, },
					},
				},
				ROUTE_ubase_stairs =
				{
					ROUTE_back_stairs =
					{
						ROUTE_duct1 =
						{
							ROUTE_duct2 = {},
							ROUTE_duct3 = {},
						},
						ROUTE_back_stairs2 = { Weight = 3, },
					},
				},
			},

		},
		CAPPOINT_Transmitter =
		{
			ROUTE_docgrab =
			{
				ROUTE_radio = {},
				ROUTE_back_stairs = { ROUTE_back_stairs3 = {}, },
			},
		},
		ATTACK_bTransmit1 =
		{
			ROUTE_bunkerspawn =
			{
				ROUTE_lbunker =
				{
					ROUTE_ubunker =
					{
						ROUTE_radio = {},
						ROUTE_ubase_stairs = {},
					},
				},
				ROUTE_ubase =
				{
					ROUTE_back_stairs = {},
				},
				ROUTE_ubase_stairs = {},
			},
			ROUTE_beachspawn =
			{
				ROUTE_lbunker =
				{
					ROUTE_ubunker =
					{
						ROUTE_radio = {},
						ROUTE_ubase_stairs = {},
					},
				},
				ROUTE_ubase =
				{
					ROUTE_back_stairs = {},
				},
				ROUTE_ubase_stairs = {},
			},
			ROUTE_docgrab =
			{
				ROUTE_radio = {},
				ROUTE_back_stairs = { ROUTE_back_stairs3 = {}, },
			},
		},
		CHECKPOINT_beach_flag =
		{
			ROUTE_rspawn =
			{
				ROUTE_reclaim1 = {ROUTE_reclaim2 = {},},
			},
		},
	};

	MapRoutes.FLAG_War_Documents.ROUTE_beachspawn = MapRoutes.FLAG_War_Documents.ROUTE_bunkerspawn;
	MapRoutes.ATTACK_bTransmit2 = MapRoutes.ATTACK_bTransmit1;
	MapRoutes.ATTACK_bTransmit3 = MapRoutes.ATTACK_bTransmit1;
	MapRoutes.ATTACK_bTransmit4 = MapRoutes.ATTACK_bTransmit1;
	MapRoutes.ATTACK_bTransmit5 = MapRoutes.ATTACK_bTransmit1;
	MapRoutes.ATTACK_bTransmit6 = MapRoutes.ATTACK_bTransmit1;
	MapRoutes.ATTACK_bTransmit7 = MapRoutes.ATTACK_bTransmit1;

	Util.Routes( MapRoutes );
	yield(); yield();

	if ( Map.CompSettings ) {
		RTCWUtil.SetTeamSuicide( TEAM.AXIS, 1, 1 );
	}

	Util.MapDebugPrint( "OnMapLoad" );
};

global OnBotJoin = function( bot )
{
	bot.MaxViewDistance = Map.ViewDistance;
	bot.TargetBreakableDist = 100.0;

	RTCWUtil.SelectWeapon( bot, WEAPON.MAUSER );

	//default spawn
	bot.ChangeSpawnPoint( 0 );
};