global Map =
{
	Quiet = true,	
	CHECKPOINT_flag_respawn_obj = "CHECKPOINT_flag_respawn_obj",
	Plant_Service_Door = "PLANT_Service_Door",
	Plant_Fortress_Wall = "PLANT_Fortress_Wall",
	Mount_tower_mg = "MOUNTMG42_tower_mg", 
	Mount_truck_mg = "MOUNTMG42_truck_mg", 
	Repair_tower_mg = "REPAIRMG42_tower_mg",
	Repair_truck_mg = "REPAIRMG42_truck_mg",
	Flag_axis_obj01 = "FLAG_axis_obj01",
	Cappoint_130 = "CAPPOINT_130",
	DontDispenseAmmo = true,

	//time running out?
	FocusPrimary = false,
	
	//set status' for conditionals
	FlagStatus = 0, //0 nobody, 1 axis, 2 allies
	DocStatus = false, //home
	MainDoorStatus = false, //intact
	SideWallStatus = false, //intact
	
	// Dyno counters - used to determine defensive shifts 
	SideWallDyno = 0,
	MainDoorDyno = 0,
	
	bPanzFlagBots = 0,
	rPanzSouthBots = 0,
	rPanzNorthBots = 0,
	
	AxisASPriority = 0.94, // less than Defend's. thx Martin
	AlliesASPriority = 0.94, // less than Defend's. thx Martin	
	
	Defend =
	{
		AxisSpawnPt = 0, // axis defenders will choose this spawn point
		AlliesSpawnPt = 2, // allied defenders will choose this spawn point
		//the first bot joining defending team will switch to crucial class
		CrucialClass = CLASS.LIEUTENANT,	//Martin - It doesnt matter who
		AxisDefenders = 0, // a variable to keep a count of defenders
		MaxAxisDefenders = 2, // maximum defenders for this team
		AlliesDefenders = 0,
		MaxAlliesDefenders = 2,
		
		// initialize some tables for adding waypoints for them to use
		Allies = {},		
	},
	
	hill = { "hill1", "hill2", },
	
	Navigation =
	{
		southladder =
		{
			navigate = function(_this)
			{
				_this.Bot.HoldButton(BTN.FORWARD, 3);
				sleep(3);
			},			
		},
		bpnzflag =
		{
			navigate = function(_this)
			{
				// this is just using the barrier as they eval since its simple
				// others will need to eval other map vars
				if ( Map.bPanzFlagBots == 0 && _this.Bot.HasWeapon( WEAPON.PANZERFAUST ) )
				{
					wpTable = Util.WpNameInfo("bPnzFlag");
					Map.bPanzFlagBots += 1;
					
					_this.Bot.MaxViewDistance = 10;
					
					_this.Bot.HoldButton(BTN.SPRINT, 999);
					if ( _this.Goto(wpTable.position) == EVENT.PATH_SUCCESS )
					{
						_this.Bot.ReleaseButton(BTN.SPRINT);
						if (_this.Bot.IsWeaponCharged(WEAPON.PANZERFAUST, 0) )
						{
							_this.AddAimRequest(Priority.High, "facing", wpTable.facing);
							_this.AddWeaponRequest(Priority.High, WEAPON.PANZERFAUST );
							_this.BlockForWeaponChange( WEAPON.PANZERFAUST );
							sleep(0.3); // make sure its ready to fire
							_this.Bot.HoldButton(BTN.ATTACK1, 2);					
							sleep(5);
							_this.Bot.MaxViewDistance = 10000;
						}
					}
					//Map.bPanzFlagBots -= 1;	//Martin - Only one bot go for this.  We dont want to keep panzering it.
				}
				yield();
			},
		},
		rpnzsouth =
		{
			navigate = function(_this)
			{
				// this is just using the barrier as they eval since its simple
				// others will need to eval other map vars
				if ( Map.FlagStatus != 1 && Map.rPanzSouthBots == 0 && _this.Bot.HasWeapon( WEAPON.PANZERFAUST ) )
				{
					wpTable = Util.WpNameInfo("rPnzSouth");
					Map.rPanzSouthBots += 1;
					
					_this.Bot.MaxViewDistance = 10;
					
					_this.Bot.HoldButton(BTN.SPRINT, 999);
					if ( _this.Goto(wpTable.position) == EVENT.PATH_SUCCESS )
					{
						_this.Bot.ReleaseButton(BTN.SPRINT);
						if ( Map.FlagStatus != 1 && _this.Bot.IsWeaponCharged(WEAPON.PANZERFAUST, 0) )
						{
							_this.AddAimRequest(Priority.High, "facing", wpTable.facing);
							_this.AddWeaponRequest(Priority.High, WEAPON.PANZERFAUST );
							_this.BlockForWeaponChange( WEAPON.PANZERFAUST );
							sleep(0.3); // make sure its ready to fire
							_this.Bot.HoldButton(BTN.ATTACK1, 2);					
							sleep(5);
							_this.Bot.MaxViewDistance = 10000;
						}
					}
					//Map.bPanzFlagBots -= 1;	//Martin - Only one bot go for this.  We dont want to keep panzering it.
				}
				yield();
			},
		},
		rpnznorth =
		{
			navigate = function(_this)
			{
				// this is just using the barrier as they eval since its simple
				// others will need to eval other map vars
				if ( Map.FlagStatus != 1 && Map.rPanzNorthBots == 0 && _this.Bot.HasWeapon( WEAPON.PANZERFAUST ) )
				{
					wpTable = Util.WpNameInfo("rPnzNorth");
					Map.rPanzNorthBots += 1;
					
					_this.Bot.MaxViewDistance = 10;
					
					_this.Bot.HoldButton(BTN.SPRINT, 999);
					if ( _this.Goto(wpTable.position) == EVENT.PATH_SUCCESS )
					{
						_this.Bot.ReleaseButton(BTN.SPRINT);
						if ( Map.FlagStatus != 1 && _this.Bot.IsWeaponCharged(WEAPON.PANZERFAUST, 0) )
						{
							_this.AddAimRequest(Priority.High, "facing", wpTable.facing);
							_this.AddWeaponRequest(Priority.High, WEAPON.PANZERFAUST );
							_this.BlockForWeaponChange( WEAPON.PANZERFAUST );
							sleep(0.3); // make sure its ready to fire
							_this.Bot.HoldButton(BTN.ATTACK1, 2);					
							sleep(5);
							_this.Bot.MaxViewDistance = 10000;
						}
					}
					//Map.bPanzFlagBots -= 1;	//Martin - Only one bot go for this.  We dont want to keep panzering it.
				}
				yield();
			},
		},
	},	

	Fortress_Wall_Destroyed = function( trigger )
	{
		if ( TestMap )
			{ return; }
		
		Map.SideWallStatus = true;

		//toggle on the side wall route
		RTCWUtil.EnableGoal( "ROUTE_sidewall" );
	},

	Service_Door_Destroyed  = function( trigger )
	{
		if ( TestMap )
			{ return; }
		
		Map.MainDoorStatus = true;
		
		if ( !Map.FocusPrimary )
		{
			SetAvailableMapGoals( TEAM.AXIS, true, Map.Plant_Fortress_Wall );
		}
		
		//shift the action
		if ( Map.FlagStatus == 1 )
		{
			SetAvailableMapGoals( TEAM.AXIS, true, Map.Flag_axis_obj01 );

			if ( !Map.DocStatus )
			{
				SetAvailableMapGoals( TEAM.AXIS, true, "ATTACK_Doc_Attack_.*" );
			}
		}

		SetAvailableMapGoals( TEAM.ALLIES, true, "DEFEND_Doc_Defense_.*" );
		SetAvailableMapGoals( TEAM.ALLIES, false, "DEFEND_Flag_Defense_.*" );
		SetAvailableMapGoals( TEAM.AXIS, false, "ATTACK_Flag_Attack_.*" );
		SetAvailableMapGoals( TEAM.AXIS, false, "ATTACK_rEngDoor.*" );
		
		Map.Defend.Allies = Map.hill;

		//toggle on the service hall route
		RTCWUtil.EnableGoal( "ROUTE_servicehalls" );

		SetAvailableMapGoals( TEAM.ALLIES, false, "CHECKPOINT_flag_respawn_obj" );

		// *** Artillery
		//SetAvailableMapGoals( TEAM.ALLIES, true, "CALLARTILLERY_spot_allied_stronghold" );
		SetAvailableMapGoals( TEAM.ALLIES, true, "ARTILLERY_S_target_south_service" );
		SetAvailableMapGoals( TEAM.ALLIES, true, "ARTILLERY_S_target_allied_sidewall" );

		SetAvailableMapGoals( TEAM.AXIS, true, "ARTILLERY_S_target_allied_nearspawn_1" );
		SetAvailableMapGoals( TEAM.AXIS, true, "ARTILLERY_S_target_allied_nearspawn_2" );
		SetAvailableMapGoals( TEAM.AXIS, true, "ARTILLERY_S_target_allied_farspawn" );
		// Allied Panzer
		SetAvailableMapGoals( TEAM.ALLIES, true, "PANZER_bStronghold.*" );
		SetAvailableMapGoals( TEAM.ALLIES, false, "PANZER_flag_allied" );
		SetAvailableMapGoals( TEAM.ALLIES, false, "PANZER_north_service" );
		
		SetAvailableMapGoals( TEAM.ALLIES, true, "SNIPE_allied_nearspawn" );
		
	},
	
	axis_obj01_Taken = function( trigger )
	{
		if ( TestMap )
			{ return; }
		
		if ( !Map.DocStatus )
		{
			Map.DocStatus = true;

			SetGoalPriority( "CALL.*", 0.0 );
			SetGoalPriority( "ARTILLERY.*", 0.0 );
			SetAvailableMapGoals( TEAM.ALLIES, false, "ARTILLERY_S_.*" );
			
			//teams should head for transmitter
			SetAvailableMapGoals( TEAM.ALLIES, true, "DEFEND_Deliver_Defend.*" );
			SetAvailableMapGoals( TEAM.AXIS, true, "ATTACK_Deliver_Support_.*" );
			
			SetAvailableMapGoals( TEAM.ALLIES, false, "DEFEND_Flag_Defense_.*" );
			RTCWUtil.DisableGoal("DEFUSE.*");
			Map.Defend.Allies = {};
			
			//some bots should wait a bit for the doc carrier to get down
			timeout = 0;
			while ( timeout <= 6 && Map.DocStatus == true )
			{
				timeout += 1;
				sleep(1);
			}
			
			if ( Map.DocStatus )
			{
				SetAvailableMapGoals( TEAM.AXIS, false, "ATTACK_Doc_Attack_.*" );
				SetAvailableMapGoals( TEAM.ALLIES, false, "DEFEND_Doc_Defense_.*" );
			}
		}
	},
	
	axis_obj01_Returned = function( trigger )
	{
		if ( TestMap )
			{ return; }
			
		Map.DocStatus = false;

		//move back to the doc grab phase
		SetAvailableMapGoals( TEAM.ALLIES, true, "DEFEND_Doc_Defense_.*" );
		SetAvailableMapGoals( TEAM.AXIS, true, "ATTACK_Doc_Attack_.*" );
		SetAvailableMapGoals( TEAM.ALLIES, false, "DEFEND_Deliver_Defend.*" );
		SetAvailableMapGoals( TEAM.AXIS, false, "ATTACK_Deliver_Support_.*" );
		Map.Defend.Allies = Map.hill;
		SetGoalPriority( "CALL.*", 0.6 );
		SetGoalPriority( "ARTILLERY.*", 1.0 );
	},

	flag_respawn_obj_Allies_Captured = function( trigger )
 	{
 		if ( TestMap )
			{ return; }
		
		Map.FlagStatus = 2;
		
		if ( !Map.FocusPrimary  || !Map.MainDoorStatus )
			{ SetAvailableMapGoals( TEAM.AXIS, false, Map.Flag_axis_obj01 ); }

		// *** Artillery
		if(!Map.DocStatus)
		{
			SetAvailableMapGoals( TEAM.ALLIES, true, "ARTILLERY_S_target_axis_nearspawn_1" );
			SetAvailableMapGoals( TEAM.ALLIES, true, "ARTILLERY_S_target_axis_nearspawn_2" );
		}

		SetAvailableMapGoals( TEAM.ALLIES, true, "CALLARTILLERY_spot_axis_nearspawn" );

		// Allied Panzer
		SetAvailableMapGoals( TEAM.ALLIES, false, "PANZER_.*" );
		SetAvailableMapGoals( TEAM.ALLIES, true, "PANZER_flag_allied" );
		SetAvailableMapGoals( TEAM.ALLIES, true, "PANZER_north_service" );
 	},

 	flag_respawn_obj_Axis_Captured = function( trigger )
 	{
 		if ( TestMap )
			{ return; }
			
		Map.FlagStatus = 1;

		if ( !Map.MainDoorStatus )
		{
			SetAvailableMapGoals( TEAM.AXIS, true, "ATTACK_Flag_Attack_.*" );
			SetAvailableMapGoals( TEAM.ALLIES, true, Map.CHECKPOINT_flag_respawn_obj );
		}
		else
		{
			SetAvailableMapGoals( TEAM.AXIS, true, Map.Flag_axis_obj01 );
			if ( !Map.DocStatus )
			{
				SetAvailableMapGoals( TEAM.AXIS, true, "ATTACK_Doc_Attack_.*" );
			}
			SetAvailableMapGoals( TEAM.ALLIES, false, "CHECKPOINT_flag_respawn_obj" );
		}

		// *** Artillery
		SetAvailableMapGoals( TEAM.ALLIES, false, "ARTILLERY_S_bFlag.*" );

		SetAvailableMapGoals( TEAM.ALLIES, false, "CALLARTILLERY_.*" );

		// Allied Panzer
		SetAvailableMapGoals( TEAM.ALLIES, true, "PANZER_bStronghold.*" );
		SetAvailableMapGoals( TEAM.ALLIES, false, "PANZER_flag_allied" );
		SetAvailableMapGoals( TEAM.ALLIES, false, "PANZER_north_service" );
 	},

 	Service_Door_Planted = function( trigger )
 	{
 		if ( TestMap )
			{ return; }
			
		Map.MainDoorDyno += 1;
 	},
	
 	Service_Door_Defused = function( trigger )
 	{
 		if ( TestMap )
			{ return; }
			
		Map.MainDoorDyno -= 1;
 	},
	
 	Fortress_Wall_Planted = function( trigger )
 	{
 		if ( TestMap )
			{ return; }
			
		Map.SideWallDyno += 1;
 	},
	
 	Fortress_Wall_Defused = function( trigger )
 	{
 		if ( TestMap )
			{ return; }
			
		Map.SideWallDyno -= 1;
 	},

	two_minute = function( trigger )
	{
		if ( TestMap )
			{ return; }
			
		//time is low, so start focusing on main obj
		Map.FocusPrimary = true;

		SetAvailableMapGoals( TEAM.AXIS, true, Map.Flag_axis_obj01 );
		SetAvailableMapGoals( TEAM.AXIS, false, Map.Plant_Fortress_Wall );
	},
};

global OnMapLoad = function()
{
	//add use points so the bots can plant both sides
	Util.AddUsePoint(Map.Plant_Fortress_Wall, Vector3(-5472,710,362));
	Util.AddUsePoint(Map.Plant_Fortress_Wall, Vector3(-5475,864,346));
	
	if ( TestMapOn )
		{ Util.AutoTestMap(); }

	OnTrigger( "Service Door breached!", Map.Service_Door_Destroyed );
	OnTrigger( "the Fortress Wall Destroyed.", Map.Fortress_Wall_Destroyed );
 	OnTrigger( "Allies reclaim the Shipping Halls!", Map.flag_respawn_obj_Allies_Captured );
 	OnTrigger( "Axis captures the Shipping Halls!", Map.flag_respawn_obj_Axis_Captured );
	OnTrigger( "Axis have stolen Allied Documents!", Map.axis_obj01_Taken );
	OnTrigger( "Flag returned axis_obj01!", Map.axis_obj01_Returned );
	OnTrigger( "Planted at the Service Door.", Map.Service_Door_Planted );
	OnTrigger( "Defused at the Service Door.", Map.Service_Door_Defused);
	OnTrigger( "Planted at the Fortress Wall.", Map.Fortress_Wall_Planted );
	OnTrigger( "Defused at the Fortress Wall.", Map.Fortress_Wall_Defused );
	OnTrigger( "two minute warning.", Map.two_minute );

	SetMapGoalProperties( "ATTACK_.*", {mincamptime=15, maxcamptime=30});
	SetMapGoalProperties( "DEFEND_.*", {mincamptime=15, maxcamptime=30});
	SetMapGoalProperties( "PANZER_.*", {mincamptime=45, maxcamptime=60});
	SetMapGoalProperties( "MOUNT.*", {mincamptime=60, maxcamptime=90});

	RTCWUtil.SetPrimaryGoals(1.0);
	SetGoalPriority( "DEFEND_Doc_Defense_[567]", 0.6);
	SetGoalPriority( "ATTACK_rEng.*", 0.91 );
	SetGoalPriority( "MOUNT.*", 0.69 );

	RTCWUtil.LimitToClass( "ATTACK_rEng.*", TEAM.AXIS, CLASS.ENGINEER );

	RTCWUtil.DisableGoal(".*", true); //all but routes
	RTCWUtil.DisableGoal("ROUTE_sidewall");
	RTCWUtil.DisableGoal("ROUTE_servicehalls");

	RTCWUtil.EnableGoal("CAPPOINT.*");
	
	SetAvailableMapGoals( TEAM.AXIS, true, "ATTACK_Flag_Attack_.*" );
	SetAvailableMapGoals( TEAM.AXIS, true, "PLANT_Service_Door" );
	SetAvailableMapGoals( TEAM.AXIS, true, Map.CHECKPOINT_flag_respawn_obj );
	SetAvailableMapGoals( TEAM.ALLIES, true, "DEFEND_Flag_Defense_.*" );
	SetAvailableMapGoals( TEAM.ALLIES, false, Map.CHECKPOINT_flag_respawn_obj ); 
	SetAvailableMapGoals( TEAM.AXIS, true, "ATTACK_rEngDoor.*" );

	// *** Artillery
	SetAvailableMapGoals( TEAM.ALLIES, true, "ARTILLERY_S_bFlag.*" );
	SetAvailableMapGoals( TEAM.ALLIES, true, "CALLARTILLERY_bFlag.*" );
	
	SetGoalPriority( "CALL.*", 0.7 );
	SetGoalPriority( "ARTILLERY.*", 1.0 );

	// Allied Panzer
	SetAvailableMapGoals( TEAM.ALLIES, true, "PANZER_flag_allied" );
	SetAvailableMapGoals( TEAM.ALLIES, true, "PANZER_north_service" );

	Util.SetMaxUsersInProgress( 15, "FLAG_.*" );
	Util.SetMaxUsersInProgress( 1, "MOUNT.*" );
	
	RTCWUtil.LimitToClass("MOUNT.*", TEAM.ALLIES, CLASS.SOLDIER);

	//set up some routing
	print("Configuring Routes");

	MapRoutes =
	{
		CHECKPOINT_flag_respawn_obj =
		{
			ROUTE_AxisSpawn1 =
			{
				ROUTE_southhalls = 
				{
					ROUTE_southhalls2 = {},
					ROUTE_southhalls3 = {},
				},
				ROUTE_northhalls = {},
			},
			ROUTE_AxisSpawn2 =
			{
				ROUTE_southhalls = 
				{
					ROUTE_southhalls2 = {},
					ROUTE_southhalls3 = {},
				},
				ROUTE_northhalls = {},
			},
		},
		FLAG_axis_obj01 =
		{
			ROUTE_FlagSpawn =
			{
				ROUTE_topbunker = 
				{
					ROUTE_sidewall = 
					{
						ROUTE_farladder = {},
						ROUTE_coveredladder = {},
					},
				},
				ROUTE_servicehalls = 
				{
					Weight = 3,
					ROUTE_farladder = { Weight = 2, },
					ROUTE_coveredladder = {},
					ROUTE_longladder = {},
				},
				ROUTE_mainhall = 
				{
					Weight = 2,
					ROUTE_sidewall = 
					{
						ROUTE_farladder = { Weight = 2, },
						ROUTE_coveredladder = {},
						ROUTE_longladder = {},
					},
					ROUTE_cornerwall =
					{
						Weight = 2,
						ROUTE_gate =
						{
							ROUTE_farladder = { Weight = 2, },
							ROUTE_coveredladder = {},
							ROUTE_longladder = {},
						},
					},

				},
			},
		},
		CAPPOINT_130 =
		{
			ROUTE_docgrab =
			{
				ROUTE_servicehalls =
				{
					ROUTE_northhalls = {},
				},
				ROUTE_mainhall = {},
			},
		},
		DEFEND_Doc_Defense_5 =
		{
			ROUTE_AllySpawn1 =
			{
				ROUTE_farladder = { ROUTE_docpatrol = {}, },
				ROUTE_coveredladder = { ROUTE_docpatrol = {}, },
				ROUTE_longladder = { ROUTE_docpatrol = {}, },
			},
			ROUTE_AllySpawn2 =
			{
				ROUTE_hallpatrol = 
				{ 
					ROUTE_farladder = {}, 
					ROUTE_coveredladder = {}, 
					ROUTE_longladder = {},
				},
			},
		},
		DEFEND_Doc_Defense_3 =
		{
			ROUTE_AllySpawn1 =
			{
				ROUTE_hallpatrol = { Weight = 3, },
				ROUTE_farladder = { ROUTE_docpatrol = {}, },
				ROUTE_coveredladder = { ROUTE_docpatrol = {}, },
				ROUTE_longladder = { ROUTE_docpatrol = {}, },
			},
			ROUTE_AllySpawn2 =
			{
				ROUTE_hallpatrol = {},
			},
		},
		PLANT_Fortress_Wall =
		{
			ROUTE_servicehalls = {},
			ROUTE_mainhall = {},
		},
	};
	
	//copy some routes
//	MapRoutes.DEFEND_Doc_Defense_1 = MapRoutes.DEFEND_Doc_Defense_3;
	//MapRoutes.DEFEND_Doc_Defense_2 = MapRoutes.DEFEND_Doc_Defense_3;
	MapRoutes.DEFEND_Doc_Defense_4 = MapRoutes.DEFEND_Doc_Defense_3;
	MapRoutes.DEFEND_Doc_Defense_5 = MapRoutes.DEFEND_Doc_Defense_3;
	MapRoutes.DEFEND_Doc_Defense_6 = MapRoutes.DEFEND_Doc_Defense_5;
	MapRoutes.DEFEND_Doc_Defense_7 = MapRoutes.DEFEND_Doc_Defense_5;
	MapRoutes.ATTACK_Doc_Attack_1 = MapRoutes.FLAG_axis_obj01;
	MapRoutes.ATTACK_Doc_Attack_2 = MapRoutes.FLAG_axis_obj01;
	MapRoutes.ATTACK_Doc_Attack_3 = MapRoutes.FLAG_axis_obj01;
	MapRoutes.ATTACK_Doc_Attack_4 = MapRoutes.FLAG_axis_obj01;
	MapRoutes.ATTACK_Doc_Attack_5 = MapRoutes.FLAG_axis_obj01;
	MapRoutes.ATTACK_Flag_Attack_1 = MapRoutes.CHECKPOINT_flag_respawn_obj;
	MapRoutes.ATTACK_Flag_Attack_2 = MapRoutes.CHECKPOINT_flag_respawn_obj;
	MapRoutes.ATTACK_Flag_Attack_3 = MapRoutes.CHECKPOINT_flag_respawn_obj;
	MapRoutes.ATTACK_Flag_Attack_4 = MapRoutes.CHECKPOINT_flag_respawn_obj;
	MapRoutes.ATTACK_Flag_Attack_5 = MapRoutes.CHECKPOINT_flag_respawn_obj;
	MapRoutes.ATTACK_Flag_Attack_6 = MapRoutes.CHECKPOINT_flag_respawn_obj;
	MapRoutes.ATTACK_Flag_Attack_7 = MapRoutes.CHECKPOINT_flag_respawn_obj;
	MapRoutes.FLAG_axis_obj01.ROUTE_FlagSpawn2 = MapRoutes.FLAG_axis_obj01.ROUTE_FlagSpawn;
	MapRoutes.FLAG_axis_obj01.ROUTE_AxisSpawn1 = MapRoutes.FLAG_axis_obj01.ROUTE_FlagSpawn;
	MapRoutes.FLAG_axis_obj01.ROUTE_AxisSpawn2 = MapRoutes.FLAG_axis_obj01.ROUTE_FlagSpawn;

	Util.Routes(MapRoutes);	
	print( "OnMapLoad" );
};

global OnBotJoin = function( bot )
{			
	team = bot.GetTeam();

	RTCWUtil.NoSnipe(bot);

/*	if ( team == TEAM.ALLIES && !bot.ChangedSpawn )
	{
		if ( RandInt(0,1) < 1)				
			{ bot.ChangeSpawnPoint( 2 ); } //South Barracks
		else 
			{ bot.ChangeSpawnPoint( 0 ); } //North Barracks

		bot.ChangedSpawn = true;
	}
	else if ( team == TEAM.AXIS )
	{
		//default spawn
		bot.ChangeSpawnPoint( 0 );
	}*/
	
	RTCWUtil.SetDualObjective(bot);
};

