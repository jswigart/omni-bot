// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "navmesh.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace NavmeshIO {

namespace {

const ::google::protobuf::Descriptor* Vec3_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Vec3_reflection_ = NULL;
const ::google::protobuf::Descriptor* Header_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Header_reflection_ = NULL;
const ::google::protobuf::Descriptor* SectorVert_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SectorVert_reflection_ = NULL;
const ::google::protobuf::Descriptor* SectorData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SectorData_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sector_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sector_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Sector_MirrorDir_descriptor_ = NULL;
const ::google::protobuf::Descriptor* NavigationMesh_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NavigationMesh_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_navmesh_2eproto() {
  protobuf_AddDesc_navmesh_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "navmesh.proto");
  GOOGLE_CHECK(file != NULL);
  Vec3_descriptor_ = file->message_type(0);
  static const int Vec3_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vec3, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vec3, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vec3, z_),
  };
  Vec3_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Vec3_descriptor_,
      Vec3::default_instance_,
      Vec3_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vec3, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vec3, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Vec3));
  Header_descriptor_ = file->message_type(1);
  static const int Header_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Header, mapcenter_),
  };
  Header_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Header_descriptor_,
      Header::default_instance_,
      Header_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Header, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Header, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Header));
  SectorVert_descriptor_ = file->message_type(2);
  static const int SectorVert_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SectorVert, position_),
  };
  SectorVert_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SectorVert_descriptor_,
      SectorVert::default_instance_,
      SectorVert_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SectorVert, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SectorVert, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SectorVert));
  SectorData_descriptor_ = file->message_type(3);
  static const int SectorData_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SectorData, enabled_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SectorData, location_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SectorData, locationteam1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SectorData, locationteam2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SectorData, locationteam3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SectorData, locationteam4_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SectorData, team1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SectorData, team2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SectorData, team3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SectorData, team4_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SectorData, inwater_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SectorData, onmover_),
  };
  SectorData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SectorData_descriptor_,
      SectorData::default_instance_,
      SectorData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SectorData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SectorData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SectorData));
  Sector_descriptor_ = file->message_type(4);
  static const int Sector_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sector, vertices_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sector, sectormirrored_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sector, sectordata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sector, sectordatamirrored_),
  };
  Sector_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sector_descriptor_,
      Sector::default_instance_,
      Sector_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sector, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sector, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sector));
  Sector_MirrorDir_descriptor_ = Sector_descriptor_->enum_type(0);
  NavigationMesh_descriptor_ = file->message_type(5);
  static const int NavigationMesh_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NavigationMesh, header_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NavigationMesh, sectors_),
  };
  NavigationMesh_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NavigationMesh_descriptor_,
      NavigationMesh::default_instance_,
      NavigationMesh_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NavigationMesh, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NavigationMesh, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NavigationMesh));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_navmesh_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Vec3_descriptor_, &Vec3::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Header_descriptor_, &Header::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SectorVert_descriptor_, &SectorVert::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SectorData_descriptor_, &SectorData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sector_descriptor_, &Sector::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NavigationMesh_descriptor_, &NavigationMesh::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_navmesh_2eproto() {
  delete Vec3::default_instance_;
  delete Vec3_reflection_;
  delete Header::default_instance_;
  delete Header_reflection_;
  delete SectorVert::default_instance_;
  delete SectorVert_reflection_;
  delete SectorData::default_instance_;
  delete SectorData_reflection_;
  delete Sector::default_instance_;
  delete Sector_reflection_;
  delete NavigationMesh::default_instance_;
  delete NavigationMesh_reflection_;
}

void protobuf_AddDesc_navmesh_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::protobuf_AddDesc_google_2fprotobuf_2fdescriptor_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\rnavmesh.proto\022\tNavmeshIO\032 google/proto"
    "buf/descriptor.proto\"\'\n\004Vec3\022\t\n\001x\030\001 \001(\002\022"
    "\t\n\001y\030\002 \001(\002\022\t\n\001z\030\003 \001(\002\",\n\006Header\022\"\n\tmapCe"
    "nter\030\001 \001(\0132\017.NavmeshIO.Vec3\"/\n\nSectorVer"
    "t\022!\n\010position\030\001 \002(\0132\017.NavmeshIO.Vec3\"\347\005\n"
    "\nSectorData\0228\n\007enabled\030\001 \001(\010:\004trueB!\202}\036I"
    "s this sector enabled for use\022=\n\010locatio"
    "n\030\002 \001(\tB+\202}(Global location string for c"
    "ommunication\022A\n\rlocationteam1\030\003 \001(\tB*\202}\'"
    "Team1 location string for communication\022"
    "A\n\rlocationteam2\030\004 \001(\tB*\202}\'Team2 locatio"
    "n string for communication\022A\n\rlocationte"
    "am3\030\005 \001(\tB*\202}\'Team3 location string for "
    "communication\022A\n\rlocationteam4\030\006 \001(\tB*\202}"
    "\'Team4 location string for communication"
    "\0227\n\005team1\030\007 \001(\010:\005falseB!\202}\036Is this secto"
    "r usable by team1\0227\n\005team2\030\010 \001(\010:\005falseB"
    "!\202}\036Is this sector usable by team2\0227\n\005te"
    "am3\030\t \001(\010:\005falseB!\202}\036Is this sector usab"
    "le by team3\0227\n\005team4\030\n \001(\010:\005falseB!\202}\036Is"
    " this sector usable by team4\0222\n\007inwater\030"
    "\013 \001(\010:\005falseB\032\202}\027Is this sector in water"
    "\022<\n\007onmover\030\014 \001(\010:\005falseB$\202}!Is this sec"
    "tor on a dynamic mover\"\276\002\n\006Sector\022\'\n\010ver"
    "tices\030\001 \003(\0132\025.NavmeshIO.SectorVert\022\?\n\016se"
    "ctorMirrored\030\002 \001(\0162\033.NavmeshIO.Sector.Mi"
    "rrorDir:\nMirrorNone\022)\n\nsectorData\030\003 \001(\0132"
    "\025.NavmeshIO.SectorData\0221\n\022sectorDataMirr"
    "ored\030\004 \001(\0132\025.NavmeshIO.SectorData\"l\n\tMir"
    "rorDir\022\016\n\nMirrorNone\020\000\022\013\n\007MirrorX\020\001\022\014\n\010M"
    "irrorNX\020\002\022\013\n\007MirrorY\020\003\022\014\n\010MirrorNY\020\004\022\013\n\007"
    "MirrorZ\020\005\022\014\n\010MirrorNZ\020\006\"W\n\016NavigationMes"
    "h\022!\n\006header\030\001 \002(\0132\021.NavmeshIO.Header\022\"\n\007"
    "sectors\030\002 \003(\0132\021.NavmeshIO.Sector:+\n\003doc\022"
    "\035.google.protobuf.FieldOptions\030\320\017 \001(\tB\002H"
    "\001", 1401);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "navmesh.proto", &protobuf_RegisterTypes);
  Vec3::default_instance_ = new Vec3();
  Header::default_instance_ = new Header();
  SectorVert::default_instance_ = new SectorVert();
  SectorData::default_instance_ = new SectorData();
  Sector::default_instance_ = new Sector();
  NavigationMesh::default_instance_ = new NavigationMesh();
  ::google::protobuf::internal::ExtensionSet::RegisterExtension(
    &::google::protobuf::FieldOptions::default_instance(),
    2000, 9, false, false);
  Vec3::default_instance_->InitAsDefaultInstance();
  Header::default_instance_->InitAsDefaultInstance();
  SectorVert::default_instance_->InitAsDefaultInstance();
  SectorData::default_instance_->InitAsDefaultInstance();
  Sector::default_instance_->InitAsDefaultInstance();
  NavigationMesh::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_navmesh_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_navmesh_2eproto {
  StaticDescriptorInitializer_navmesh_2eproto() {
    protobuf_AddDesc_navmesh_2eproto();
  }
} static_descriptor_initializer_navmesh_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int Vec3::kXFieldNumber;
const int Vec3::kYFieldNumber;
const int Vec3::kZFieldNumber;
#endif  // !_MSC_VER

Vec3::Vec3()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Vec3::InitAsDefaultInstance() {
}

Vec3::Vec3(const Vec3& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Vec3::SharedCtor() {
  _cached_size_ = 0;
  x_ = 0;
  y_ = 0;
  z_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Vec3::~Vec3() {
  SharedDtor();
}

void Vec3::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Vec3::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Vec3::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Vec3_descriptor_;
}

const Vec3& Vec3::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_navmesh_2eproto();  return *default_instance_;
}

Vec3* Vec3::default_instance_ = NULL;

Vec3* Vec3::New() const {
  return new Vec3;
}

void Vec3::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    x_ = 0;
    y_ = 0;
    z_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Vec3::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float x = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_y;
        break;
      }
      
      // optional float y = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_z;
        break;
      }
      
      // optional float z = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_z:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &z_)));
          set_has_z();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Vec3::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional float x = 1;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->x(), output);
  }
  
  // optional float y = 2;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->y(), output);
  }
  
  // optional float z = 3;
  if (has_z()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->z(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Vec3::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional float x = 1;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->x(), target);
  }
  
  // optional float y = 2;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->y(), target);
  }
  
  // optional float z = 3;
  if (has_z()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->z(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Vec3::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional float x = 1;
    if (has_x()) {
      total_size += 1 + 4;
    }
    
    // optional float y = 2;
    if (has_y()) {
      total_size += 1 + 4;
    }
    
    // optional float z = 3;
    if (has_z()) {
      total_size += 1 + 4;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Vec3::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Vec3* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Vec3*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Vec3::MergeFrom(const Vec3& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
    if (from.has_z()) {
      set_z(from.z());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Vec3::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Vec3::CopyFrom(const Vec3& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Vec3::IsInitialized() const {
  
  return true;
}

void Vec3::Swap(Vec3* other) {
  if (other != this) {
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(z_, other->z_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Vec3::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Vec3_descriptor_;
  metadata.reflection = Vec3_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Header::kMapCenterFieldNumber;
#endif  // !_MSC_VER

Header::Header()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Header::InitAsDefaultInstance() {
  mapcenter_ = const_cast< ::NavmeshIO::Vec3*>(&::NavmeshIO::Vec3::default_instance());
}

Header::Header(const Header& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Header::SharedCtor() {
  _cached_size_ = 0;
  mapcenter_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Header::~Header() {
  SharedDtor();
}

void Header::SharedDtor() {
  if (this != default_instance_) {
    delete mapcenter_;
  }
}

void Header::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Header::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Header_descriptor_;
}

const Header& Header::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_navmesh_2eproto();  return *default_instance_;
}

Header* Header::default_instance_ = NULL;

Header* Header::New() const {
  return new Header;
}

void Header::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_mapcenter()) {
      if (mapcenter_ != NULL) mapcenter_->::NavmeshIO::Vec3::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Header::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .NavmeshIO.Vec3 mapCenter = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_mapcenter()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Header::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .NavmeshIO.Vec3 mapCenter = 1;
  if (has_mapcenter()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->mapcenter(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Header::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .NavmeshIO.Vec3 mapCenter = 1;
  if (has_mapcenter()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->mapcenter(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Header::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .NavmeshIO.Vec3 mapCenter = 1;
    if (has_mapcenter()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->mapcenter());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Header::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Header* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Header*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Header::MergeFrom(const Header& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mapcenter()) {
      mutable_mapcenter()->::NavmeshIO::Vec3::MergeFrom(from.mapcenter());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Header::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Header::CopyFrom(const Header& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Header::IsInitialized() const {
  
  return true;
}

void Header::Swap(Header* other) {
  if (other != this) {
    std::swap(mapcenter_, other->mapcenter_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Header::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Header_descriptor_;
  metadata.reflection = Header_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SectorVert::kPositionFieldNumber;
#endif  // !_MSC_VER

SectorVert::SectorVert()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SectorVert::InitAsDefaultInstance() {
  position_ = const_cast< ::NavmeshIO::Vec3*>(&::NavmeshIO::Vec3::default_instance());
}

SectorVert::SectorVert(const SectorVert& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SectorVert::SharedCtor() {
  _cached_size_ = 0;
  position_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SectorVert::~SectorVert() {
  SharedDtor();
}

void SectorVert::SharedDtor() {
  if (this != default_instance_) {
    delete position_;
  }
}

void SectorVert::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SectorVert::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SectorVert_descriptor_;
}

const SectorVert& SectorVert::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_navmesh_2eproto();  return *default_instance_;
}

SectorVert* SectorVert::default_instance_ = NULL;

SectorVert* SectorVert::New() const {
  return new SectorVert;
}

void SectorVert::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_position()) {
      if (position_ != NULL) position_->::NavmeshIO::Vec3::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SectorVert::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .NavmeshIO.Vec3 position = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_position()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SectorVert::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .NavmeshIO.Vec3 position = 1;
  if (has_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->position(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SectorVert::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .NavmeshIO.Vec3 position = 1;
  if (has_position()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->position(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SectorVert::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .NavmeshIO.Vec3 position = 1;
    if (has_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->position());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SectorVert::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SectorVert* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SectorVert*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SectorVert::MergeFrom(const SectorVert& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_position()) {
      mutable_position()->::NavmeshIO::Vec3::MergeFrom(from.position());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SectorVert::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SectorVert::CopyFrom(const SectorVert& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SectorVert::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void SectorVert::Swap(SectorVert* other) {
  if (other != this) {
    std::swap(position_, other->position_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SectorVert::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SectorVert_descriptor_;
  metadata.reflection = SectorVert_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SectorData::kEnabledFieldNumber;
const int SectorData::kLocationFieldNumber;
const int SectorData::kLocationteam1FieldNumber;
const int SectorData::kLocationteam2FieldNumber;
const int SectorData::kLocationteam3FieldNumber;
const int SectorData::kLocationteam4FieldNumber;
const int SectorData::kTeam1FieldNumber;
const int SectorData::kTeam2FieldNumber;
const int SectorData::kTeam3FieldNumber;
const int SectorData::kTeam4FieldNumber;
const int SectorData::kInwaterFieldNumber;
const int SectorData::kOnmoverFieldNumber;
#endif  // !_MSC_VER

SectorData::SectorData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SectorData::InitAsDefaultInstance() {
}

SectorData::SectorData(const SectorData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SectorData::SharedCtor() {
  _cached_size_ = 0;
  enabled_ = true;
  location_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  locationteam1_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  locationteam2_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  locationteam3_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  locationteam4_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  team1_ = false;
  team2_ = false;
  team3_ = false;
  team4_ = false;
  inwater_ = false;
  onmover_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SectorData::~SectorData() {
  SharedDtor();
}

void SectorData::SharedDtor() {
  if (location_ != &::google::protobuf::internal::kEmptyString) {
    delete location_;
  }
  if (locationteam1_ != &::google::protobuf::internal::kEmptyString) {
    delete locationteam1_;
  }
  if (locationteam2_ != &::google::protobuf::internal::kEmptyString) {
    delete locationteam2_;
  }
  if (locationteam3_ != &::google::protobuf::internal::kEmptyString) {
    delete locationteam3_;
  }
  if (locationteam4_ != &::google::protobuf::internal::kEmptyString) {
    delete locationteam4_;
  }
  if (this != default_instance_) {
  }
}

void SectorData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SectorData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SectorData_descriptor_;
}

const SectorData& SectorData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_navmesh_2eproto();  return *default_instance_;
}

SectorData* SectorData::default_instance_ = NULL;

SectorData* SectorData::New() const {
  return new SectorData;
}

void SectorData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    enabled_ = true;
    if (has_location()) {
      if (location_ != &::google::protobuf::internal::kEmptyString) {
        location_->clear();
      }
    }
    if (has_locationteam1()) {
      if (locationteam1_ != &::google::protobuf::internal::kEmptyString) {
        locationteam1_->clear();
      }
    }
    if (has_locationteam2()) {
      if (locationteam2_ != &::google::protobuf::internal::kEmptyString) {
        locationteam2_->clear();
      }
    }
    if (has_locationteam3()) {
      if (locationteam3_ != &::google::protobuf::internal::kEmptyString) {
        locationteam3_->clear();
      }
    }
    if (has_locationteam4()) {
      if (locationteam4_ != &::google::protobuf::internal::kEmptyString) {
        locationteam4_->clear();
      }
    }
    team1_ = false;
    team2_ = false;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    team3_ = false;
    team4_ = false;
    inwater_ = false;
    onmover_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SectorData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool enabled = 1 [default = true];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enabled_)));
          set_has_enabled();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_location;
        break;
      }
      
      // optional string location = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_location:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_location()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->location().data(), this->location().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_locationteam1;
        break;
      }
      
      // optional string locationteam1 = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_locationteam1:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_locationteam1()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->locationteam1().data(), this->locationteam1().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_locationteam2;
        break;
      }
      
      // optional string locationteam2 = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_locationteam2:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_locationteam2()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->locationteam2().data(), this->locationteam2().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_locationteam3;
        break;
      }
      
      // optional string locationteam3 = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_locationteam3:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_locationteam3()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->locationteam3().data(), this->locationteam3().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_locationteam4;
        break;
      }
      
      // optional string locationteam4 = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_locationteam4:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_locationteam4()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->locationteam4().data(), this->locationteam4().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_team1;
        break;
      }
      
      // optional bool team1 = 7 [default = false];
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_team1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &team1_)));
          set_has_team1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_team2;
        break;
      }
      
      // optional bool team2 = 8 [default = false];
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_team2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &team2_)));
          set_has_team2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_team3;
        break;
      }
      
      // optional bool team3 = 9 [default = false];
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_team3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &team3_)));
          set_has_team3();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_team4;
        break;
      }
      
      // optional bool team4 = 10 [default = false];
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_team4:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &team4_)));
          set_has_team4();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_inwater;
        break;
      }
      
      // optional bool inwater = 11 [default = false];
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_inwater:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &inwater_)));
          set_has_inwater();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_onmover;
        break;
      }
      
      // optional bool onmover = 12 [default = false];
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_onmover:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &onmover_)));
          set_has_onmover();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SectorData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool enabled = 1 [default = true];
  if (has_enabled()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->enabled(), output);
  }
  
  // optional string location = 2;
  if (has_location()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->location().data(), this->location().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->location(), output);
  }
  
  // optional string locationteam1 = 3;
  if (has_locationteam1()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->locationteam1().data(), this->locationteam1().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->locationteam1(), output);
  }
  
  // optional string locationteam2 = 4;
  if (has_locationteam2()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->locationteam2().data(), this->locationteam2().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->locationteam2(), output);
  }
  
  // optional string locationteam3 = 5;
  if (has_locationteam3()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->locationteam3().data(), this->locationteam3().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->locationteam3(), output);
  }
  
  // optional string locationteam4 = 6;
  if (has_locationteam4()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->locationteam4().data(), this->locationteam4().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->locationteam4(), output);
  }
  
  // optional bool team1 = 7 [default = false];
  if (has_team1()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->team1(), output);
  }
  
  // optional bool team2 = 8 [default = false];
  if (has_team2()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->team2(), output);
  }
  
  // optional bool team3 = 9 [default = false];
  if (has_team3()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->team3(), output);
  }
  
  // optional bool team4 = 10 [default = false];
  if (has_team4()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->team4(), output);
  }
  
  // optional bool inwater = 11 [default = false];
  if (has_inwater()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->inwater(), output);
  }
  
  // optional bool onmover = 12 [default = false];
  if (has_onmover()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(12, this->onmover(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SectorData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bool enabled = 1 [default = true];
  if (has_enabled()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->enabled(), target);
  }
  
  // optional string location = 2;
  if (has_location()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->location().data(), this->location().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->location(), target);
  }
  
  // optional string locationteam1 = 3;
  if (has_locationteam1()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->locationteam1().data(), this->locationteam1().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->locationteam1(), target);
  }
  
  // optional string locationteam2 = 4;
  if (has_locationteam2()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->locationteam2().data(), this->locationteam2().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->locationteam2(), target);
  }
  
  // optional string locationteam3 = 5;
  if (has_locationteam3()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->locationteam3().data(), this->locationteam3().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->locationteam3(), target);
  }
  
  // optional string locationteam4 = 6;
  if (has_locationteam4()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->locationteam4().data(), this->locationteam4().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->locationteam4(), target);
  }
  
  // optional bool team1 = 7 [default = false];
  if (has_team1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->team1(), target);
  }
  
  // optional bool team2 = 8 [default = false];
  if (has_team2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->team2(), target);
  }
  
  // optional bool team3 = 9 [default = false];
  if (has_team3()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->team3(), target);
  }
  
  // optional bool team4 = 10 [default = false];
  if (has_team4()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->team4(), target);
  }
  
  // optional bool inwater = 11 [default = false];
  if (has_inwater()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(11, this->inwater(), target);
  }
  
  // optional bool onmover = 12 [default = false];
  if (has_onmover()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(12, this->onmover(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SectorData::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool enabled = 1 [default = true];
    if (has_enabled()) {
      total_size += 1 + 1;
    }
    
    // optional string location = 2;
    if (has_location()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->location());
    }
    
    // optional string locationteam1 = 3;
    if (has_locationteam1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->locationteam1());
    }
    
    // optional string locationteam2 = 4;
    if (has_locationteam2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->locationteam2());
    }
    
    // optional string locationteam3 = 5;
    if (has_locationteam3()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->locationteam3());
    }
    
    // optional string locationteam4 = 6;
    if (has_locationteam4()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->locationteam4());
    }
    
    // optional bool team1 = 7 [default = false];
    if (has_team1()) {
      total_size += 1 + 1;
    }
    
    // optional bool team2 = 8 [default = false];
    if (has_team2()) {
      total_size += 1 + 1;
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional bool team3 = 9 [default = false];
    if (has_team3()) {
      total_size += 1 + 1;
    }
    
    // optional bool team4 = 10 [default = false];
    if (has_team4()) {
      total_size += 1 + 1;
    }
    
    // optional bool inwater = 11 [default = false];
    if (has_inwater()) {
      total_size += 1 + 1;
    }
    
    // optional bool onmover = 12 [default = false];
    if (has_onmover()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SectorData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SectorData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SectorData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SectorData::MergeFrom(const SectorData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_enabled()) {
      set_enabled(from.enabled());
    }
    if (from.has_location()) {
      set_location(from.location());
    }
    if (from.has_locationteam1()) {
      set_locationteam1(from.locationteam1());
    }
    if (from.has_locationteam2()) {
      set_locationteam2(from.locationteam2());
    }
    if (from.has_locationteam3()) {
      set_locationteam3(from.locationteam3());
    }
    if (from.has_locationteam4()) {
      set_locationteam4(from.locationteam4());
    }
    if (from.has_team1()) {
      set_team1(from.team1());
    }
    if (from.has_team2()) {
      set_team2(from.team2());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_team3()) {
      set_team3(from.team3());
    }
    if (from.has_team4()) {
      set_team4(from.team4());
    }
    if (from.has_inwater()) {
      set_inwater(from.inwater());
    }
    if (from.has_onmover()) {
      set_onmover(from.onmover());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SectorData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SectorData::CopyFrom(const SectorData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SectorData::IsInitialized() const {
  
  return true;
}

void SectorData::Swap(SectorData* other) {
  if (other != this) {
    std::swap(enabled_, other->enabled_);
    std::swap(location_, other->location_);
    std::swap(locationteam1_, other->locationteam1_);
    std::swap(locationteam2_, other->locationteam2_);
    std::swap(locationteam3_, other->locationteam3_);
    std::swap(locationteam4_, other->locationteam4_);
    std::swap(team1_, other->team1_);
    std::swap(team2_, other->team2_);
    std::swap(team3_, other->team3_);
    std::swap(team4_, other->team4_);
    std::swap(inwater_, other->inwater_);
    std::swap(onmover_, other->onmover_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SectorData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SectorData_descriptor_;
  metadata.reflection = SectorData_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* Sector_MirrorDir_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sector_MirrorDir_descriptor_;
}
bool Sector_MirrorDir_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Sector_MirrorDir Sector::MirrorNone;
const Sector_MirrorDir Sector::MirrorX;
const Sector_MirrorDir Sector::MirrorNX;
const Sector_MirrorDir Sector::MirrorY;
const Sector_MirrorDir Sector::MirrorNY;
const Sector_MirrorDir Sector::MirrorZ;
const Sector_MirrorDir Sector::MirrorNZ;
const Sector_MirrorDir Sector::MirrorDir_MIN;
const Sector_MirrorDir Sector::MirrorDir_MAX;
const int Sector::MirrorDir_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int Sector::kVerticesFieldNumber;
const int Sector::kSectorMirroredFieldNumber;
const int Sector::kSectorDataFieldNumber;
const int Sector::kSectorDataMirroredFieldNumber;
#endif  // !_MSC_VER

Sector::Sector()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sector::InitAsDefaultInstance() {
  sectordata_ = const_cast< ::NavmeshIO::SectorData*>(&::NavmeshIO::SectorData::default_instance());
  sectordatamirrored_ = const_cast< ::NavmeshIO::SectorData*>(&::NavmeshIO::SectorData::default_instance());
}

Sector::Sector(const Sector& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sector::SharedCtor() {
  _cached_size_ = 0;
  sectormirrored_ = 0;
  sectordata_ = NULL;
  sectordatamirrored_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sector::~Sector() {
  SharedDtor();
}

void Sector::SharedDtor() {
  if (this != default_instance_) {
    delete sectordata_;
    delete sectordatamirrored_;
  }
}

void Sector::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sector::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sector_descriptor_;
}

const Sector& Sector::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_navmesh_2eproto();  return *default_instance_;
}

Sector* Sector::default_instance_ = NULL;

Sector* Sector::New() const {
  return new Sector;
}

void Sector::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    sectormirrored_ = 0;
    if (has_sectordata()) {
      if (sectordata_ != NULL) sectordata_->::NavmeshIO::SectorData::Clear();
    }
    if (has_sectordatamirrored()) {
      if (sectordatamirrored_ != NULL) sectordatamirrored_->::NavmeshIO::SectorData::Clear();
    }
  }
  vertices_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sector::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .NavmeshIO.SectorVert vertices = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_vertices:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_vertices()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_vertices;
        if (input->ExpectTag(16)) goto parse_sectorMirrored;
        break;
      }
      
      // optional .NavmeshIO.Sector.MirrorDir sectorMirrored = 2 [default = MirrorNone];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sectorMirrored:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::NavmeshIO::Sector_MirrorDir_IsValid(value)) {
            set_sectormirrored(static_cast< ::NavmeshIO::Sector_MirrorDir >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_sectorData;
        break;
      }
      
      // optional .NavmeshIO.SectorData sectorData = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sectorData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sectordata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_sectorDataMirrored;
        break;
      }
      
      // optional .NavmeshIO.SectorData sectorDataMirrored = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sectorDataMirrored:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sectordatamirrored()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sector::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .NavmeshIO.SectorVert vertices = 1;
  for (int i = 0; i < this->vertices_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->vertices(i), output);
  }
  
  // optional .NavmeshIO.Sector.MirrorDir sectorMirrored = 2 [default = MirrorNone];
  if (has_sectormirrored()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->sectormirrored(), output);
  }
  
  // optional .NavmeshIO.SectorData sectorData = 3;
  if (has_sectordata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->sectordata(), output);
  }
  
  // optional .NavmeshIO.SectorData sectorDataMirrored = 4;
  if (has_sectordatamirrored()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->sectordatamirrored(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sector::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .NavmeshIO.SectorVert vertices = 1;
  for (int i = 0; i < this->vertices_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->vertices(i), target);
  }
  
  // optional .NavmeshIO.Sector.MirrorDir sectorMirrored = 2 [default = MirrorNone];
  if (has_sectormirrored()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->sectormirrored(), target);
  }
  
  // optional .NavmeshIO.SectorData sectorData = 3;
  if (has_sectordata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->sectordata(), target);
  }
  
  // optional .NavmeshIO.SectorData sectorDataMirrored = 4;
  if (has_sectordatamirrored()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->sectordatamirrored(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sector::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional .NavmeshIO.Sector.MirrorDir sectorMirrored = 2 [default = MirrorNone];
    if (has_sectormirrored()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->sectormirrored());
    }
    
    // optional .NavmeshIO.SectorData sectorData = 3;
    if (has_sectordata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->sectordata());
    }
    
    // optional .NavmeshIO.SectorData sectorDataMirrored = 4;
    if (has_sectordatamirrored()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->sectordatamirrored());
    }
    
  }
  // repeated .NavmeshIO.SectorVert vertices = 1;
  total_size += 1 * this->vertices_size();
  for (int i = 0; i < this->vertices_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->vertices(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sector::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sector* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sector*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sector::MergeFrom(const Sector& from) {
  GOOGLE_CHECK_NE(&from, this);
  vertices_.MergeFrom(from.vertices_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_sectormirrored()) {
      set_sectormirrored(from.sectormirrored());
    }
    if (from.has_sectordata()) {
      mutable_sectordata()->::NavmeshIO::SectorData::MergeFrom(from.sectordata());
    }
    if (from.has_sectordatamirrored()) {
      mutable_sectordatamirrored()->::NavmeshIO::SectorData::MergeFrom(from.sectordatamirrored());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sector::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sector::CopyFrom(const Sector& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sector::IsInitialized() const {
  
  for (int i = 0; i < vertices_size(); i++) {
    if (!this->vertices(i).IsInitialized()) return false;
  }
  return true;
}

void Sector::Swap(Sector* other) {
  if (other != this) {
    vertices_.Swap(&other->vertices_);
    std::swap(sectormirrored_, other->sectormirrored_);
    std::swap(sectordata_, other->sectordata_);
    std::swap(sectordatamirrored_, other->sectordatamirrored_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sector::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sector_descriptor_;
  metadata.reflection = Sector_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NavigationMesh::kHeaderFieldNumber;
const int NavigationMesh::kSectorsFieldNumber;
#endif  // !_MSC_VER

NavigationMesh::NavigationMesh()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NavigationMesh::InitAsDefaultInstance() {
  header_ = const_cast< ::NavmeshIO::Header*>(&::NavmeshIO::Header::default_instance());
}

NavigationMesh::NavigationMesh(const NavigationMesh& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NavigationMesh::SharedCtor() {
  _cached_size_ = 0;
  header_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NavigationMesh::~NavigationMesh() {
  SharedDtor();
}

void NavigationMesh::SharedDtor() {
  if (this != default_instance_) {
    delete header_;
  }
}

void NavigationMesh::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NavigationMesh::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NavigationMesh_descriptor_;
}

const NavigationMesh& NavigationMesh::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_navmesh_2eproto();  return *default_instance_;
}

NavigationMesh* NavigationMesh::default_instance_ = NULL;

NavigationMesh* NavigationMesh::New() const {
  return new NavigationMesh;
}

void NavigationMesh::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_header()) {
      if (header_ != NULL) header_->::NavmeshIO::Header::Clear();
    }
  }
  sectors_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NavigationMesh::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .NavmeshIO.Header header = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_sectors;
        break;
      }
      
      // repeated .NavmeshIO.Sector sectors = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sectors:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_sectors()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_sectors;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NavigationMesh::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .NavmeshIO.Header header = 1;
  if (has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->header(), output);
  }
  
  // repeated .NavmeshIO.Sector sectors = 2;
  for (int i = 0; i < this->sectors_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->sectors(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NavigationMesh::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .NavmeshIO.Header header = 1;
  if (has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->header(), target);
  }
  
  // repeated .NavmeshIO.Sector sectors = 2;
  for (int i = 0; i < this->sectors_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->sectors(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NavigationMesh::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .NavmeshIO.Header header = 1;
    if (has_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->header());
    }
    
  }
  // repeated .NavmeshIO.Sector sectors = 2;
  total_size += 1 * this->sectors_size();
  for (int i = 0; i < this->sectors_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->sectors(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NavigationMesh::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NavigationMesh* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NavigationMesh*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NavigationMesh::MergeFrom(const NavigationMesh& from) {
  GOOGLE_CHECK_NE(&from, this);
  sectors_.MergeFrom(from.sectors_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_header()) {
      mutable_header()->::NavmeshIO::Header::MergeFrom(from.header());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NavigationMesh::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NavigationMesh::CopyFrom(const NavigationMesh& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NavigationMesh::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  for (int i = 0; i < sectors_size(); i++) {
    if (!this->sectors(i).IsInitialized()) return false;
  }
  return true;
}

void NavigationMesh::Swap(NavigationMesh* other) {
  if (other != this) {
    std::swap(header_, other->header_);
    sectors_.Swap(&other->sectors_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NavigationMesh::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NavigationMesh_descriptor_;
  metadata.reflection = NavigationMesh_reflection_;
  return metadata;
}

const ::std::string doc_default("");
::google::protobuf::internal::ExtensionIdentifier< ::google::protobuf::FieldOptions,
    ::google::protobuf::internal::StringTypeTraits, 9, false >
  doc(kDocFieldNumber, doc_default);

// @@protoc_insertion_point(namespace_scope)

}  // namespace NavmeshIO

// @@protoc_insertion_point(global_scope)
