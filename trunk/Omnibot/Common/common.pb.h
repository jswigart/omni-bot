// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: common.proto

#ifndef PROTOBUF_common_2eproto__INCLUDED
#define PROTOBUF_common_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

namespace Remote {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_common_2eproto();
void protobuf_AssignDesc_common_2eproto();
void protobuf_ShutdownFile_common_2eproto();

class Vec3;
class Waypoint;
class Waypoint_Connections;
class Behavior;
class Entity;
class Game;
class Packet;

enum PacketType {
  PACKET_GAME = 1,
  PACKET_ENTITY = 2
};
bool PacketType_IsValid(int value);
const PacketType PacketType_MIN = PACKET_GAME;
const PacketType PacketType_MAX = PACKET_ENTITY;
const int PacketType_ARRAYSIZE = PacketType_MAX + 1;

const ::google::protobuf::EnumDescriptor* PacketType_descriptor();
inline const ::std::string& PacketType_Name(PacketType value) {
  return ::google::protobuf::internal::NameOfEnum(
    PacketType_descriptor(), value);
}
inline bool PacketType_Parse(
    const ::std::string& name, PacketType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<PacketType>(
    PacketType_descriptor(), name, value);
}
enum PayloadFormat {
  PAYLOAD_BINARY = 1,
  PAYLOAD_TEXT = 2
};
bool PayloadFormat_IsValid(int value);
const PayloadFormat PayloadFormat_MIN = PAYLOAD_BINARY;
const PayloadFormat PayloadFormat_MAX = PAYLOAD_TEXT;
const int PayloadFormat_ARRAYSIZE = PayloadFormat_MAX + 1;

const ::google::protobuf::EnumDescriptor* PayloadFormat_descriptor();
inline const ::std::string& PayloadFormat_Name(PayloadFormat value) {
  return ::google::protobuf::internal::NameOfEnum(
    PayloadFormat_descriptor(), value);
}
inline bool PayloadFormat_Parse(
    const ::std::string& name, PayloadFormat* value) {
  return ::google::protobuf::internal::ParseNamedEnum<PayloadFormat>(
    PayloadFormat_descriptor(), name, value);
}
// ===================================================================

class Vec3 : public ::google::protobuf::Message {
 public:
  Vec3();
  virtual ~Vec3();
  
  Vec3(const Vec3& from);
  
  inline Vec3& operator=(const Vec3& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Vec3& default_instance();
  
  void Swap(Vec3* other);
  
  // implements Message ----------------------------------------------
  
  Vec3* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Vec3& from);
  void MergeFrom(const Vec3& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional float x = 1;
  inline bool has_x() const;
  inline void clear_x();
  static const int kXFieldNumber = 1;
  inline float x() const;
  inline void set_x(float value);
  
  // optional float y = 2;
  inline bool has_y() const;
  inline void clear_y();
  static const int kYFieldNumber = 2;
  inline float y() const;
  inline void set_y(float value);
  
  // optional float z = 3;
  inline bool has_z() const;
  inline void clear_z();
  static const int kZFieldNumber = 3;
  inline float z() const;
  inline void set_z(float value);
  
  // @@protoc_insertion_point(class_scope:Remote.Vec3)
 private:
  inline void set_has_x();
  inline void clear_has_x();
  inline void set_has_y();
  inline void clear_has_y();
  inline void set_has_z();
  inline void clear_has_z();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  float x_;
  float y_;
  float z_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_common_2eproto();
  friend void protobuf_AssignDesc_common_2eproto();
  friend void protobuf_ShutdownFile_common_2eproto();
  
  void InitAsDefaultInstance();
  static Vec3* default_instance_;
};
// -------------------------------------------------------------------

class Waypoint_Connections : public ::google::protobuf::Message {
 public:
  Waypoint_Connections();
  virtual ~Waypoint_Connections();
  
  Waypoint_Connections(const Waypoint_Connections& from);
  
  inline Waypoint_Connections& operator=(const Waypoint_Connections& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Waypoint_Connections& default_instance();
  
  void Swap(Waypoint_Connections* other);
  
  // implements Message ----------------------------------------------
  
  Waypoint_Connections* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Waypoint_Connections& from);
  void MergeFrom(const Waypoint_Connections& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 to = 1;
  inline bool has_to() const;
  inline void clear_to();
  static const int kToFieldNumber = 1;
  inline ::google::protobuf::int32 to() const;
  inline void set_to(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:Remote.Waypoint.Connections)
 private:
  inline void set_has_to();
  inline void clear_has_to();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 to_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_common_2eproto();
  friend void protobuf_AssignDesc_common_2eproto();
  friend void protobuf_ShutdownFile_common_2eproto();
  
  void InitAsDefaultInstance();
  static Waypoint_Connections* default_instance_;
};
// -------------------------------------------------------------------

class Waypoint : public ::google::protobuf::Message {
 public:
  Waypoint();
  virtual ~Waypoint();
  
  Waypoint(const Waypoint& from);
  
  inline Waypoint& operator=(const Waypoint& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Waypoint& default_instance();
  
  void Swap(Waypoint* other);
  
  // implements Message ----------------------------------------------
  
  Waypoint* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Waypoint& from);
  void MergeFrom(const Waypoint& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef Waypoint_Connections Connections;
  
  // accessors -------------------------------------------------------
  
  // required int32 uid = 1;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 1;
  inline ::google::protobuf::int32 uid() const;
  inline void set_uid(::google::protobuf::int32 value);
  
  // optional .Remote.Vec3 position = 2;
  inline bool has_position() const;
  inline void clear_position();
  static const int kPositionFieldNumber = 2;
  inline const ::Remote::Vec3& position() const;
  inline ::Remote::Vec3* mutable_position();
  inline ::Remote::Vec3* release_position();
  
  // optional .Remote.Vec3 facing = 3;
  inline bool has_facing() const;
  inline void clear_facing();
  static const int kFacingFieldNumber = 3;
  inline const ::Remote::Vec3& facing() const;
  inline ::Remote::Vec3* mutable_facing();
  inline ::Remote::Vec3* release_facing();
  
  // optional string name = 20;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 20;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  
  // optional float radius = 21;
  inline bool has_radius() const;
  inline void clear_radius();
  static const int kRadiusFieldNumber = 21;
  inline float radius() const;
  inline void set_radius(float value);
  
  // repeated .Remote.Waypoint.Connections links = 22;
  inline int links_size() const;
  inline void clear_links();
  static const int kLinksFieldNumber = 22;
  inline const ::Remote::Waypoint_Connections& links(int index) const;
  inline ::Remote::Waypoint_Connections* mutable_links(int index);
  inline ::Remote::Waypoint_Connections* add_links();
  inline const ::google::protobuf::RepeatedPtrField< ::Remote::Waypoint_Connections >&
      links() const;
  inline ::google::protobuf::RepeatedPtrField< ::Remote::Waypoint_Connections >*
      mutable_links();
  
  // @@protoc_insertion_point(class_scope:Remote.Waypoint)
 private:
  inline void set_has_uid();
  inline void clear_has_uid();
  inline void set_has_position();
  inline void clear_has_position();
  inline void set_has_facing();
  inline void clear_has_facing();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_radius();
  inline void clear_has_radius();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::Remote::Vec3* position_;
  ::Remote::Vec3* facing_;
  ::google::protobuf::int32 uid_;
  float radius_;
  ::std::string* name_;
  ::google::protobuf::RepeatedPtrField< ::Remote::Waypoint_Connections > links_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];
  
  friend void  protobuf_AddDesc_common_2eproto();
  friend void protobuf_AssignDesc_common_2eproto();
  friend void protobuf_ShutdownFile_common_2eproto();
  
  void InitAsDefaultInstance();
  static Waypoint* default_instance_;
};
// -------------------------------------------------------------------

class Behavior : public ::google::protobuf::Message {
 public:
  Behavior();
  virtual ~Behavior();
  
  Behavior(const Behavior& from);
  
  inline Behavior& operator=(const Behavior& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Behavior& default_instance();
  
  void Swap(Behavior* other);
  
  // implements Message ----------------------------------------------
  
  Behavior* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Behavior& from);
  void MergeFrom(const Behavior& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  
  // optional int32 color = 2;
  inline bool has_color() const;
  inline void clear_color();
  static const int kColorFieldNumber = 2;
  inline ::google::protobuf::int32 color() const;
  inline void set_color(::google::protobuf::int32 value);
  
  // optional string info = 3;
  inline bool has_info() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 3;
  inline const ::std::string& info() const;
  inline void set_info(const ::std::string& value);
  inline void set_info(const char* value);
  inline void set_info(const char* value, size_t size);
  inline ::std::string* mutable_info();
  inline ::std::string* release_info();
  
  // repeated .Remote.Behavior children = 4;
  inline int children_size() const;
  inline void clear_children();
  static const int kChildrenFieldNumber = 4;
  inline const ::Remote::Behavior& children(int index) const;
  inline ::Remote::Behavior* mutable_children(int index);
  inline ::Remote::Behavior* add_children();
  inline const ::google::protobuf::RepeatedPtrField< ::Remote::Behavior >&
      children() const;
  inline ::google::protobuf::RepeatedPtrField< ::Remote::Behavior >*
      mutable_children();
  
  // @@protoc_insertion_point(class_scope:Remote.Behavior)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_color();
  inline void clear_has_color();
  inline void set_has_info();
  inline void clear_has_info();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* name_;
  ::std::string* info_;
  ::google::protobuf::RepeatedPtrField< ::Remote::Behavior > children_;
  ::google::protobuf::int32 color_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_common_2eproto();
  friend void protobuf_AssignDesc_common_2eproto();
  friend void protobuf_ShutdownFile_common_2eproto();
  
  void InitAsDefaultInstance();
  static Behavior* default_instance_;
};
// -------------------------------------------------------------------

class Entity : public ::google::protobuf::Message {
 public:
  Entity();
  virtual ~Entity();
  
  Entity(const Entity& from);
  
  inline Entity& operator=(const Entity& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Entity& default_instance();
  
  void Swap(Entity* other);
  
  // implements Message ----------------------------------------------
  
  Entity* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Entity& from);
  void MergeFrom(const Entity& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 uid = 1;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 1;
  inline ::google::protobuf::int32 uid() const;
  inline void set_uid(::google::protobuf::int32 value);
  
  // optional .Remote.Vec3 position = 2;
  inline bool has_position() const;
  inline void clear_position();
  static const int kPositionFieldNumber = 2;
  inline const ::Remote::Vec3& position() const;
  inline ::Remote::Vec3* mutable_position();
  inline ::Remote::Vec3* release_position();
  
  // optional .Remote.Vec3 facing = 3;
  inline bool has_facing() const;
  inline void clear_facing();
  static const int kFacingFieldNumber = 3;
  inline const ::Remote::Vec3& facing() const;
  inline ::Remote::Vec3* mutable_facing();
  inline ::Remote::Vec3* release_facing();
  
  // optional int32 classId = 4;
  inline bool has_classid() const;
  inline void clear_classid();
  static const int kClassIdFieldNumber = 4;
  inline ::google::protobuf::int32 classid() const;
  inline void set_classid(::google::protobuf::int32 value);
  
  // optional int32 teamId = 5;
  inline bool has_teamid() const;
  inline void clear_teamid();
  static const int kTeamIdFieldNumber = 5;
  inline ::google::protobuf::int32 teamid() const;
  inline void set_teamid(::google::protobuf::int32 value);
  
  // optional int32 health = 6;
  inline bool has_health() const;
  inline void clear_health();
  static const int kHealthFieldNumber = 6;
  inline ::google::protobuf::int32 health() const;
  inline void set_health(::google::protobuf::int32 value);
  
  // optional int32 healthMax = 7;
  inline bool has_healthmax() const;
  inline void clear_healthmax();
  static const int kHealthMaxFieldNumber = 7;
  inline ::google::protobuf::int32 healthmax() const;
  inline void set_healthmax(::google::protobuf::int32 value);
  
  // optional int32 armor = 8;
  inline bool has_armor() const;
  inline void clear_armor();
  static const int kArmorFieldNumber = 8;
  inline ::google::protobuf::int32 armor() const;
  inline void set_armor(::google::protobuf::int32 value);
  
  // optional int32 armorMax = 9;
  inline bool has_armormax() const;
  inline void clear_armormax();
  static const int kArmorMaxFieldNumber = 9;
  inline ::google::protobuf::int32 armormax() const;
  inline void set_armormax(::google::protobuf::int32 value);
  
  // optional .Remote.Vec3 size = 10;
  inline bool has_size() const;
  inline void clear_size();
  static const int kSizeFieldNumber = 10;
  inline const ::Remote::Vec3& size() const;
  inline ::Remote::Vec3* mutable_size();
  inline ::Remote::Vec3* release_size();
  
  // optional float fov = 11;
  inline bool has_fov() const;
  inline void clear_fov();
  static const int kFovFieldNumber = 11;
  inline float fov() const;
  inline void set_fov(float value);
  
  // optional string name = 20;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 20;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  
  // optional bool deleted = 21;
  inline bool has_deleted() const;
  inline void clear_deleted();
  static const int kDeletedFieldNumber = 21;
  inline bool deleted() const;
  inline void set_deleted(bool value);
  
  // optional .Remote.Behavior behaviors = 22;
  inline bool has_behaviors() const;
  inline void clear_behaviors();
  static const int kBehaviorsFieldNumber = 22;
  inline const ::Remote::Behavior& behaviors() const;
  inline ::Remote::Behavior* mutable_behaviors();
  inline ::Remote::Behavior* release_behaviors();
  
  // @@protoc_insertion_point(class_scope:Remote.Entity)
 private:
  inline void set_has_uid();
  inline void clear_has_uid();
  inline void set_has_position();
  inline void clear_has_position();
  inline void set_has_facing();
  inline void clear_has_facing();
  inline void set_has_classid();
  inline void clear_has_classid();
  inline void set_has_teamid();
  inline void clear_has_teamid();
  inline void set_has_health();
  inline void clear_has_health();
  inline void set_has_healthmax();
  inline void clear_has_healthmax();
  inline void set_has_armor();
  inline void clear_has_armor();
  inline void set_has_armormax();
  inline void clear_has_armormax();
  inline void set_has_size();
  inline void clear_has_size();
  inline void set_has_fov();
  inline void clear_has_fov();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_deleted();
  inline void clear_has_deleted();
  inline void set_has_behaviors();
  inline void clear_has_behaviors();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::Remote::Vec3* position_;
  ::google::protobuf::int32 uid_;
  ::google::protobuf::int32 classid_;
  ::Remote::Vec3* facing_;
  ::google::protobuf::int32 teamid_;
  ::google::protobuf::int32 health_;
  ::google::protobuf::int32 healthmax_;
  ::google::protobuf::int32 armor_;
  ::Remote::Vec3* size_;
  ::google::protobuf::int32 armormax_;
  float fov_;
  ::std::string* name_;
  ::Remote::Behavior* behaviors_;
  bool deleted_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(14 + 31) / 32];
  
  friend void  protobuf_AddDesc_common_2eproto();
  friend void protobuf_AssignDesc_common_2eproto();
  friend void protobuf_ShutdownFile_common_2eproto();
  
  void InitAsDefaultInstance();
  static Entity* default_instance_;
};
// -------------------------------------------------------------------

class Game : public ::google::protobuf::Message {
 public:
  Game();
  virtual ~Game();
  
  Game(const Game& from);
  
  inline Game& operator=(const Game& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Game& default_instance();
  
  void Swap(Game* other);
  
  // implements Message ----------------------------------------------
  
  Game* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Game& from);
  void MergeFrom(const Game& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  
  // repeated .Remote.Entity entities = 2;
  inline int entities_size() const;
  inline void clear_entities();
  static const int kEntitiesFieldNumber = 2;
  inline const ::Remote::Entity& entities(int index) const;
  inline ::Remote::Entity* mutable_entities(int index);
  inline ::Remote::Entity* add_entities();
  inline const ::google::protobuf::RepeatedPtrField< ::Remote::Entity >&
      entities() const;
  inline ::google::protobuf::RepeatedPtrField< ::Remote::Entity >*
      mutable_entities();
  
  // repeated .Remote.Waypoint waypoints = 3;
  inline int waypoints_size() const;
  inline void clear_waypoints();
  static const int kWaypointsFieldNumber = 3;
  inline const ::Remote::Waypoint& waypoints(int index) const;
  inline ::Remote::Waypoint* mutable_waypoints(int index);
  inline ::Remote::Waypoint* add_waypoints();
  inline const ::google::protobuf::RepeatedPtrField< ::Remote::Waypoint >&
      waypoints() const;
  inline ::google::protobuf::RepeatedPtrField< ::Remote::Waypoint >*
      mutable_waypoints();
  
  // @@protoc_insertion_point(class_scope:Remote.Game)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* name_;
  ::google::protobuf::RepeatedPtrField< ::Remote::Entity > entities_;
  ::google::protobuf::RepeatedPtrField< ::Remote::Waypoint > waypoints_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_common_2eproto();
  friend void protobuf_AssignDesc_common_2eproto();
  friend void protobuf_ShutdownFile_common_2eproto();
  
  void InitAsDefaultInstance();
  static Game* default_instance_;
};
// -------------------------------------------------------------------

class Packet : public ::google::protobuf::Message {
 public:
  Packet();
  virtual ~Packet();
  
  Packet(const Packet& from);
  
  inline Packet& operator=(const Packet& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Packet& default_instance();
  
  void Swap(Packet* other);
  
  // implements Message ----------------------------------------------
  
  Packet* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Packet& from);
  void MergeFrom(const Packet& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required .Remote.PacketType packetType = 1;
  inline bool has_packettype() const;
  inline void clear_packettype();
  static const int kPacketTypeFieldNumber = 1;
  inline Remote::PacketType packettype() const;
  inline void set_packettype(Remote::PacketType value);
  
  // required .Remote.PayloadFormat payloadFormat = 2;
  inline bool has_payloadformat() const;
  inline void clear_payloadformat();
  static const int kPayloadFormatFieldNumber = 2;
  inline Remote::PayloadFormat payloadformat() const;
  inline void set_payloadformat(Remote::PayloadFormat value);
  
  // required uint32 payloadSize = 3;
  inline bool has_payloadsize() const;
  inline void clear_payloadsize();
  static const int kPayloadSizeFieldNumber = 3;
  inline ::google::protobuf::uint32 payloadsize() const;
  inline void set_payloadsize(::google::protobuf::uint32 value);
  
  // optional bytes payloadData = 4;
  inline bool has_payloaddata() const;
  inline void clear_payloaddata();
  static const int kPayloadDataFieldNumber = 4;
  inline const ::std::string& payloaddata() const;
  inline void set_payloaddata(const ::std::string& value);
  inline void set_payloaddata(const char* value);
  inline void set_payloaddata(const void* value, size_t size);
  inline ::std::string* mutable_payloaddata();
  inline ::std::string* release_payloaddata();
  
  // @@protoc_insertion_point(class_scope:Remote.Packet)
 private:
  inline void set_has_packettype();
  inline void clear_has_packettype();
  inline void set_has_payloadformat();
  inline void clear_has_payloadformat();
  inline void set_has_payloadsize();
  inline void clear_has_payloadsize();
  inline void set_has_payloaddata();
  inline void clear_has_payloaddata();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  int packettype_;
  int payloadformat_;
  ::std::string* payloaddata_;
  ::google::protobuf::uint32 payloadsize_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_common_2eproto();
  friend void protobuf_AssignDesc_common_2eproto();
  friend void protobuf_ShutdownFile_common_2eproto();
  
  void InitAsDefaultInstance();
  static Packet* default_instance_;
};
// ===================================================================


// ===================================================================

// Vec3

// optional float x = 1;
inline bool Vec3::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Vec3::set_has_x() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Vec3::clear_has_x() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Vec3::clear_x() {
  x_ = 0;
  clear_has_x();
}
inline float Vec3::x() const {
  return x_;
}
inline void Vec3::set_x(float value) {
  set_has_x();
  x_ = value;
}

// optional float y = 2;
inline bool Vec3::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Vec3::set_has_y() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Vec3::clear_has_y() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Vec3::clear_y() {
  y_ = 0;
  clear_has_y();
}
inline float Vec3::y() const {
  return y_;
}
inline void Vec3::set_y(float value) {
  set_has_y();
  y_ = value;
}

// optional float z = 3;
inline bool Vec3::has_z() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Vec3::set_has_z() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Vec3::clear_has_z() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Vec3::clear_z() {
  z_ = 0;
  clear_has_z();
}
inline float Vec3::z() const {
  return z_;
}
inline void Vec3::set_z(float value) {
  set_has_z();
  z_ = value;
}

// -------------------------------------------------------------------

// Waypoint_Connections

// optional int32 to = 1;
inline bool Waypoint_Connections::has_to() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Waypoint_Connections::set_has_to() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Waypoint_Connections::clear_has_to() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Waypoint_Connections::clear_to() {
  to_ = 0;
  clear_has_to();
}
inline ::google::protobuf::int32 Waypoint_Connections::to() const {
  return to_;
}
inline void Waypoint_Connections::set_to(::google::protobuf::int32 value) {
  set_has_to();
  to_ = value;
}

// -------------------------------------------------------------------

// Waypoint

// required int32 uid = 1;
inline bool Waypoint::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Waypoint::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Waypoint::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Waypoint::clear_uid() {
  uid_ = 0;
  clear_has_uid();
}
inline ::google::protobuf::int32 Waypoint::uid() const {
  return uid_;
}
inline void Waypoint::set_uid(::google::protobuf::int32 value) {
  set_has_uid();
  uid_ = value;
}

// optional .Remote.Vec3 position = 2;
inline bool Waypoint::has_position() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Waypoint::set_has_position() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Waypoint::clear_has_position() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Waypoint::clear_position() {
  if (position_ != NULL) position_->::Remote::Vec3::Clear();
  clear_has_position();
}
inline const ::Remote::Vec3& Waypoint::position() const {
  return position_ != NULL ? *position_ : *default_instance_->position_;
}
inline ::Remote::Vec3* Waypoint::mutable_position() {
  set_has_position();
  if (position_ == NULL) position_ = new ::Remote::Vec3;
  return position_;
}
inline ::Remote::Vec3* Waypoint::release_position() {
  clear_has_position();
  ::Remote::Vec3* temp = position_;
  position_ = NULL;
  return temp;
}

// optional .Remote.Vec3 facing = 3;
inline bool Waypoint::has_facing() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Waypoint::set_has_facing() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Waypoint::clear_has_facing() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Waypoint::clear_facing() {
  if (facing_ != NULL) facing_->::Remote::Vec3::Clear();
  clear_has_facing();
}
inline const ::Remote::Vec3& Waypoint::facing() const {
  return facing_ != NULL ? *facing_ : *default_instance_->facing_;
}
inline ::Remote::Vec3* Waypoint::mutable_facing() {
  set_has_facing();
  if (facing_ == NULL) facing_ = new ::Remote::Vec3;
  return facing_;
}
inline ::Remote::Vec3* Waypoint::release_facing() {
  clear_has_facing();
  ::Remote::Vec3* temp = facing_;
  facing_ = NULL;
  return temp;
}

// optional string name = 20;
inline bool Waypoint::has_name() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Waypoint::set_has_name() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Waypoint::clear_has_name() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Waypoint::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& Waypoint::name() const {
  return *name_;
}
inline void Waypoint::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void Waypoint::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void Waypoint::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Waypoint::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* Waypoint::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional float radius = 21;
inline bool Waypoint::has_radius() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Waypoint::set_has_radius() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Waypoint::clear_has_radius() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Waypoint::clear_radius() {
  radius_ = 0;
  clear_has_radius();
}
inline float Waypoint::radius() const {
  return radius_;
}
inline void Waypoint::set_radius(float value) {
  set_has_radius();
  radius_ = value;
}

// repeated .Remote.Waypoint.Connections links = 22;
inline int Waypoint::links_size() const {
  return links_.size();
}
inline void Waypoint::clear_links() {
  links_.Clear();
}
inline const ::Remote::Waypoint_Connections& Waypoint::links(int index) const {
  return links_.Get(index);
}
inline ::Remote::Waypoint_Connections* Waypoint::mutable_links(int index) {
  return links_.Mutable(index);
}
inline ::Remote::Waypoint_Connections* Waypoint::add_links() {
  return links_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Remote::Waypoint_Connections >&
Waypoint::links() const {
  return links_;
}
inline ::google::protobuf::RepeatedPtrField< ::Remote::Waypoint_Connections >*
Waypoint::mutable_links() {
  return &links_;
}

// -------------------------------------------------------------------

// Behavior

// optional string name = 1;
inline bool Behavior::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Behavior::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Behavior::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Behavior::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& Behavior::name() const {
  return *name_;
}
inline void Behavior::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void Behavior::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void Behavior::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Behavior::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* Behavior::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 color = 2;
inline bool Behavior::has_color() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Behavior::set_has_color() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Behavior::clear_has_color() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Behavior::clear_color() {
  color_ = 0;
  clear_has_color();
}
inline ::google::protobuf::int32 Behavior::color() const {
  return color_;
}
inline void Behavior::set_color(::google::protobuf::int32 value) {
  set_has_color();
  color_ = value;
}

// optional string info = 3;
inline bool Behavior::has_info() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Behavior::set_has_info() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Behavior::clear_has_info() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Behavior::clear_info() {
  if (info_ != &::google::protobuf::internal::kEmptyString) {
    info_->clear();
  }
  clear_has_info();
}
inline const ::std::string& Behavior::info() const {
  return *info_;
}
inline void Behavior::set_info(const ::std::string& value) {
  set_has_info();
  if (info_ == &::google::protobuf::internal::kEmptyString) {
    info_ = new ::std::string;
  }
  info_->assign(value);
}
inline void Behavior::set_info(const char* value) {
  set_has_info();
  if (info_ == &::google::protobuf::internal::kEmptyString) {
    info_ = new ::std::string;
  }
  info_->assign(value);
}
inline void Behavior::set_info(const char* value, size_t size) {
  set_has_info();
  if (info_ == &::google::protobuf::internal::kEmptyString) {
    info_ = new ::std::string;
  }
  info_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Behavior::mutable_info() {
  set_has_info();
  if (info_ == &::google::protobuf::internal::kEmptyString) {
    info_ = new ::std::string;
  }
  return info_;
}
inline ::std::string* Behavior::release_info() {
  clear_has_info();
  if (info_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = info_;
    info_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// repeated .Remote.Behavior children = 4;
inline int Behavior::children_size() const {
  return children_.size();
}
inline void Behavior::clear_children() {
  children_.Clear();
}
inline const ::Remote::Behavior& Behavior::children(int index) const {
  return children_.Get(index);
}
inline ::Remote::Behavior* Behavior::mutable_children(int index) {
  return children_.Mutable(index);
}
inline ::Remote::Behavior* Behavior::add_children() {
  return children_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Remote::Behavior >&
Behavior::children() const {
  return children_;
}
inline ::google::protobuf::RepeatedPtrField< ::Remote::Behavior >*
Behavior::mutable_children() {
  return &children_;
}

// -------------------------------------------------------------------

// Entity

// required int32 uid = 1;
inline bool Entity::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Entity::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Entity::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Entity::clear_uid() {
  uid_ = 0;
  clear_has_uid();
}
inline ::google::protobuf::int32 Entity::uid() const {
  return uid_;
}
inline void Entity::set_uid(::google::protobuf::int32 value) {
  set_has_uid();
  uid_ = value;
}

// optional .Remote.Vec3 position = 2;
inline bool Entity::has_position() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Entity::set_has_position() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Entity::clear_has_position() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Entity::clear_position() {
  if (position_ != NULL) position_->::Remote::Vec3::Clear();
  clear_has_position();
}
inline const ::Remote::Vec3& Entity::position() const {
  return position_ != NULL ? *position_ : *default_instance_->position_;
}
inline ::Remote::Vec3* Entity::mutable_position() {
  set_has_position();
  if (position_ == NULL) position_ = new ::Remote::Vec3;
  return position_;
}
inline ::Remote::Vec3* Entity::release_position() {
  clear_has_position();
  ::Remote::Vec3* temp = position_;
  position_ = NULL;
  return temp;
}

// optional .Remote.Vec3 facing = 3;
inline bool Entity::has_facing() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Entity::set_has_facing() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Entity::clear_has_facing() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Entity::clear_facing() {
  if (facing_ != NULL) facing_->::Remote::Vec3::Clear();
  clear_has_facing();
}
inline const ::Remote::Vec3& Entity::facing() const {
  return facing_ != NULL ? *facing_ : *default_instance_->facing_;
}
inline ::Remote::Vec3* Entity::mutable_facing() {
  set_has_facing();
  if (facing_ == NULL) facing_ = new ::Remote::Vec3;
  return facing_;
}
inline ::Remote::Vec3* Entity::release_facing() {
  clear_has_facing();
  ::Remote::Vec3* temp = facing_;
  facing_ = NULL;
  return temp;
}

// optional int32 classId = 4;
inline bool Entity::has_classid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Entity::set_has_classid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Entity::clear_has_classid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Entity::clear_classid() {
  classid_ = 0;
  clear_has_classid();
}
inline ::google::protobuf::int32 Entity::classid() const {
  return classid_;
}
inline void Entity::set_classid(::google::protobuf::int32 value) {
  set_has_classid();
  classid_ = value;
}

// optional int32 teamId = 5;
inline bool Entity::has_teamid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Entity::set_has_teamid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Entity::clear_has_teamid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Entity::clear_teamid() {
  teamid_ = 0;
  clear_has_teamid();
}
inline ::google::protobuf::int32 Entity::teamid() const {
  return teamid_;
}
inline void Entity::set_teamid(::google::protobuf::int32 value) {
  set_has_teamid();
  teamid_ = value;
}

// optional int32 health = 6;
inline bool Entity::has_health() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Entity::set_has_health() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Entity::clear_has_health() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Entity::clear_health() {
  health_ = 0;
  clear_has_health();
}
inline ::google::protobuf::int32 Entity::health() const {
  return health_;
}
inline void Entity::set_health(::google::protobuf::int32 value) {
  set_has_health();
  health_ = value;
}

// optional int32 healthMax = 7;
inline bool Entity::has_healthmax() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Entity::set_has_healthmax() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Entity::clear_has_healthmax() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Entity::clear_healthmax() {
  healthmax_ = 0;
  clear_has_healthmax();
}
inline ::google::protobuf::int32 Entity::healthmax() const {
  return healthmax_;
}
inline void Entity::set_healthmax(::google::protobuf::int32 value) {
  set_has_healthmax();
  healthmax_ = value;
}

// optional int32 armor = 8;
inline bool Entity::has_armor() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Entity::set_has_armor() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Entity::clear_has_armor() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Entity::clear_armor() {
  armor_ = 0;
  clear_has_armor();
}
inline ::google::protobuf::int32 Entity::armor() const {
  return armor_;
}
inline void Entity::set_armor(::google::protobuf::int32 value) {
  set_has_armor();
  armor_ = value;
}

// optional int32 armorMax = 9;
inline bool Entity::has_armormax() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Entity::set_has_armormax() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Entity::clear_has_armormax() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Entity::clear_armormax() {
  armormax_ = 0;
  clear_has_armormax();
}
inline ::google::protobuf::int32 Entity::armormax() const {
  return armormax_;
}
inline void Entity::set_armormax(::google::protobuf::int32 value) {
  set_has_armormax();
  armormax_ = value;
}

// optional .Remote.Vec3 size = 10;
inline bool Entity::has_size() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Entity::set_has_size() {
  _has_bits_[0] |= 0x00000200u;
}
inline void Entity::clear_has_size() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void Entity::clear_size() {
  if (size_ != NULL) size_->::Remote::Vec3::Clear();
  clear_has_size();
}
inline const ::Remote::Vec3& Entity::size() const {
  return size_ != NULL ? *size_ : *default_instance_->size_;
}
inline ::Remote::Vec3* Entity::mutable_size() {
  set_has_size();
  if (size_ == NULL) size_ = new ::Remote::Vec3;
  return size_;
}
inline ::Remote::Vec3* Entity::release_size() {
  clear_has_size();
  ::Remote::Vec3* temp = size_;
  size_ = NULL;
  return temp;
}

// optional float fov = 11;
inline bool Entity::has_fov() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void Entity::set_has_fov() {
  _has_bits_[0] |= 0x00000400u;
}
inline void Entity::clear_has_fov() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void Entity::clear_fov() {
  fov_ = 0;
  clear_has_fov();
}
inline float Entity::fov() const {
  return fov_;
}
inline void Entity::set_fov(float value) {
  set_has_fov();
  fov_ = value;
}

// optional string name = 20;
inline bool Entity::has_name() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void Entity::set_has_name() {
  _has_bits_[0] |= 0x00000800u;
}
inline void Entity::clear_has_name() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void Entity::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& Entity::name() const {
  return *name_;
}
inline void Entity::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void Entity::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void Entity::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Entity::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* Entity::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional bool deleted = 21;
inline bool Entity::has_deleted() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void Entity::set_has_deleted() {
  _has_bits_[0] |= 0x00001000u;
}
inline void Entity::clear_has_deleted() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void Entity::clear_deleted() {
  deleted_ = false;
  clear_has_deleted();
}
inline bool Entity::deleted() const {
  return deleted_;
}
inline void Entity::set_deleted(bool value) {
  set_has_deleted();
  deleted_ = value;
}

// optional .Remote.Behavior behaviors = 22;
inline bool Entity::has_behaviors() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void Entity::set_has_behaviors() {
  _has_bits_[0] |= 0x00002000u;
}
inline void Entity::clear_has_behaviors() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void Entity::clear_behaviors() {
  if (behaviors_ != NULL) behaviors_->::Remote::Behavior::Clear();
  clear_has_behaviors();
}
inline const ::Remote::Behavior& Entity::behaviors() const {
  return behaviors_ != NULL ? *behaviors_ : *default_instance_->behaviors_;
}
inline ::Remote::Behavior* Entity::mutable_behaviors() {
  set_has_behaviors();
  if (behaviors_ == NULL) behaviors_ = new ::Remote::Behavior;
  return behaviors_;
}
inline ::Remote::Behavior* Entity::release_behaviors() {
  clear_has_behaviors();
  ::Remote::Behavior* temp = behaviors_;
  behaviors_ = NULL;
  return temp;
}

// -------------------------------------------------------------------

// Game

// optional string name = 1;
inline bool Game::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Game::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Game::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Game::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& Game::name() const {
  return *name_;
}
inline void Game::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void Game::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void Game::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Game::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* Game::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// repeated .Remote.Entity entities = 2;
inline int Game::entities_size() const {
  return entities_.size();
}
inline void Game::clear_entities() {
  entities_.Clear();
}
inline const ::Remote::Entity& Game::entities(int index) const {
  return entities_.Get(index);
}
inline ::Remote::Entity* Game::mutable_entities(int index) {
  return entities_.Mutable(index);
}
inline ::Remote::Entity* Game::add_entities() {
  return entities_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Remote::Entity >&
Game::entities() const {
  return entities_;
}
inline ::google::protobuf::RepeatedPtrField< ::Remote::Entity >*
Game::mutable_entities() {
  return &entities_;
}

// repeated .Remote.Waypoint waypoints = 3;
inline int Game::waypoints_size() const {
  return waypoints_.size();
}
inline void Game::clear_waypoints() {
  waypoints_.Clear();
}
inline const ::Remote::Waypoint& Game::waypoints(int index) const {
  return waypoints_.Get(index);
}
inline ::Remote::Waypoint* Game::mutable_waypoints(int index) {
  return waypoints_.Mutable(index);
}
inline ::Remote::Waypoint* Game::add_waypoints() {
  return waypoints_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Remote::Waypoint >&
Game::waypoints() const {
  return waypoints_;
}
inline ::google::protobuf::RepeatedPtrField< ::Remote::Waypoint >*
Game::mutable_waypoints() {
  return &waypoints_;
}

// -------------------------------------------------------------------

// Packet

// required .Remote.PacketType packetType = 1;
inline bool Packet::has_packettype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Packet::set_has_packettype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Packet::clear_has_packettype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Packet::clear_packettype() {
  packettype_ = 1;
  clear_has_packettype();
}
inline Remote::PacketType Packet::packettype() const {
  return static_cast< Remote::PacketType >(packettype_);
}
inline void Packet::set_packettype(Remote::PacketType value) {
  GOOGLE_DCHECK(Remote::PacketType_IsValid(value));
  set_has_packettype();
  packettype_ = value;
}

// required .Remote.PayloadFormat payloadFormat = 2;
inline bool Packet::has_payloadformat() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Packet::set_has_payloadformat() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Packet::clear_has_payloadformat() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Packet::clear_payloadformat() {
  payloadformat_ = 1;
  clear_has_payloadformat();
}
inline Remote::PayloadFormat Packet::payloadformat() const {
  return static_cast< Remote::PayloadFormat >(payloadformat_);
}
inline void Packet::set_payloadformat(Remote::PayloadFormat value) {
  GOOGLE_DCHECK(Remote::PayloadFormat_IsValid(value));
  set_has_payloadformat();
  payloadformat_ = value;
}

// required uint32 payloadSize = 3;
inline bool Packet::has_payloadsize() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Packet::set_has_payloadsize() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Packet::clear_has_payloadsize() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Packet::clear_payloadsize() {
  payloadsize_ = 0u;
  clear_has_payloadsize();
}
inline ::google::protobuf::uint32 Packet::payloadsize() const {
  return payloadsize_;
}
inline void Packet::set_payloadsize(::google::protobuf::uint32 value) {
  set_has_payloadsize();
  payloadsize_ = value;
}

// optional bytes payloadData = 4;
inline bool Packet::has_payloaddata() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Packet::set_has_payloaddata() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Packet::clear_has_payloaddata() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Packet::clear_payloaddata() {
  if (payloaddata_ != &::google::protobuf::internal::kEmptyString) {
    payloaddata_->clear();
  }
  clear_has_payloaddata();
}
inline const ::std::string& Packet::payloaddata() const {
  return *payloaddata_;
}
inline void Packet::set_payloaddata(const ::std::string& value) {
  set_has_payloaddata();
  if (payloaddata_ == &::google::protobuf::internal::kEmptyString) {
    payloaddata_ = new ::std::string;
  }
  payloaddata_->assign(value);
}
inline void Packet::set_payloaddata(const char* value) {
  set_has_payloaddata();
  if (payloaddata_ == &::google::protobuf::internal::kEmptyString) {
    payloaddata_ = new ::std::string;
  }
  payloaddata_->assign(value);
}
inline void Packet::set_payloaddata(const void* value, size_t size) {
  set_has_payloaddata();
  if (payloaddata_ == &::google::protobuf::internal::kEmptyString) {
    payloaddata_ = new ::std::string;
  }
  payloaddata_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Packet::mutable_payloaddata() {
  set_has_payloaddata();
  if (payloaddata_ == &::google::protobuf::internal::kEmptyString) {
    payloaddata_ = new ::std::string;
  }
  return payloaddata_;
}
inline ::std::string* Packet::release_payloaddata() {
  clear_has_payloaddata();
  if (payloaddata_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = payloaddata_;
    payloaddata_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Remote

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< Remote::PacketType>() {
  return Remote::PacketType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< Remote::PayloadFormat>() {
  return Remote::PayloadFormat_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_common_2eproto__INCLUDED
