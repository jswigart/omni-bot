// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: navmesh.proto

#ifndef PROTOBUF_navmesh_2eproto__INCLUDED
#define PROTOBUF_navmesh_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
#include "google/protobuf/descriptor.pb.h"
// @@protoc_insertion_point(includes)

namespace NavmeshIO {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_navmesh_2eproto();
void protobuf_AssignDesc_navmesh_2eproto();
void protobuf_ShutdownFile_navmesh_2eproto();

class Vec3;
class Header;
class SectorVert;
class MoverEntity;
class SectorData;
class Sector;
class NavigationMesh;

enum Sector_MirrorDir {
  Sector_MirrorDir_MirrorNone = 0,
  Sector_MirrorDir_MirrorX = 1,
  Sector_MirrorDir_MirrorNX = 2,
  Sector_MirrorDir_MirrorY = 3,
  Sector_MirrorDir_MirrorNY = 4,
  Sector_MirrorDir_MirrorZ = 5,
  Sector_MirrorDir_MirrorNZ = 6
};
bool Sector_MirrorDir_IsValid(int value);
const Sector_MirrorDir Sector_MirrorDir_MirrorDir_MIN = Sector_MirrorDir_MirrorNone;
const Sector_MirrorDir Sector_MirrorDir_MirrorDir_MAX = Sector_MirrorDir_MirrorNZ;
const int Sector_MirrorDir_MirrorDir_ARRAYSIZE = Sector_MirrorDir_MirrorDir_MAX + 1;

const ::google::protobuf::EnumDescriptor* Sector_MirrorDir_descriptor();
inline const ::std::string& Sector_MirrorDir_Name(Sector_MirrorDir value) {
  return ::google::protobuf::internal::NameOfEnum(
    Sector_MirrorDir_descriptor(), value);
}
inline bool Sector_MirrorDir_Parse(
    const ::std::string& name, Sector_MirrorDir* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Sector_MirrorDir>(
    Sector_MirrorDir_descriptor(), name, value);
}
// ===================================================================

class Vec3 : public ::google::protobuf::Message {
 public:
  Vec3();
  virtual ~Vec3();
  
  Vec3(const Vec3& from);
  
  inline Vec3& operator=(const Vec3& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Vec3& default_instance();
  
  void Swap(Vec3* other);
  
  // implements Message ----------------------------------------------
  
  Vec3* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Vec3& from);
  void MergeFrom(const Vec3& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional float x = 1;
  inline bool has_x() const;
  inline void clear_x();
  static const int kXFieldNumber = 1;
  inline float x() const;
  inline void set_x(float value);
  
  // optional float y = 2;
  inline bool has_y() const;
  inline void clear_y();
  static const int kYFieldNumber = 2;
  inline float y() const;
  inline void set_y(float value);
  
  // optional float z = 3;
  inline bool has_z() const;
  inline void clear_z();
  static const int kZFieldNumber = 3;
  inline float z() const;
  inline void set_z(float value);
  
  // @@protoc_insertion_point(class_scope:NavmeshIO.Vec3)
 private:
  inline void set_has_x();
  inline void clear_has_x();
  inline void set_has_y();
  inline void clear_has_y();
  inline void set_has_z();
  inline void clear_has_z();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  float x_;
  float y_;
  float z_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_navmesh_2eproto();
  friend void protobuf_AssignDesc_navmesh_2eproto();
  friend void protobuf_ShutdownFile_navmesh_2eproto();
  
  void InitAsDefaultInstance();
  static Vec3* default_instance_;
};
// -------------------------------------------------------------------

class Header : public ::google::protobuf::Message {
 public:
  Header();
  virtual ~Header();
  
  Header(const Header& from);
  
  inline Header& operator=(const Header& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Header& default_instance();
  
  void Swap(Header* other);
  
  // implements Message ----------------------------------------------
  
  Header* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Header& from);
  void MergeFrom(const Header& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional .NavmeshIO.Vec3 mapCenter = 1;
  inline bool has_mapcenter() const;
  inline void clear_mapcenter();
  static const int kMapCenterFieldNumber = 1;
  inline const ::NavmeshIO::Vec3& mapcenter() const;
  inline ::NavmeshIO::Vec3* mutable_mapcenter();
  inline ::NavmeshIO::Vec3* release_mapcenter();
  
  // @@protoc_insertion_point(class_scope:NavmeshIO.Header)
 private:
  inline void set_has_mapcenter();
  inline void clear_has_mapcenter();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::NavmeshIO::Vec3* mapcenter_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_navmesh_2eproto();
  friend void protobuf_AssignDesc_navmesh_2eproto();
  friend void protobuf_ShutdownFile_navmesh_2eproto();
  
  void InitAsDefaultInstance();
  static Header* default_instance_;
};
// -------------------------------------------------------------------

class SectorVert : public ::google::protobuf::Message {
 public:
  SectorVert();
  virtual ~SectorVert();
  
  SectorVert(const SectorVert& from);
  
  inline SectorVert& operator=(const SectorVert& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const SectorVert& default_instance();
  
  void Swap(SectorVert* other);
  
  // implements Message ----------------------------------------------
  
  SectorVert* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SectorVert& from);
  void MergeFrom(const SectorVert& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required .NavmeshIO.Vec3 position = 1;
  inline bool has_position() const;
  inline void clear_position();
  static const int kPositionFieldNumber = 1;
  inline const ::NavmeshIO::Vec3& position() const;
  inline ::NavmeshIO::Vec3* mutable_position();
  inline ::NavmeshIO::Vec3* release_position();
  
  // @@protoc_insertion_point(class_scope:NavmeshIO.SectorVert)
 private:
  inline void set_has_position();
  inline void clear_has_position();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::NavmeshIO::Vec3* position_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_navmesh_2eproto();
  friend void protobuf_AssignDesc_navmesh_2eproto();
  friend void protobuf_ShutdownFile_navmesh_2eproto();
  
  void InitAsDefaultInstance();
  static SectorVert* default_instance_;
};
// -------------------------------------------------------------------

class MoverEntity : public ::google::protobuf::Message {
 public:
  MoverEntity();
  virtual ~MoverEntity();
  
  MoverEntity(const MoverEntity& from);
  
  inline MoverEntity& operator=(const MoverEntity& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const MoverEntity& default_instance();
  
  void Swap(MoverEntity* other);
  
  // implements Message ----------------------------------------------
  
  MoverEntity* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MoverEntity& from);
  void MergeFrom(const MoverEntity& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 id = 1 [default = 0];
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:NavmeshIO.MoverEntity)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_navmesh_2eproto();
  friend void protobuf_AssignDesc_navmesh_2eproto();
  friend void protobuf_ShutdownFile_navmesh_2eproto();
  
  void InitAsDefaultInstance();
  static MoverEntity* default_instance_;
};
// -------------------------------------------------------------------

class SectorData : public ::google::protobuf::Message {
 public:
  SectorData();
  virtual ~SectorData();
  
  SectorData(const SectorData& from);
  
  inline SectorData& operator=(const SectorData& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const SectorData& default_instance();
  
  void Swap(SectorData* other);
  
  // implements Message ----------------------------------------------
  
  SectorData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SectorData& from);
  void MergeFrom(const SectorData& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional bool enabled = 1 [default = true];
  inline bool has_enabled() const;
  inline void clear_enabled();
  static const int kEnabledFieldNumber = 1;
  inline bool enabled() const;
  inline void set_enabled(bool value);
  
  // optional string location = 2;
  inline bool has_location() const;
  inline void clear_location();
  static const int kLocationFieldNumber = 2;
  inline const ::std::string& location() const;
  inline void set_location(const ::std::string& value);
  inline void set_location(const char* value);
  inline void set_location(const char* value, size_t size);
  inline ::std::string* mutable_location();
  inline ::std::string* release_location();
  
  // optional string locationteam1 = 3;
  inline bool has_locationteam1() const;
  inline void clear_locationteam1();
  static const int kLocationteam1FieldNumber = 3;
  inline const ::std::string& locationteam1() const;
  inline void set_locationteam1(const ::std::string& value);
  inline void set_locationteam1(const char* value);
  inline void set_locationteam1(const char* value, size_t size);
  inline ::std::string* mutable_locationteam1();
  inline ::std::string* release_locationteam1();
  
  // optional string locationteam2 = 4;
  inline bool has_locationteam2() const;
  inline void clear_locationteam2();
  static const int kLocationteam2FieldNumber = 4;
  inline const ::std::string& locationteam2() const;
  inline void set_locationteam2(const ::std::string& value);
  inline void set_locationteam2(const char* value);
  inline void set_locationteam2(const char* value, size_t size);
  inline ::std::string* mutable_locationteam2();
  inline ::std::string* release_locationteam2();
  
  // optional string locationteam3 = 5;
  inline bool has_locationteam3() const;
  inline void clear_locationteam3();
  static const int kLocationteam3FieldNumber = 5;
  inline const ::std::string& locationteam3() const;
  inline void set_locationteam3(const ::std::string& value);
  inline void set_locationteam3(const char* value);
  inline void set_locationteam3(const char* value, size_t size);
  inline ::std::string* mutable_locationteam3();
  inline ::std::string* release_locationteam3();
  
  // optional string locationteam4 = 6;
  inline bool has_locationteam4() const;
  inline void clear_locationteam4();
  static const int kLocationteam4FieldNumber = 6;
  inline const ::std::string& locationteam4() const;
  inline void set_locationteam4(const ::std::string& value);
  inline void set_locationteam4(const char* value);
  inline void set_locationteam4(const char* value, size_t size);
  inline ::std::string* mutable_locationteam4();
  inline ::std::string* release_locationteam4();
  
  // optional bool team1 = 7 [default = false];
  inline bool has_team1() const;
  inline void clear_team1();
  static const int kTeam1FieldNumber = 7;
  inline bool team1() const;
  inline void set_team1(bool value);
  
  // optional bool team2 = 8 [default = false];
  inline bool has_team2() const;
  inline void clear_team2();
  static const int kTeam2FieldNumber = 8;
  inline bool team2() const;
  inline void set_team2(bool value);
  
  // optional bool team3 = 9 [default = false];
  inline bool has_team3() const;
  inline void clear_team3();
  static const int kTeam3FieldNumber = 9;
  inline bool team3() const;
  inline void set_team3(bool value);
  
  // optional bool team4 = 10 [default = false];
  inline bool has_team4() const;
  inline void clear_team4();
  static const int kTeam4FieldNumber = 10;
  inline bool team4() const;
  inline void set_team4(bool value);
  
  // optional bool inwater = 11 [default = false];
  inline bool has_inwater() const;
  inline void clear_inwater();
  static const int kInwaterFieldNumber = 11;
  inline bool inwater() const;
  inline void set_inwater(bool value);
  
  // optional bool onmover = 12 [default = false];
  inline bool has_onmover() const;
  inline void clear_onmover();
  static const int kOnmoverFieldNumber = 12;
  inline bool onmover() const;
  inline void set_onmover(bool value);
  
  // optional bool hazard = 13 [default = false];
  inline bool has_hazard() const;
  inline void clear_hazard();
  static const int kHazardFieldNumber = 13;
  inline bool hazard() const;
  inline void set_hazard(bool value);
  
  // optional bool ladder = 14 [default = false];
  inline bool has_ladder() const;
  inline void clear_ladder();
  static const int kLadderFieldNumber = 14;
  inline bool ladder() const;
  inline void set_ladder(bool value);
  
  // optional float waterdepth = 200 [default = 0];
  inline bool has_waterdepth() const;
  inline void clear_waterdepth();
  static const int kWaterdepthFieldNumber = 200;
  inline float waterdepth() const;
  inline void set_waterdepth(float value);
  
  // optional .NavmeshIO.MoverEntity mover = 201;
  inline bool has_mover() const;
  inline void clear_mover();
  static const int kMoverFieldNumber = 201;
  inline const ::NavmeshIO::MoverEntity& mover() const;
  inline ::NavmeshIO::MoverEntity* mutable_mover();
  inline ::NavmeshIO::MoverEntity* release_mover();
  
  // repeated .NavmeshIO.SectorVert localoffsets = 202;
  inline int localoffsets_size() const;
  inline void clear_localoffsets();
  static const int kLocaloffsetsFieldNumber = 202;
  inline const ::NavmeshIO::SectorVert& localoffsets(int index) const;
  inline ::NavmeshIO::SectorVert* mutable_localoffsets(int index);
  inline ::NavmeshIO::SectorVert* add_localoffsets();
  inline const ::google::protobuf::RepeatedPtrField< ::NavmeshIO::SectorVert >&
      localoffsets() const;
  inline ::google::protobuf::RepeatedPtrField< ::NavmeshIO::SectorVert >*
      mutable_localoffsets();
  
  // @@protoc_insertion_point(class_scope:NavmeshIO.SectorData)
 private:
  inline void set_has_enabled();
  inline void clear_has_enabled();
  inline void set_has_location();
  inline void clear_has_location();
  inline void set_has_locationteam1();
  inline void clear_has_locationteam1();
  inline void set_has_locationteam2();
  inline void clear_has_locationteam2();
  inline void set_has_locationteam3();
  inline void clear_has_locationteam3();
  inline void set_has_locationteam4();
  inline void clear_has_locationteam4();
  inline void set_has_team1();
  inline void clear_has_team1();
  inline void set_has_team2();
  inline void clear_has_team2();
  inline void set_has_team3();
  inline void clear_has_team3();
  inline void set_has_team4();
  inline void clear_has_team4();
  inline void set_has_inwater();
  inline void clear_has_inwater();
  inline void set_has_onmover();
  inline void clear_has_onmover();
  inline void set_has_hazard();
  inline void clear_has_hazard();
  inline void set_has_ladder();
  inline void clear_has_ladder();
  inline void set_has_waterdepth();
  inline void clear_has_waterdepth();
  inline void set_has_mover();
  inline void clear_has_mover();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* location_;
  ::std::string* locationteam1_;
  ::std::string* locationteam2_;
  ::std::string* locationteam3_;
  ::std::string* locationteam4_;
  bool enabled_;
  bool team1_;
  bool team2_;
  bool team3_;
  bool team4_;
  bool inwater_;
  bool onmover_;
  bool hazard_;
  bool ladder_;
  float waterdepth_;
  ::NavmeshIO::MoverEntity* mover_;
  ::google::protobuf::RepeatedPtrField< ::NavmeshIO::SectorVert > localoffsets_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(17 + 31) / 32];
  
  friend void  protobuf_AddDesc_navmesh_2eproto();
  friend void protobuf_AssignDesc_navmesh_2eproto();
  friend void protobuf_ShutdownFile_navmesh_2eproto();
  
  void InitAsDefaultInstance();
  static SectorData* default_instance_;
};
// -------------------------------------------------------------------

class Sector : public ::google::protobuf::Message {
 public:
  Sector();
  virtual ~Sector();
  
  Sector(const Sector& from);
  
  inline Sector& operator=(const Sector& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Sector& default_instance();
  
  void Swap(Sector* other);
  
  // implements Message ----------------------------------------------
  
  Sector* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Sector& from);
  void MergeFrom(const Sector& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef Sector_MirrorDir MirrorDir;
  static const MirrorDir MirrorNone = Sector_MirrorDir_MirrorNone;
  static const MirrorDir MirrorX = Sector_MirrorDir_MirrorX;
  static const MirrorDir MirrorNX = Sector_MirrorDir_MirrorNX;
  static const MirrorDir MirrorY = Sector_MirrorDir_MirrorY;
  static const MirrorDir MirrorNY = Sector_MirrorDir_MirrorNY;
  static const MirrorDir MirrorZ = Sector_MirrorDir_MirrorZ;
  static const MirrorDir MirrorNZ = Sector_MirrorDir_MirrorNZ;
  static inline bool MirrorDir_IsValid(int value) {
    return Sector_MirrorDir_IsValid(value);
  }
  static const MirrorDir MirrorDir_MIN =
    Sector_MirrorDir_MirrorDir_MIN;
  static const MirrorDir MirrorDir_MAX =
    Sector_MirrorDir_MirrorDir_MAX;
  static const int MirrorDir_ARRAYSIZE =
    Sector_MirrorDir_MirrorDir_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  MirrorDir_descriptor() {
    return Sector_MirrorDir_descriptor();
  }
  static inline const ::std::string& MirrorDir_Name(MirrorDir value) {
    return Sector_MirrorDir_Name(value);
  }
  static inline bool MirrorDir_Parse(const ::std::string& name,
      MirrorDir* value) {
    return Sector_MirrorDir_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // repeated .NavmeshIO.SectorVert vertices = 1;
  inline int vertices_size() const;
  inline void clear_vertices();
  static const int kVerticesFieldNumber = 1;
  inline const ::NavmeshIO::SectorVert& vertices(int index) const;
  inline ::NavmeshIO::SectorVert* mutable_vertices(int index);
  inline ::NavmeshIO::SectorVert* add_vertices();
  inline const ::google::protobuf::RepeatedPtrField< ::NavmeshIO::SectorVert >&
      vertices() const;
  inline ::google::protobuf::RepeatedPtrField< ::NavmeshIO::SectorVert >*
      mutable_vertices();
  
  // optional .NavmeshIO.Sector.MirrorDir sectorMirrored = 2 [default = MirrorNone];
  inline bool has_sectormirrored() const;
  inline void clear_sectormirrored();
  static const int kSectorMirroredFieldNumber = 2;
  inline ::NavmeshIO::Sector_MirrorDir sectormirrored() const;
  inline void set_sectormirrored(::NavmeshIO::Sector_MirrorDir value);
  
  // optional .NavmeshIO.SectorData sectorData = 3;
  inline bool has_sectordata() const;
  inline void clear_sectordata();
  static const int kSectorDataFieldNumber = 3;
  inline const ::NavmeshIO::SectorData& sectordata() const;
  inline ::NavmeshIO::SectorData* mutable_sectordata();
  inline ::NavmeshIO::SectorData* release_sectordata();
  
  // optional .NavmeshIO.SectorData sectorDataMirrored = 4;
  inline bool has_sectordatamirrored() const;
  inline void clear_sectordatamirrored();
  static const int kSectorDataMirroredFieldNumber = 4;
  inline const ::NavmeshIO::SectorData& sectordatamirrored() const;
  inline ::NavmeshIO::SectorData* mutable_sectordatamirrored();
  inline ::NavmeshIO::SectorData* release_sectordatamirrored();
  
  // @@protoc_insertion_point(class_scope:NavmeshIO.Sector)
 private:
  inline void set_has_sectormirrored();
  inline void clear_has_sectormirrored();
  inline void set_has_sectordata();
  inline void clear_has_sectordata();
  inline void set_has_sectordatamirrored();
  inline void clear_has_sectordatamirrored();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::NavmeshIO::SectorVert > vertices_;
  ::NavmeshIO::SectorData* sectordata_;
  ::NavmeshIO::SectorData* sectordatamirrored_;
  int sectormirrored_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_navmesh_2eproto();
  friend void protobuf_AssignDesc_navmesh_2eproto();
  friend void protobuf_ShutdownFile_navmesh_2eproto();
  
  void InitAsDefaultInstance();
  static Sector* default_instance_;
};
// -------------------------------------------------------------------

class NavigationMesh : public ::google::protobuf::Message {
 public:
  NavigationMesh();
  virtual ~NavigationMesh();
  
  NavigationMesh(const NavigationMesh& from);
  
  inline NavigationMesh& operator=(const NavigationMesh& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const NavigationMesh& default_instance();
  
  void Swap(NavigationMesh* other);
  
  // implements Message ----------------------------------------------
  
  NavigationMesh* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NavigationMesh& from);
  void MergeFrom(const NavigationMesh& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required .NavmeshIO.Header header = 1;
  inline bool has_header() const;
  inline void clear_header();
  static const int kHeaderFieldNumber = 1;
  inline const ::NavmeshIO::Header& header() const;
  inline ::NavmeshIO::Header* mutable_header();
  inline ::NavmeshIO::Header* release_header();
  
  // repeated .NavmeshIO.Sector sectors = 2;
  inline int sectors_size() const;
  inline void clear_sectors();
  static const int kSectorsFieldNumber = 2;
  inline const ::NavmeshIO::Sector& sectors(int index) const;
  inline ::NavmeshIO::Sector* mutable_sectors(int index);
  inline ::NavmeshIO::Sector* add_sectors();
  inline const ::google::protobuf::RepeatedPtrField< ::NavmeshIO::Sector >&
      sectors() const;
  inline ::google::protobuf::RepeatedPtrField< ::NavmeshIO::Sector >*
      mutable_sectors();
  
  // @@protoc_insertion_point(class_scope:NavmeshIO.NavigationMesh)
 private:
  inline void set_has_header();
  inline void clear_has_header();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::NavmeshIO::Header* header_;
  ::google::protobuf::RepeatedPtrField< ::NavmeshIO::Sector > sectors_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_navmesh_2eproto();
  friend void protobuf_AssignDesc_navmesh_2eproto();
  friend void protobuf_ShutdownFile_navmesh_2eproto();
  
  void InitAsDefaultInstance();
  static NavigationMesh* default_instance_;
};
// ===================================================================

static const int kDocFieldNumber = 2000;
extern ::google::protobuf::internal::ExtensionIdentifier< ::google::protobuf::FieldOptions,
    ::google::protobuf::internal::StringTypeTraits, 9, false >
  doc;
static const int kHiddenFieldNumber = 2001;
extern ::google::protobuf::internal::ExtensionIdentifier< ::google::protobuf::FieldOptions,
    ::google::protobuf::internal::PrimitiveTypeTraits< bool >, 8, false >
  hidden;
static const int kSettableFieldNumber = 2002;
extern ::google::protobuf::internal::ExtensionIdentifier< ::google::protobuf::FieldOptions,
    ::google::protobuf::internal::PrimitiveTypeTraits< bool >, 8, false >
  settable;

// ===================================================================

// Vec3

// optional float x = 1;
inline bool Vec3::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Vec3::set_has_x() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Vec3::clear_has_x() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Vec3::clear_x() {
  x_ = 0;
  clear_has_x();
}
inline float Vec3::x() const {
  return x_;
}
inline void Vec3::set_x(float value) {
  set_has_x();
  x_ = value;
}

// optional float y = 2;
inline bool Vec3::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Vec3::set_has_y() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Vec3::clear_has_y() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Vec3::clear_y() {
  y_ = 0;
  clear_has_y();
}
inline float Vec3::y() const {
  return y_;
}
inline void Vec3::set_y(float value) {
  set_has_y();
  y_ = value;
}

// optional float z = 3;
inline bool Vec3::has_z() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Vec3::set_has_z() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Vec3::clear_has_z() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Vec3::clear_z() {
  z_ = 0;
  clear_has_z();
}
inline float Vec3::z() const {
  return z_;
}
inline void Vec3::set_z(float value) {
  set_has_z();
  z_ = value;
}

// -------------------------------------------------------------------

// Header

// optional .NavmeshIO.Vec3 mapCenter = 1;
inline bool Header::has_mapcenter() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Header::set_has_mapcenter() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Header::clear_has_mapcenter() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Header::clear_mapcenter() {
  if (mapcenter_ != NULL) mapcenter_->::NavmeshIO::Vec3::Clear();
  clear_has_mapcenter();
}
inline const ::NavmeshIO::Vec3& Header::mapcenter() const {
  return mapcenter_ != NULL ? *mapcenter_ : *default_instance_->mapcenter_;
}
inline ::NavmeshIO::Vec3* Header::mutable_mapcenter() {
  set_has_mapcenter();
  if (mapcenter_ == NULL) mapcenter_ = new ::NavmeshIO::Vec3;
  return mapcenter_;
}
inline ::NavmeshIO::Vec3* Header::release_mapcenter() {
  clear_has_mapcenter();
  ::NavmeshIO::Vec3* temp = mapcenter_;
  mapcenter_ = NULL;
  return temp;
}

// -------------------------------------------------------------------

// SectorVert

// required .NavmeshIO.Vec3 position = 1;
inline bool SectorVert::has_position() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SectorVert::set_has_position() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SectorVert::clear_has_position() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SectorVert::clear_position() {
  if (position_ != NULL) position_->::NavmeshIO::Vec3::Clear();
  clear_has_position();
}
inline const ::NavmeshIO::Vec3& SectorVert::position() const {
  return position_ != NULL ? *position_ : *default_instance_->position_;
}
inline ::NavmeshIO::Vec3* SectorVert::mutable_position() {
  set_has_position();
  if (position_ == NULL) position_ = new ::NavmeshIO::Vec3;
  return position_;
}
inline ::NavmeshIO::Vec3* SectorVert::release_position() {
  clear_has_position();
  ::NavmeshIO::Vec3* temp = position_;
  position_ = NULL;
  return temp;
}

// -------------------------------------------------------------------

// MoverEntity

// required int32 id = 1 [default = 0];
inline bool MoverEntity::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MoverEntity::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MoverEntity::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MoverEntity::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 MoverEntity::id() const {
  return id_;
}
inline void MoverEntity::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// -------------------------------------------------------------------

// SectorData

// optional bool enabled = 1 [default = true];
inline bool SectorData::has_enabled() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SectorData::set_has_enabled() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SectorData::clear_has_enabled() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SectorData::clear_enabled() {
  enabled_ = true;
  clear_has_enabled();
}
inline bool SectorData::enabled() const {
  return enabled_;
}
inline void SectorData::set_enabled(bool value) {
  set_has_enabled();
  enabled_ = value;
}

// optional string location = 2;
inline bool SectorData::has_location() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SectorData::set_has_location() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SectorData::clear_has_location() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SectorData::clear_location() {
  if (location_ != &::google::protobuf::internal::kEmptyString) {
    location_->clear();
  }
  clear_has_location();
}
inline const ::std::string& SectorData::location() const {
  return *location_;
}
inline void SectorData::set_location(const ::std::string& value) {
  set_has_location();
  if (location_ == &::google::protobuf::internal::kEmptyString) {
    location_ = new ::std::string;
  }
  location_->assign(value);
}
inline void SectorData::set_location(const char* value) {
  set_has_location();
  if (location_ == &::google::protobuf::internal::kEmptyString) {
    location_ = new ::std::string;
  }
  location_->assign(value);
}
inline void SectorData::set_location(const char* value, size_t size) {
  set_has_location();
  if (location_ == &::google::protobuf::internal::kEmptyString) {
    location_ = new ::std::string;
  }
  location_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SectorData::mutable_location() {
  set_has_location();
  if (location_ == &::google::protobuf::internal::kEmptyString) {
    location_ = new ::std::string;
  }
  return location_;
}
inline ::std::string* SectorData::release_location() {
  clear_has_location();
  if (location_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = location_;
    location_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string locationteam1 = 3;
inline bool SectorData::has_locationteam1() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SectorData::set_has_locationteam1() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SectorData::clear_has_locationteam1() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SectorData::clear_locationteam1() {
  if (locationteam1_ != &::google::protobuf::internal::kEmptyString) {
    locationteam1_->clear();
  }
  clear_has_locationteam1();
}
inline const ::std::string& SectorData::locationteam1() const {
  return *locationteam1_;
}
inline void SectorData::set_locationteam1(const ::std::string& value) {
  set_has_locationteam1();
  if (locationteam1_ == &::google::protobuf::internal::kEmptyString) {
    locationteam1_ = new ::std::string;
  }
  locationteam1_->assign(value);
}
inline void SectorData::set_locationteam1(const char* value) {
  set_has_locationteam1();
  if (locationteam1_ == &::google::protobuf::internal::kEmptyString) {
    locationteam1_ = new ::std::string;
  }
  locationteam1_->assign(value);
}
inline void SectorData::set_locationteam1(const char* value, size_t size) {
  set_has_locationteam1();
  if (locationteam1_ == &::google::protobuf::internal::kEmptyString) {
    locationteam1_ = new ::std::string;
  }
  locationteam1_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SectorData::mutable_locationteam1() {
  set_has_locationteam1();
  if (locationteam1_ == &::google::protobuf::internal::kEmptyString) {
    locationteam1_ = new ::std::string;
  }
  return locationteam1_;
}
inline ::std::string* SectorData::release_locationteam1() {
  clear_has_locationteam1();
  if (locationteam1_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = locationteam1_;
    locationteam1_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string locationteam2 = 4;
inline bool SectorData::has_locationteam2() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SectorData::set_has_locationteam2() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SectorData::clear_has_locationteam2() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SectorData::clear_locationteam2() {
  if (locationteam2_ != &::google::protobuf::internal::kEmptyString) {
    locationteam2_->clear();
  }
  clear_has_locationteam2();
}
inline const ::std::string& SectorData::locationteam2() const {
  return *locationteam2_;
}
inline void SectorData::set_locationteam2(const ::std::string& value) {
  set_has_locationteam2();
  if (locationteam2_ == &::google::protobuf::internal::kEmptyString) {
    locationteam2_ = new ::std::string;
  }
  locationteam2_->assign(value);
}
inline void SectorData::set_locationteam2(const char* value) {
  set_has_locationteam2();
  if (locationteam2_ == &::google::protobuf::internal::kEmptyString) {
    locationteam2_ = new ::std::string;
  }
  locationteam2_->assign(value);
}
inline void SectorData::set_locationteam2(const char* value, size_t size) {
  set_has_locationteam2();
  if (locationteam2_ == &::google::protobuf::internal::kEmptyString) {
    locationteam2_ = new ::std::string;
  }
  locationteam2_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SectorData::mutable_locationteam2() {
  set_has_locationteam2();
  if (locationteam2_ == &::google::protobuf::internal::kEmptyString) {
    locationteam2_ = new ::std::string;
  }
  return locationteam2_;
}
inline ::std::string* SectorData::release_locationteam2() {
  clear_has_locationteam2();
  if (locationteam2_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = locationteam2_;
    locationteam2_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string locationteam3 = 5;
inline bool SectorData::has_locationteam3() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SectorData::set_has_locationteam3() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SectorData::clear_has_locationteam3() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SectorData::clear_locationteam3() {
  if (locationteam3_ != &::google::protobuf::internal::kEmptyString) {
    locationteam3_->clear();
  }
  clear_has_locationteam3();
}
inline const ::std::string& SectorData::locationteam3() const {
  return *locationteam3_;
}
inline void SectorData::set_locationteam3(const ::std::string& value) {
  set_has_locationteam3();
  if (locationteam3_ == &::google::protobuf::internal::kEmptyString) {
    locationteam3_ = new ::std::string;
  }
  locationteam3_->assign(value);
}
inline void SectorData::set_locationteam3(const char* value) {
  set_has_locationteam3();
  if (locationteam3_ == &::google::protobuf::internal::kEmptyString) {
    locationteam3_ = new ::std::string;
  }
  locationteam3_->assign(value);
}
inline void SectorData::set_locationteam3(const char* value, size_t size) {
  set_has_locationteam3();
  if (locationteam3_ == &::google::protobuf::internal::kEmptyString) {
    locationteam3_ = new ::std::string;
  }
  locationteam3_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SectorData::mutable_locationteam3() {
  set_has_locationteam3();
  if (locationteam3_ == &::google::protobuf::internal::kEmptyString) {
    locationteam3_ = new ::std::string;
  }
  return locationteam3_;
}
inline ::std::string* SectorData::release_locationteam3() {
  clear_has_locationteam3();
  if (locationteam3_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = locationteam3_;
    locationteam3_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string locationteam4 = 6;
inline bool SectorData::has_locationteam4() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void SectorData::set_has_locationteam4() {
  _has_bits_[0] |= 0x00000020u;
}
inline void SectorData::clear_has_locationteam4() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void SectorData::clear_locationteam4() {
  if (locationteam4_ != &::google::protobuf::internal::kEmptyString) {
    locationteam4_->clear();
  }
  clear_has_locationteam4();
}
inline const ::std::string& SectorData::locationteam4() const {
  return *locationteam4_;
}
inline void SectorData::set_locationteam4(const ::std::string& value) {
  set_has_locationteam4();
  if (locationteam4_ == &::google::protobuf::internal::kEmptyString) {
    locationteam4_ = new ::std::string;
  }
  locationteam4_->assign(value);
}
inline void SectorData::set_locationteam4(const char* value) {
  set_has_locationteam4();
  if (locationteam4_ == &::google::protobuf::internal::kEmptyString) {
    locationteam4_ = new ::std::string;
  }
  locationteam4_->assign(value);
}
inline void SectorData::set_locationteam4(const char* value, size_t size) {
  set_has_locationteam4();
  if (locationteam4_ == &::google::protobuf::internal::kEmptyString) {
    locationteam4_ = new ::std::string;
  }
  locationteam4_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SectorData::mutable_locationteam4() {
  set_has_locationteam4();
  if (locationteam4_ == &::google::protobuf::internal::kEmptyString) {
    locationteam4_ = new ::std::string;
  }
  return locationteam4_;
}
inline ::std::string* SectorData::release_locationteam4() {
  clear_has_locationteam4();
  if (locationteam4_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = locationteam4_;
    locationteam4_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional bool team1 = 7 [default = false];
inline bool SectorData::has_team1() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void SectorData::set_has_team1() {
  _has_bits_[0] |= 0x00000040u;
}
inline void SectorData::clear_has_team1() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void SectorData::clear_team1() {
  team1_ = false;
  clear_has_team1();
}
inline bool SectorData::team1() const {
  return team1_;
}
inline void SectorData::set_team1(bool value) {
  set_has_team1();
  team1_ = value;
}

// optional bool team2 = 8 [default = false];
inline bool SectorData::has_team2() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void SectorData::set_has_team2() {
  _has_bits_[0] |= 0x00000080u;
}
inline void SectorData::clear_has_team2() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void SectorData::clear_team2() {
  team2_ = false;
  clear_has_team2();
}
inline bool SectorData::team2() const {
  return team2_;
}
inline void SectorData::set_team2(bool value) {
  set_has_team2();
  team2_ = value;
}

// optional bool team3 = 9 [default = false];
inline bool SectorData::has_team3() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void SectorData::set_has_team3() {
  _has_bits_[0] |= 0x00000100u;
}
inline void SectorData::clear_has_team3() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void SectorData::clear_team3() {
  team3_ = false;
  clear_has_team3();
}
inline bool SectorData::team3() const {
  return team3_;
}
inline void SectorData::set_team3(bool value) {
  set_has_team3();
  team3_ = value;
}

// optional bool team4 = 10 [default = false];
inline bool SectorData::has_team4() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void SectorData::set_has_team4() {
  _has_bits_[0] |= 0x00000200u;
}
inline void SectorData::clear_has_team4() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void SectorData::clear_team4() {
  team4_ = false;
  clear_has_team4();
}
inline bool SectorData::team4() const {
  return team4_;
}
inline void SectorData::set_team4(bool value) {
  set_has_team4();
  team4_ = value;
}

// optional bool inwater = 11 [default = false];
inline bool SectorData::has_inwater() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void SectorData::set_has_inwater() {
  _has_bits_[0] |= 0x00000400u;
}
inline void SectorData::clear_has_inwater() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void SectorData::clear_inwater() {
  inwater_ = false;
  clear_has_inwater();
}
inline bool SectorData::inwater() const {
  return inwater_;
}
inline void SectorData::set_inwater(bool value) {
  set_has_inwater();
  inwater_ = value;
}

// optional bool onmover = 12 [default = false];
inline bool SectorData::has_onmover() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void SectorData::set_has_onmover() {
  _has_bits_[0] |= 0x00000800u;
}
inline void SectorData::clear_has_onmover() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void SectorData::clear_onmover() {
  onmover_ = false;
  clear_has_onmover();
}
inline bool SectorData::onmover() const {
  return onmover_;
}
inline void SectorData::set_onmover(bool value) {
  set_has_onmover();
  onmover_ = value;
}

// optional bool hazard = 13 [default = false];
inline bool SectorData::has_hazard() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void SectorData::set_has_hazard() {
  _has_bits_[0] |= 0x00001000u;
}
inline void SectorData::clear_has_hazard() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void SectorData::clear_hazard() {
  hazard_ = false;
  clear_has_hazard();
}
inline bool SectorData::hazard() const {
  return hazard_;
}
inline void SectorData::set_hazard(bool value) {
  set_has_hazard();
  hazard_ = value;
}

// optional bool ladder = 14 [default = false];
inline bool SectorData::has_ladder() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void SectorData::set_has_ladder() {
  _has_bits_[0] |= 0x00002000u;
}
inline void SectorData::clear_has_ladder() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void SectorData::clear_ladder() {
  ladder_ = false;
  clear_has_ladder();
}
inline bool SectorData::ladder() const {
  return ladder_;
}
inline void SectorData::set_ladder(bool value) {
  set_has_ladder();
  ladder_ = value;
}

// optional float waterdepth = 200 [default = 0];
inline bool SectorData::has_waterdepth() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void SectorData::set_has_waterdepth() {
  _has_bits_[0] |= 0x00004000u;
}
inline void SectorData::clear_has_waterdepth() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void SectorData::clear_waterdepth() {
  waterdepth_ = 0;
  clear_has_waterdepth();
}
inline float SectorData::waterdepth() const {
  return waterdepth_;
}
inline void SectorData::set_waterdepth(float value) {
  set_has_waterdepth();
  waterdepth_ = value;
}

// optional .NavmeshIO.MoverEntity mover = 201;
inline bool SectorData::has_mover() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void SectorData::set_has_mover() {
  _has_bits_[0] |= 0x00008000u;
}
inline void SectorData::clear_has_mover() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void SectorData::clear_mover() {
  if (mover_ != NULL) mover_->::NavmeshIO::MoverEntity::Clear();
  clear_has_mover();
}
inline const ::NavmeshIO::MoverEntity& SectorData::mover() const {
  return mover_ != NULL ? *mover_ : *default_instance_->mover_;
}
inline ::NavmeshIO::MoverEntity* SectorData::mutable_mover() {
  set_has_mover();
  if (mover_ == NULL) mover_ = new ::NavmeshIO::MoverEntity;
  return mover_;
}
inline ::NavmeshIO::MoverEntity* SectorData::release_mover() {
  clear_has_mover();
  ::NavmeshIO::MoverEntity* temp = mover_;
  mover_ = NULL;
  return temp;
}

// repeated .NavmeshIO.SectorVert localoffsets = 202;
inline int SectorData::localoffsets_size() const {
  return localoffsets_.size();
}
inline void SectorData::clear_localoffsets() {
  localoffsets_.Clear();
}
inline const ::NavmeshIO::SectorVert& SectorData::localoffsets(int index) const {
  return localoffsets_.Get(index);
}
inline ::NavmeshIO::SectorVert* SectorData::mutable_localoffsets(int index) {
  return localoffsets_.Mutable(index);
}
inline ::NavmeshIO::SectorVert* SectorData::add_localoffsets() {
  return localoffsets_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::NavmeshIO::SectorVert >&
SectorData::localoffsets() const {
  return localoffsets_;
}
inline ::google::protobuf::RepeatedPtrField< ::NavmeshIO::SectorVert >*
SectorData::mutable_localoffsets() {
  return &localoffsets_;
}

// -------------------------------------------------------------------

// Sector

// repeated .NavmeshIO.SectorVert vertices = 1;
inline int Sector::vertices_size() const {
  return vertices_.size();
}
inline void Sector::clear_vertices() {
  vertices_.Clear();
}
inline const ::NavmeshIO::SectorVert& Sector::vertices(int index) const {
  return vertices_.Get(index);
}
inline ::NavmeshIO::SectorVert* Sector::mutable_vertices(int index) {
  return vertices_.Mutable(index);
}
inline ::NavmeshIO::SectorVert* Sector::add_vertices() {
  return vertices_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::NavmeshIO::SectorVert >&
Sector::vertices() const {
  return vertices_;
}
inline ::google::protobuf::RepeatedPtrField< ::NavmeshIO::SectorVert >*
Sector::mutable_vertices() {
  return &vertices_;
}

// optional .NavmeshIO.Sector.MirrorDir sectorMirrored = 2 [default = MirrorNone];
inline bool Sector::has_sectormirrored() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Sector::set_has_sectormirrored() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Sector::clear_has_sectormirrored() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Sector::clear_sectormirrored() {
  sectormirrored_ = 0;
  clear_has_sectormirrored();
}
inline ::NavmeshIO::Sector_MirrorDir Sector::sectormirrored() const {
  return static_cast< ::NavmeshIO::Sector_MirrorDir >(sectormirrored_);
}
inline void Sector::set_sectormirrored(::NavmeshIO::Sector_MirrorDir value) {
  GOOGLE_DCHECK(::NavmeshIO::Sector_MirrorDir_IsValid(value));
  set_has_sectormirrored();
  sectormirrored_ = value;
}

// optional .NavmeshIO.SectorData sectorData = 3;
inline bool Sector::has_sectordata() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Sector::set_has_sectordata() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Sector::clear_has_sectordata() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Sector::clear_sectordata() {
  if (sectordata_ != NULL) sectordata_->::NavmeshIO::SectorData::Clear();
  clear_has_sectordata();
}
inline const ::NavmeshIO::SectorData& Sector::sectordata() const {
  return sectordata_ != NULL ? *sectordata_ : *default_instance_->sectordata_;
}
inline ::NavmeshIO::SectorData* Sector::mutable_sectordata() {
  set_has_sectordata();
  if (sectordata_ == NULL) sectordata_ = new ::NavmeshIO::SectorData;
  return sectordata_;
}
inline ::NavmeshIO::SectorData* Sector::release_sectordata() {
  clear_has_sectordata();
  ::NavmeshIO::SectorData* temp = sectordata_;
  sectordata_ = NULL;
  return temp;
}

// optional .NavmeshIO.SectorData sectorDataMirrored = 4;
inline bool Sector::has_sectordatamirrored() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Sector::set_has_sectordatamirrored() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Sector::clear_has_sectordatamirrored() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Sector::clear_sectordatamirrored() {
  if (sectordatamirrored_ != NULL) sectordatamirrored_->::NavmeshIO::SectorData::Clear();
  clear_has_sectordatamirrored();
}
inline const ::NavmeshIO::SectorData& Sector::sectordatamirrored() const {
  return sectordatamirrored_ != NULL ? *sectordatamirrored_ : *default_instance_->sectordatamirrored_;
}
inline ::NavmeshIO::SectorData* Sector::mutable_sectordatamirrored() {
  set_has_sectordatamirrored();
  if (sectordatamirrored_ == NULL) sectordatamirrored_ = new ::NavmeshIO::SectorData;
  return sectordatamirrored_;
}
inline ::NavmeshIO::SectorData* Sector::release_sectordatamirrored() {
  clear_has_sectordatamirrored();
  ::NavmeshIO::SectorData* temp = sectordatamirrored_;
  sectordatamirrored_ = NULL;
  return temp;
}

// -------------------------------------------------------------------

// NavigationMesh

// required .NavmeshIO.Header header = 1;
inline bool NavigationMesh::has_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NavigationMesh::set_has_header() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NavigationMesh::clear_has_header() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NavigationMesh::clear_header() {
  if (header_ != NULL) header_->::NavmeshIO::Header::Clear();
  clear_has_header();
}
inline const ::NavmeshIO::Header& NavigationMesh::header() const {
  return header_ != NULL ? *header_ : *default_instance_->header_;
}
inline ::NavmeshIO::Header* NavigationMesh::mutable_header() {
  set_has_header();
  if (header_ == NULL) header_ = new ::NavmeshIO::Header;
  return header_;
}
inline ::NavmeshIO::Header* NavigationMesh::release_header() {
  clear_has_header();
  ::NavmeshIO::Header* temp = header_;
  header_ = NULL;
  return temp;
}

// repeated .NavmeshIO.Sector sectors = 2;
inline int NavigationMesh::sectors_size() const {
  return sectors_.size();
}
inline void NavigationMesh::clear_sectors() {
  sectors_.Clear();
}
inline const ::NavmeshIO::Sector& NavigationMesh::sectors(int index) const {
  return sectors_.Get(index);
}
inline ::NavmeshIO::Sector* NavigationMesh::mutable_sectors(int index) {
  return sectors_.Mutable(index);
}
inline ::NavmeshIO::Sector* NavigationMesh::add_sectors() {
  return sectors_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::NavmeshIO::Sector >&
NavigationMesh::sectors() const {
  return sectors_;
}
inline ::google::protobuf::RepeatedPtrField< ::NavmeshIO::Sector >*
NavigationMesh::mutable_sectors() {
  return &sectors_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace NavmeshIO

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NavmeshIO::Sector_MirrorDir>() {
  return ::NavmeshIO::Sector_MirrorDir_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_navmesh_2eproto__INCLUDED
