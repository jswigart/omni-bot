// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: floodfill.proto

#ifndef PROTOBUF_floodfill_2eproto__INCLUDED
#define PROTOBUF_floodfill_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace FloodFillIO {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_floodfill_2eproto();
void protobuf_AssignDesc_floodfill_2eproto();
void protobuf_ShutdownFile_floodfill_2eproto();

class Vec3;
class Header;
class NavigationMesh;

// ===================================================================

class Vec3 : public ::google::protobuf::Message {
 public:
  Vec3();
  virtual ~Vec3();

  Vec3(const Vec3& from);

  inline Vec3& operator=(const Vec3& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Vec3& default_instance();

  void Swap(Vec3* other);

  // implements Message ----------------------------------------------

  Vec3* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Vec3& from);
  void MergeFrom(const Vec3& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional float x = 1;
  inline bool has_x() const;
  inline void clear_x();
  static const int kXFieldNumber = 1;
  inline float x() const;
  inline void set_x(float value);

  // optional float y = 2;
  inline bool has_y() const;
  inline void clear_y();
  static const int kYFieldNumber = 2;
  inline float y() const;
  inline void set_y(float value);

  // optional float z = 3;
  inline bool has_z() const;
  inline void clear_z();
  static const int kZFieldNumber = 3;
  inline float z() const;
  inline void set_z(float value);

  // @@protoc_insertion_point(class_scope:FloodFillIO.Vec3)
 private:
  inline void set_has_x();
  inline void clear_has_x();
  inline void set_has_y();
  inline void clear_has_y();
  inline void set_has_z();
  inline void clear_has_z();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  float x_;
  float y_;
  float z_;
  friend void  protobuf_AddDesc_floodfill_2eproto();
  friend void protobuf_AssignDesc_floodfill_2eproto();
  friend void protobuf_ShutdownFile_floodfill_2eproto();

  void InitAsDefaultInstance();
  static Vec3* default_instance_;
};
// -------------------------------------------------------------------

class Header : public ::google::protobuf::Message {
 public:
  Header();
  virtual ~Header();

  Header(const Header& from);

  inline Header& operator=(const Header& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Header& default_instance();

  void Swap(Header* other);

  // implements Message ----------------------------------------------

  Header* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Header& from);
  void MergeFrom(const Header& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .FloodFillIO.Vec3 mapMins = 1;
  inline bool has_mapmins() const;
  inline void clear_mapmins();
  static const int kMapMinsFieldNumber = 1;
  inline const ::FloodFillIO::Vec3& mapmins() const;
  inline ::FloodFillIO::Vec3* mutable_mapmins();
  inline ::FloodFillIO::Vec3* release_mapmins();
  inline void set_allocated_mapmins(::FloodFillIO::Vec3* mapmins);

  // required .FloodFillIO.Vec3 mapMaxs = 2;
  inline bool has_mapmaxs() const;
  inline void clear_mapmaxs();
  static const int kMapMaxsFieldNumber = 2;
  inline const ::FloodFillIO::Vec3& mapmaxs() const;
  inline ::FloodFillIO::Vec3* mutable_mapmaxs();
  inline ::FloodFillIO::Vec3* release_mapmaxs();
  inline void set_allocated_mapmaxs(::FloodFillIO::Vec3* mapmaxs);

  // @@protoc_insertion_point(class_scope:FloodFillIO.Header)
 private:
  inline void set_has_mapmins();
  inline void clear_has_mapmins();
  inline void set_has_mapmaxs();
  inline void clear_has_mapmaxs();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::FloodFillIO::Vec3* mapmins_;
  ::FloodFillIO::Vec3* mapmaxs_;
  friend void  protobuf_AddDesc_floodfill_2eproto();
  friend void protobuf_AssignDesc_floodfill_2eproto();
  friend void protobuf_ShutdownFile_floodfill_2eproto();

  void InitAsDefaultInstance();
  static Header* default_instance_;
};
// -------------------------------------------------------------------

class NavigationMesh : public ::google::protobuf::Message {
 public:
  NavigationMesh();
  virtual ~NavigationMesh();

  NavigationMesh(const NavigationMesh& from);

  inline NavigationMesh& operator=(const NavigationMesh& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NavigationMesh& default_instance();

  void Swap(NavigationMesh* other);

  // implements Message ----------------------------------------------

  NavigationMesh* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NavigationMesh& from);
  void MergeFrom(const NavigationMesh& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .FloodFillIO.Header header = 1;
  inline bool has_header() const;
  inline void clear_header();
  static const int kHeaderFieldNumber = 1;
  inline const ::FloodFillIO::Header& header() const;
  inline ::FloodFillIO::Header* mutable_header();
  inline ::FloodFillIO::Header* release_header();
  inline void set_allocated_header(::FloodFillIO::Header* header);

  // repeated .FloodFillIO.Vec3 seedPoints = 2;
  inline int seedpoints_size() const;
  inline void clear_seedpoints();
  static const int kSeedPointsFieldNumber = 2;
  inline const ::FloodFillIO::Vec3& seedpoints(int index) const;
  inline ::FloodFillIO::Vec3* mutable_seedpoints(int index);
  inline ::FloodFillIO::Vec3* add_seedpoints();
  inline const ::google::protobuf::RepeatedPtrField< ::FloodFillIO::Vec3 >&
      seedpoints() const;
  inline ::google::protobuf::RepeatedPtrField< ::FloodFillIO::Vec3 >*
      mutable_seedpoints();

  // @@protoc_insertion_point(class_scope:FloodFillIO.NavigationMesh)
 private:
  inline void set_has_header();
  inline void clear_has_header();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::FloodFillIO::Header* header_;
  ::google::protobuf::RepeatedPtrField< ::FloodFillIO::Vec3 > seedpoints_;
  friend void  protobuf_AddDesc_floodfill_2eproto();
  friend void protobuf_AssignDesc_floodfill_2eproto();
  friend void protobuf_ShutdownFile_floodfill_2eproto();

  void InitAsDefaultInstance();
  static NavigationMesh* default_instance_;
};
// ===================================================================


// ===================================================================

// Vec3

// optional float x = 1;
inline bool Vec3::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Vec3::set_has_x() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Vec3::clear_has_x() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Vec3::clear_x() {
  x_ = 0;
  clear_has_x();
}
inline float Vec3::x() const {
  // @@protoc_insertion_point(field_get:FloodFillIO.Vec3.x)
  return x_;
}
inline void Vec3::set_x(float value) {
  set_has_x();
  x_ = value;
  // @@protoc_insertion_point(field_set:FloodFillIO.Vec3.x)
}

// optional float y = 2;
inline bool Vec3::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Vec3::set_has_y() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Vec3::clear_has_y() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Vec3::clear_y() {
  y_ = 0;
  clear_has_y();
}
inline float Vec3::y() const {
  // @@protoc_insertion_point(field_get:FloodFillIO.Vec3.y)
  return y_;
}
inline void Vec3::set_y(float value) {
  set_has_y();
  y_ = value;
  // @@protoc_insertion_point(field_set:FloodFillIO.Vec3.y)
}

// optional float z = 3;
inline bool Vec3::has_z() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Vec3::set_has_z() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Vec3::clear_has_z() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Vec3::clear_z() {
  z_ = 0;
  clear_has_z();
}
inline float Vec3::z() const {
  // @@protoc_insertion_point(field_get:FloodFillIO.Vec3.z)
  return z_;
}
inline void Vec3::set_z(float value) {
  set_has_z();
  z_ = value;
  // @@protoc_insertion_point(field_set:FloodFillIO.Vec3.z)
}

// -------------------------------------------------------------------

// Header

// required .FloodFillIO.Vec3 mapMins = 1;
inline bool Header::has_mapmins() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Header::set_has_mapmins() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Header::clear_has_mapmins() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Header::clear_mapmins() {
  if (mapmins_ != NULL) mapmins_->::FloodFillIO::Vec3::Clear();
  clear_has_mapmins();
}
inline const ::FloodFillIO::Vec3& Header::mapmins() const {
  // @@protoc_insertion_point(field_get:FloodFillIO.Header.mapMins)
  return mapmins_ != NULL ? *mapmins_ : *default_instance_->mapmins_;
}
inline ::FloodFillIO::Vec3* Header::mutable_mapmins() {
  set_has_mapmins();
  if (mapmins_ == NULL) mapmins_ = new ::FloodFillIO::Vec3;
  // @@protoc_insertion_point(field_mutable:FloodFillIO.Header.mapMins)
  return mapmins_;
}
inline ::FloodFillIO::Vec3* Header::release_mapmins() {
  clear_has_mapmins();
  ::FloodFillIO::Vec3* temp = mapmins_;
  mapmins_ = NULL;
  return temp;
}
inline void Header::set_allocated_mapmins(::FloodFillIO::Vec3* mapmins) {
  delete mapmins_;
  mapmins_ = mapmins;
  if (mapmins) {
    set_has_mapmins();
  } else {
    clear_has_mapmins();
  }
  // @@protoc_insertion_point(field_set_allocated:FloodFillIO.Header.mapMins)
}

// required .FloodFillIO.Vec3 mapMaxs = 2;
inline bool Header::has_mapmaxs() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Header::set_has_mapmaxs() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Header::clear_has_mapmaxs() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Header::clear_mapmaxs() {
  if (mapmaxs_ != NULL) mapmaxs_->::FloodFillIO::Vec3::Clear();
  clear_has_mapmaxs();
}
inline const ::FloodFillIO::Vec3& Header::mapmaxs() const {
  // @@protoc_insertion_point(field_get:FloodFillIO.Header.mapMaxs)
  return mapmaxs_ != NULL ? *mapmaxs_ : *default_instance_->mapmaxs_;
}
inline ::FloodFillIO::Vec3* Header::mutable_mapmaxs() {
  set_has_mapmaxs();
  if (mapmaxs_ == NULL) mapmaxs_ = new ::FloodFillIO::Vec3;
  // @@protoc_insertion_point(field_mutable:FloodFillIO.Header.mapMaxs)
  return mapmaxs_;
}
inline ::FloodFillIO::Vec3* Header::release_mapmaxs() {
  clear_has_mapmaxs();
  ::FloodFillIO::Vec3* temp = mapmaxs_;
  mapmaxs_ = NULL;
  return temp;
}
inline void Header::set_allocated_mapmaxs(::FloodFillIO::Vec3* mapmaxs) {
  delete mapmaxs_;
  mapmaxs_ = mapmaxs;
  if (mapmaxs) {
    set_has_mapmaxs();
  } else {
    clear_has_mapmaxs();
  }
  // @@protoc_insertion_point(field_set_allocated:FloodFillIO.Header.mapMaxs)
}

// -------------------------------------------------------------------

// NavigationMesh

// required .FloodFillIO.Header header = 1;
inline bool NavigationMesh::has_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NavigationMesh::set_has_header() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NavigationMesh::clear_has_header() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NavigationMesh::clear_header() {
  if (header_ != NULL) header_->::FloodFillIO::Header::Clear();
  clear_has_header();
}
inline const ::FloodFillIO::Header& NavigationMesh::header() const {
  // @@protoc_insertion_point(field_get:FloodFillIO.NavigationMesh.header)
  return header_ != NULL ? *header_ : *default_instance_->header_;
}
inline ::FloodFillIO::Header* NavigationMesh::mutable_header() {
  set_has_header();
  if (header_ == NULL) header_ = new ::FloodFillIO::Header;
  // @@protoc_insertion_point(field_mutable:FloodFillIO.NavigationMesh.header)
  return header_;
}
inline ::FloodFillIO::Header* NavigationMesh::release_header() {
  clear_has_header();
  ::FloodFillIO::Header* temp = header_;
  header_ = NULL;
  return temp;
}
inline void NavigationMesh::set_allocated_header(::FloodFillIO::Header* header) {
  delete header_;
  header_ = header;
  if (header) {
    set_has_header();
  } else {
    clear_has_header();
  }
  // @@protoc_insertion_point(field_set_allocated:FloodFillIO.NavigationMesh.header)
}

// repeated .FloodFillIO.Vec3 seedPoints = 2;
inline int NavigationMesh::seedpoints_size() const {
  return seedpoints_.size();
}
inline void NavigationMesh::clear_seedpoints() {
  seedpoints_.Clear();
}
inline const ::FloodFillIO::Vec3& NavigationMesh::seedpoints(int index) const {
  // @@protoc_insertion_point(field_get:FloodFillIO.NavigationMesh.seedPoints)
  return seedpoints_.Get(index);
}
inline ::FloodFillIO::Vec3* NavigationMesh::mutable_seedpoints(int index) {
  // @@protoc_insertion_point(field_mutable:FloodFillIO.NavigationMesh.seedPoints)
  return seedpoints_.Mutable(index);
}
inline ::FloodFillIO::Vec3* NavigationMesh::add_seedpoints() {
  // @@protoc_insertion_point(field_add:FloodFillIO.NavigationMesh.seedPoints)
  return seedpoints_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::FloodFillIO::Vec3 >&
NavigationMesh::seedpoints() const {
  // @@protoc_insertion_point(field_list:FloodFillIO.NavigationMesh.seedPoints)
  return seedpoints_;
}
inline ::google::protobuf::RepeatedPtrField< ::FloodFillIO::Vec3 >*
NavigationMesh::mutable_seedpoints() {
  // @@protoc_insertion_point(field_mutable_list:FloodFillIO.NavigationMesh.seedPoints)
  return &seedpoints_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace FloodFillIO

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_floodfill_2eproto__INCLUDED
