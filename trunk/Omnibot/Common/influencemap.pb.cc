// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: influencemap.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "influencemap.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace InfluenceMapIO {

namespace {

const ::google::protobuf::Descriptor* Vec3_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Vec3_reflection_ = NULL;
const ::google::protobuf::Descriptor* Header_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Header_reflection_ = NULL;
const ::google::protobuf::Descriptor* Span_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Span_reflection_ = NULL;
const ::google::protobuf::Descriptor* SpanColumn_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SpanColumn_reflection_ = NULL;
const ::google::protobuf::Descriptor* InfluenceMap_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  InfluenceMap_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_influencemap_2eproto() {
  protobuf_AddDesc_influencemap_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "influencemap.proto");
  GOOGLE_CHECK(file != NULL);
  Vec3_descriptor_ = file->message_type(0);
  static const int Vec3_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vec3, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vec3, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vec3, z_),
  };
  Vec3_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Vec3_descriptor_,
      Vec3::default_instance_,
      Vec3_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vec3, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vec3, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Vec3));
  Header_descriptor_ = file->message_type(1);
  static const int Header_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Header, boundsmin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Header, boundsmax_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Header, cellsize_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Header, numcellsx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Header, numcellsy_),
  };
  Header_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Header_descriptor_,
      Header::default_instance_,
      Header_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Header, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Header, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Header));
  Span_descriptor_ = file->message_type(2);
  static const int Span_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Span, min_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Span, max_),
  };
  Span_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Span_descriptor_,
      Span::default_instance_,
      Span_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Span, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Span, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Span));
  SpanColumn_descriptor_ = file->message_type(3);
  static const int SpanColumn_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpanColumn, spans_),
  };
  SpanColumn_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SpanColumn_descriptor_,
      SpanColumn::default_instance_,
      SpanColumn_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpanColumn, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpanColumn, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SpanColumn));
  InfluenceMap_descriptor_ = file->message_type(4);
  static const int InfluenceMap_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InfluenceMap, header_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InfluenceMap, sectors_),
  };
  InfluenceMap_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      InfluenceMap_descriptor_,
      InfluenceMap::default_instance_,
      InfluenceMap_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InfluenceMap, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InfluenceMap, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(InfluenceMap));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_influencemap_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Vec3_descriptor_, &Vec3::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Header_descriptor_, &Header::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Span_descriptor_, &Span::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SpanColumn_descriptor_, &SpanColumn::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    InfluenceMap_descriptor_, &InfluenceMap::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_influencemap_2eproto() {
  delete Vec3::default_instance_;
  delete Vec3_reflection_;
  delete Header::default_instance_;
  delete Header_reflection_;
  delete Span::default_instance_;
  delete Span_reflection_;
  delete SpanColumn::default_instance_;
  delete SpanColumn_reflection_;
  delete InfluenceMap::default_instance_;
  delete InfluenceMap_reflection_;
}

void protobuf_AddDesc_influencemap_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\022influencemap.proto\022\016InfluenceMapIO\"\'\n\004"
    "Vec3\022\t\n\001x\030\001 \001(\002\022\t\n\001y\030\002 \001(\002\022\t\n\001z\030\003 \001(\002\"\222\001"
    "\n\006Header\022\'\n\tboundsMin\030\001 \002(\0132\024.InfluenceM"
    "apIO.Vec3\022\'\n\tboundsMax\030\002 \002(\0132\024.Influence"
    "MapIO.Vec3\022\020\n\010cellSize\030\003 \002(\002\022\021\n\tnumCells"
    "X\030\004 \002(\005\022\021\n\tnumCellsY\030\005 \002(\005\" \n\004Span\022\013\n\003mi"
    "n\030\001 \002(\002\022\013\n\003max\030\002 \002(\002\"1\n\nSpanColumn\022#\n\005sp"
    "ans\030\001 \003(\0132\024.InfluenceMapIO.Span\"c\n\014Influ"
    "enceMap\022&\n\006header\030\001 \002(\0132\026.InfluenceMapIO"
    ".Header\022+\n\007sectors\030\002 \003(\0132\032.InfluenceMapI"
    "O.SpanColumnB\002H\001", 416);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "influencemap.proto", &protobuf_RegisterTypes);
  Vec3::default_instance_ = new Vec3();
  Header::default_instance_ = new Header();
  Span::default_instance_ = new Span();
  SpanColumn::default_instance_ = new SpanColumn();
  InfluenceMap::default_instance_ = new InfluenceMap();
  Vec3::default_instance_->InitAsDefaultInstance();
  Header::default_instance_->InitAsDefaultInstance();
  Span::default_instance_->InitAsDefaultInstance();
  SpanColumn::default_instance_->InitAsDefaultInstance();
  InfluenceMap::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_influencemap_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_influencemap_2eproto {
  StaticDescriptorInitializer_influencemap_2eproto() {
    protobuf_AddDesc_influencemap_2eproto();
  }
} static_descriptor_initializer_influencemap_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int Vec3::kXFieldNumber;
const int Vec3::kYFieldNumber;
const int Vec3::kZFieldNumber;
#endif  // !_MSC_VER

Vec3::Vec3()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:InfluenceMapIO.Vec3)
}

void Vec3::InitAsDefaultInstance() {
}

Vec3::Vec3(const Vec3& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:InfluenceMapIO.Vec3)
}

void Vec3::SharedCtor() {
  _cached_size_ = 0;
  x_ = 0;
  y_ = 0;
  z_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Vec3::~Vec3() {
  // @@protoc_insertion_point(destructor:InfluenceMapIO.Vec3)
  SharedDtor();
}

void Vec3::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Vec3::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Vec3::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Vec3_descriptor_;
}

const Vec3& Vec3::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_influencemap_2eproto();
  return *default_instance_;
}

Vec3* Vec3::default_instance_ = NULL;

Vec3* Vec3::New() const {
  return new Vec3;
}

void Vec3::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Vec3*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(x_, z_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Vec3::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:InfluenceMapIO.Vec3)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float x = 1;
      case 1: {
        if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_y;
        break;
      }

      // optional float y = 2;
      case 2: {
        if (tag == 21) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_z;
        break;
      }

      // optional float z = 3;
      case 3: {
        if (tag == 29) {
         parse_z:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &z_)));
          set_has_z();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:InfluenceMapIO.Vec3)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:InfluenceMapIO.Vec3)
  return false;
#undef DO_
}

void Vec3::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:InfluenceMapIO.Vec3)
  // optional float x = 1;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->x(), output);
  }

  // optional float y = 2;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->y(), output);
  }

  // optional float z = 3;
  if (has_z()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->z(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:InfluenceMapIO.Vec3)
}

::google::protobuf::uint8* Vec3::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:InfluenceMapIO.Vec3)
  // optional float x = 1;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->x(), target);
  }

  // optional float y = 2;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->y(), target);
  }

  // optional float z = 3;
  if (has_z()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->z(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:InfluenceMapIO.Vec3)
  return target;
}

int Vec3::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional float x = 1;
    if (has_x()) {
      total_size += 1 + 4;
    }

    // optional float y = 2;
    if (has_y()) {
      total_size += 1 + 4;
    }

    // optional float z = 3;
    if (has_z()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Vec3::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Vec3* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Vec3*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Vec3::MergeFrom(const Vec3& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
    if (from.has_z()) {
      set_z(from.z());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Vec3::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Vec3::CopyFrom(const Vec3& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Vec3::IsInitialized() const {

  return true;
}

void Vec3::Swap(Vec3* other) {
  if (other != this) {
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(z_, other->z_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Vec3::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Vec3_descriptor_;
  metadata.reflection = Vec3_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Header::kBoundsMinFieldNumber;
const int Header::kBoundsMaxFieldNumber;
const int Header::kCellSizeFieldNumber;
const int Header::kNumCellsXFieldNumber;
const int Header::kNumCellsYFieldNumber;
#endif  // !_MSC_VER

Header::Header()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:InfluenceMapIO.Header)
}

void Header::InitAsDefaultInstance() {
  boundsmin_ = const_cast< ::InfluenceMapIO::Vec3*>(&::InfluenceMapIO::Vec3::default_instance());
  boundsmax_ = const_cast< ::InfluenceMapIO::Vec3*>(&::InfluenceMapIO::Vec3::default_instance());
}

Header::Header(const Header& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:InfluenceMapIO.Header)
}

void Header::SharedCtor() {
  _cached_size_ = 0;
  boundsmin_ = NULL;
  boundsmax_ = NULL;
  cellsize_ = 0;
  numcellsx_ = 0;
  numcellsy_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Header::~Header() {
  // @@protoc_insertion_point(destructor:InfluenceMapIO.Header)
  SharedDtor();
}

void Header::SharedDtor() {
  if (this != default_instance_) {
    delete boundsmin_;
    delete boundsmax_;
  }
}

void Header::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Header::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Header_descriptor_;
}

const Header& Header::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_influencemap_2eproto();
  return *default_instance_;
}

Header* Header::default_instance_ = NULL;

Header* Header::New() const {
  return new Header;
}

void Header::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Header*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(cellsize_, numcellsy_);
    if (has_boundsmin()) {
      if (boundsmin_ != NULL) boundsmin_->::InfluenceMapIO::Vec3::Clear();
    }
    if (has_boundsmax()) {
      if (boundsmax_ != NULL) boundsmax_->::InfluenceMapIO::Vec3::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Header::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:InfluenceMapIO.Header)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .InfluenceMapIO.Vec3 boundsMin = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_boundsmin()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_boundsMax;
        break;
      }

      // required .InfluenceMapIO.Vec3 boundsMax = 2;
      case 2: {
        if (tag == 18) {
         parse_boundsMax:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_boundsmax()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_cellSize;
        break;
      }

      // required float cellSize = 3;
      case 3: {
        if (tag == 29) {
         parse_cellSize:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &cellsize_)));
          set_has_cellsize();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_numCellsX;
        break;
      }

      // required int32 numCellsX = 4;
      case 4: {
        if (tag == 32) {
         parse_numCellsX:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &numcellsx_)));
          set_has_numcellsx();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_numCellsY;
        break;
      }

      // required int32 numCellsY = 5;
      case 5: {
        if (tag == 40) {
         parse_numCellsY:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &numcellsy_)));
          set_has_numcellsy();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:InfluenceMapIO.Header)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:InfluenceMapIO.Header)
  return false;
#undef DO_
}

void Header::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:InfluenceMapIO.Header)
  // required .InfluenceMapIO.Vec3 boundsMin = 1;
  if (has_boundsmin()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->boundsmin(), output);
  }

  // required .InfluenceMapIO.Vec3 boundsMax = 2;
  if (has_boundsmax()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->boundsmax(), output);
  }

  // required float cellSize = 3;
  if (has_cellsize()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->cellsize(), output);
  }

  // required int32 numCellsX = 4;
  if (has_numcellsx()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->numcellsx(), output);
  }

  // required int32 numCellsY = 5;
  if (has_numcellsy()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->numcellsy(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:InfluenceMapIO.Header)
}

::google::protobuf::uint8* Header::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:InfluenceMapIO.Header)
  // required .InfluenceMapIO.Vec3 boundsMin = 1;
  if (has_boundsmin()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->boundsmin(), target);
  }

  // required .InfluenceMapIO.Vec3 boundsMax = 2;
  if (has_boundsmax()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->boundsmax(), target);
  }

  // required float cellSize = 3;
  if (has_cellsize()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->cellsize(), target);
  }

  // required int32 numCellsX = 4;
  if (has_numcellsx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->numcellsx(), target);
  }

  // required int32 numCellsY = 5;
  if (has_numcellsy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->numcellsy(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:InfluenceMapIO.Header)
  return target;
}

int Header::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .InfluenceMapIO.Vec3 boundsMin = 1;
    if (has_boundsmin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->boundsmin());
    }

    // required .InfluenceMapIO.Vec3 boundsMax = 2;
    if (has_boundsmax()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->boundsmax());
    }

    // required float cellSize = 3;
    if (has_cellsize()) {
      total_size += 1 + 4;
    }

    // required int32 numCellsX = 4;
    if (has_numcellsx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->numcellsx());
    }

    // required int32 numCellsY = 5;
    if (has_numcellsy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->numcellsy());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Header::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Header* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Header*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Header::MergeFrom(const Header& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_boundsmin()) {
      mutable_boundsmin()->::InfluenceMapIO::Vec3::MergeFrom(from.boundsmin());
    }
    if (from.has_boundsmax()) {
      mutable_boundsmax()->::InfluenceMapIO::Vec3::MergeFrom(from.boundsmax());
    }
    if (from.has_cellsize()) {
      set_cellsize(from.cellsize());
    }
    if (from.has_numcellsx()) {
      set_numcellsx(from.numcellsx());
    }
    if (from.has_numcellsy()) {
      set_numcellsy(from.numcellsy());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Header::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Header::CopyFrom(const Header& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Header::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void Header::Swap(Header* other) {
  if (other != this) {
    std::swap(boundsmin_, other->boundsmin_);
    std::swap(boundsmax_, other->boundsmax_);
    std::swap(cellsize_, other->cellsize_);
    std::swap(numcellsx_, other->numcellsx_);
    std::swap(numcellsy_, other->numcellsy_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Header::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Header_descriptor_;
  metadata.reflection = Header_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Span::kMinFieldNumber;
const int Span::kMaxFieldNumber;
#endif  // !_MSC_VER

Span::Span()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:InfluenceMapIO.Span)
}

void Span::InitAsDefaultInstance() {
}

Span::Span(const Span& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:InfluenceMapIO.Span)
}

void Span::SharedCtor() {
  _cached_size_ = 0;
  min_ = 0;
  max_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Span::~Span() {
  // @@protoc_insertion_point(destructor:InfluenceMapIO.Span)
  SharedDtor();
}

void Span::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Span::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Span::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Span_descriptor_;
}

const Span& Span::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_influencemap_2eproto();
  return *default_instance_;
}

Span* Span::default_instance_ = NULL;

Span* Span::New() const {
  return new Span;
}

void Span::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Span*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(min_, max_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Span::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:InfluenceMapIO.Span)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float min = 1;
      case 1: {
        if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &min_)));
          set_has_min();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_max;
        break;
      }

      // required float max = 2;
      case 2: {
        if (tag == 21) {
         parse_max:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &max_)));
          set_has_max();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:InfluenceMapIO.Span)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:InfluenceMapIO.Span)
  return false;
#undef DO_
}

void Span::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:InfluenceMapIO.Span)
  // required float min = 1;
  if (has_min()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->min(), output);
  }

  // required float max = 2;
  if (has_max()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->max(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:InfluenceMapIO.Span)
}

::google::protobuf::uint8* Span::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:InfluenceMapIO.Span)
  // required float min = 1;
  if (has_min()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->min(), target);
  }

  // required float max = 2;
  if (has_max()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->max(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:InfluenceMapIO.Span)
  return target;
}

int Span::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required float min = 1;
    if (has_min()) {
      total_size += 1 + 4;
    }

    // required float max = 2;
    if (has_max()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Span::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Span* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Span*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Span::MergeFrom(const Span& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_min()) {
      set_min(from.min());
    }
    if (from.has_max()) {
      set_max(from.max());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Span::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Span::CopyFrom(const Span& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Span::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Span::Swap(Span* other) {
  if (other != this) {
    std::swap(min_, other->min_);
    std::swap(max_, other->max_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Span::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Span_descriptor_;
  metadata.reflection = Span_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SpanColumn::kSpansFieldNumber;
#endif  // !_MSC_VER

SpanColumn::SpanColumn()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:InfluenceMapIO.SpanColumn)
}

void SpanColumn::InitAsDefaultInstance() {
}

SpanColumn::SpanColumn(const SpanColumn& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:InfluenceMapIO.SpanColumn)
}

void SpanColumn::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SpanColumn::~SpanColumn() {
  // @@protoc_insertion_point(destructor:InfluenceMapIO.SpanColumn)
  SharedDtor();
}

void SpanColumn::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SpanColumn::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SpanColumn::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SpanColumn_descriptor_;
}

const SpanColumn& SpanColumn::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_influencemap_2eproto();
  return *default_instance_;
}

SpanColumn* SpanColumn::default_instance_ = NULL;

SpanColumn* SpanColumn::New() const {
  return new SpanColumn;
}

void SpanColumn::Clear() {
  spans_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SpanColumn::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:InfluenceMapIO.SpanColumn)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .InfluenceMapIO.Span spans = 1;
      case 1: {
        if (tag == 10) {
         parse_spans:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_spans()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_spans;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:InfluenceMapIO.SpanColumn)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:InfluenceMapIO.SpanColumn)
  return false;
#undef DO_
}

void SpanColumn::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:InfluenceMapIO.SpanColumn)
  // repeated .InfluenceMapIO.Span spans = 1;
  for (int i = 0; i < this->spans_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->spans(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:InfluenceMapIO.SpanColumn)
}

::google::protobuf::uint8* SpanColumn::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:InfluenceMapIO.SpanColumn)
  // repeated .InfluenceMapIO.Span spans = 1;
  for (int i = 0; i < this->spans_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->spans(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:InfluenceMapIO.SpanColumn)
  return target;
}

int SpanColumn::ByteSize() const {
  int total_size = 0;

  // repeated .InfluenceMapIO.Span spans = 1;
  total_size += 1 * this->spans_size();
  for (int i = 0; i < this->spans_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->spans(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SpanColumn::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SpanColumn* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SpanColumn*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SpanColumn::MergeFrom(const SpanColumn& from) {
  GOOGLE_CHECK_NE(&from, this);
  spans_.MergeFrom(from.spans_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SpanColumn::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SpanColumn::CopyFrom(const SpanColumn& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpanColumn::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->spans())) return false;
  return true;
}

void SpanColumn::Swap(SpanColumn* other) {
  if (other != this) {
    spans_.Swap(&other->spans_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SpanColumn::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SpanColumn_descriptor_;
  metadata.reflection = SpanColumn_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int InfluenceMap::kHeaderFieldNumber;
const int InfluenceMap::kSectorsFieldNumber;
#endif  // !_MSC_VER

InfluenceMap::InfluenceMap()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:InfluenceMapIO.InfluenceMap)
}

void InfluenceMap::InitAsDefaultInstance() {
  header_ = const_cast< ::InfluenceMapIO::Header*>(&::InfluenceMapIO::Header::default_instance());
}

InfluenceMap::InfluenceMap(const InfluenceMap& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:InfluenceMapIO.InfluenceMap)
}

void InfluenceMap::SharedCtor() {
  _cached_size_ = 0;
  header_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

InfluenceMap::~InfluenceMap() {
  // @@protoc_insertion_point(destructor:InfluenceMapIO.InfluenceMap)
  SharedDtor();
}

void InfluenceMap::SharedDtor() {
  if (this != default_instance_) {
    delete header_;
  }
}

void InfluenceMap::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InfluenceMap::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InfluenceMap_descriptor_;
}

const InfluenceMap& InfluenceMap::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_influencemap_2eproto();
  return *default_instance_;
}

InfluenceMap* InfluenceMap::default_instance_ = NULL;

InfluenceMap* InfluenceMap::New() const {
  return new InfluenceMap;
}

void InfluenceMap::Clear() {
  if (has_header()) {
    if (header_ != NULL) header_->::InfluenceMapIO::Header::Clear();
  }
  sectors_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool InfluenceMap::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:InfluenceMapIO.InfluenceMap)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .InfluenceMapIO.Header header = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_sectors;
        break;
      }

      // repeated .InfluenceMapIO.SpanColumn sectors = 2;
      case 2: {
        if (tag == 18) {
         parse_sectors:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_sectors()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_sectors;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:InfluenceMapIO.InfluenceMap)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:InfluenceMapIO.InfluenceMap)
  return false;
#undef DO_
}

void InfluenceMap::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:InfluenceMapIO.InfluenceMap)
  // required .InfluenceMapIO.Header header = 1;
  if (has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->header(), output);
  }

  // repeated .InfluenceMapIO.SpanColumn sectors = 2;
  for (int i = 0; i < this->sectors_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->sectors(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:InfluenceMapIO.InfluenceMap)
}

::google::protobuf::uint8* InfluenceMap::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:InfluenceMapIO.InfluenceMap)
  // required .InfluenceMapIO.Header header = 1;
  if (has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->header(), target);
  }

  // repeated .InfluenceMapIO.SpanColumn sectors = 2;
  for (int i = 0; i < this->sectors_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->sectors(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:InfluenceMapIO.InfluenceMap)
  return target;
}

int InfluenceMap::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .InfluenceMapIO.Header header = 1;
    if (has_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->header());
    }

  }
  // repeated .InfluenceMapIO.SpanColumn sectors = 2;
  total_size += 1 * this->sectors_size();
  for (int i = 0; i < this->sectors_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->sectors(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InfluenceMap::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const InfluenceMap* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const InfluenceMap*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void InfluenceMap::MergeFrom(const InfluenceMap& from) {
  GOOGLE_CHECK_NE(&from, this);
  sectors_.MergeFrom(from.sectors_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_header()) {
      mutable_header()->::InfluenceMapIO::Header::MergeFrom(from.header());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void InfluenceMap::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InfluenceMap::CopyFrom(const InfluenceMap& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InfluenceMap::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_header()) {
    if (!this->header().IsInitialized()) return false;
  }
  if (!::google::protobuf::internal::AllAreInitialized(this->sectors())) return false;
  return true;
}

void InfluenceMap::Swap(InfluenceMap* other) {
  if (other != this) {
    std::swap(header_, other->header_);
    sectors_.Swap(&other->sectors_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata InfluenceMap::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = InfluenceMap_descriptor_;
  metadata.reflection = InfluenceMap_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace InfluenceMapIO

// @@protoc_insertion_point(global_scope)
