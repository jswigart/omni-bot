// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: influencemap.proto

#ifndef PROTOBUF_influencemap_2eproto__INCLUDED
#define PROTOBUF_influencemap_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

namespace InfluenceMapIO {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_influencemap_2eproto();
void protobuf_AssignDesc_influencemap_2eproto();
void protobuf_ShutdownFile_influencemap_2eproto();

class Vec3;
class Header;
class Span;
class SpanColumn;
class InfluenceMap;

// ===================================================================

class Vec3 : public ::google::protobuf::Message {
 public:
  Vec3();
  virtual ~Vec3();
  
  Vec3(const Vec3& from);
  
  inline Vec3& operator=(const Vec3& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Vec3& default_instance();
  
  void Swap(Vec3* other);
  
  // implements Message ----------------------------------------------
  
  Vec3* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Vec3& from);
  void MergeFrom(const Vec3& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional float x = 1;
  inline bool has_x() const;
  inline void clear_x();
  static const int kXFieldNumber = 1;
  inline float x() const;
  inline void set_x(float value);
  
  // optional float y = 2;
  inline bool has_y() const;
  inline void clear_y();
  static const int kYFieldNumber = 2;
  inline float y() const;
  inline void set_y(float value);
  
  // optional float z = 3;
  inline bool has_z() const;
  inline void clear_z();
  static const int kZFieldNumber = 3;
  inline float z() const;
  inline void set_z(float value);
  
  // @@protoc_insertion_point(class_scope:InfluenceMapIO.Vec3)
 private:
  inline void set_has_x();
  inline void clear_has_x();
  inline void set_has_y();
  inline void clear_has_y();
  inline void set_has_z();
  inline void clear_has_z();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  float x_;
  float y_;
  float z_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_influencemap_2eproto();
  friend void protobuf_AssignDesc_influencemap_2eproto();
  friend void protobuf_ShutdownFile_influencemap_2eproto();
  
  void InitAsDefaultInstance();
  static Vec3* default_instance_;
};
// -------------------------------------------------------------------

class Header : public ::google::protobuf::Message {
 public:
  Header();
  virtual ~Header();
  
  Header(const Header& from);
  
  inline Header& operator=(const Header& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Header& default_instance();
  
  void Swap(Header* other);
  
  // implements Message ----------------------------------------------
  
  Header* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Header& from);
  void MergeFrom(const Header& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required .InfluenceMapIO.Vec3 boundsMin = 1;
  inline bool has_boundsmin() const;
  inline void clear_boundsmin();
  static const int kBoundsMinFieldNumber = 1;
  inline const ::InfluenceMapIO::Vec3& boundsmin() const;
  inline ::InfluenceMapIO::Vec3* mutable_boundsmin();
  inline ::InfluenceMapIO::Vec3* release_boundsmin();
  
  // required .InfluenceMapIO.Vec3 boundsMax = 2;
  inline bool has_boundsmax() const;
  inline void clear_boundsmax();
  static const int kBoundsMaxFieldNumber = 2;
  inline const ::InfluenceMapIO::Vec3& boundsmax() const;
  inline ::InfluenceMapIO::Vec3* mutable_boundsmax();
  inline ::InfluenceMapIO::Vec3* release_boundsmax();
  
  // required float cellSize = 3;
  inline bool has_cellsize() const;
  inline void clear_cellsize();
  static const int kCellSizeFieldNumber = 3;
  inline float cellsize() const;
  inline void set_cellsize(float value);
  
  // required int32 numCellsX = 4;
  inline bool has_numcellsx() const;
  inline void clear_numcellsx();
  static const int kNumCellsXFieldNumber = 4;
  inline ::google::protobuf::int32 numcellsx() const;
  inline void set_numcellsx(::google::protobuf::int32 value);
  
  // required int32 numCellsY = 5;
  inline bool has_numcellsy() const;
  inline void clear_numcellsy();
  static const int kNumCellsYFieldNumber = 5;
  inline ::google::protobuf::int32 numcellsy() const;
  inline void set_numcellsy(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:InfluenceMapIO.Header)
 private:
  inline void set_has_boundsmin();
  inline void clear_has_boundsmin();
  inline void set_has_boundsmax();
  inline void clear_has_boundsmax();
  inline void set_has_cellsize();
  inline void clear_has_cellsize();
  inline void set_has_numcellsx();
  inline void clear_has_numcellsx();
  inline void set_has_numcellsy();
  inline void clear_has_numcellsy();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::InfluenceMapIO::Vec3* boundsmin_;
  ::InfluenceMapIO::Vec3* boundsmax_;
  float cellsize_;
  ::google::protobuf::int32 numcellsx_;
  ::google::protobuf::int32 numcellsy_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];
  
  friend void  protobuf_AddDesc_influencemap_2eproto();
  friend void protobuf_AssignDesc_influencemap_2eproto();
  friend void protobuf_ShutdownFile_influencemap_2eproto();
  
  void InitAsDefaultInstance();
  static Header* default_instance_;
};
// -------------------------------------------------------------------

class Span : public ::google::protobuf::Message {
 public:
  Span();
  virtual ~Span();
  
  Span(const Span& from);
  
  inline Span& operator=(const Span& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Span& default_instance();
  
  void Swap(Span* other);
  
  // implements Message ----------------------------------------------
  
  Span* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Span& from);
  void MergeFrom(const Span& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required float min = 1;
  inline bool has_min() const;
  inline void clear_min();
  static const int kMinFieldNumber = 1;
  inline float min() const;
  inline void set_min(float value);
  
  // required float max = 2;
  inline bool has_max() const;
  inline void clear_max();
  static const int kMaxFieldNumber = 2;
  inline float max() const;
  inline void set_max(float value);
  
  // @@protoc_insertion_point(class_scope:InfluenceMapIO.Span)
 private:
  inline void set_has_min();
  inline void clear_has_min();
  inline void set_has_max();
  inline void clear_has_max();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  float min_;
  float max_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_influencemap_2eproto();
  friend void protobuf_AssignDesc_influencemap_2eproto();
  friend void protobuf_ShutdownFile_influencemap_2eproto();
  
  void InitAsDefaultInstance();
  static Span* default_instance_;
};
// -------------------------------------------------------------------

class SpanColumn : public ::google::protobuf::Message {
 public:
  SpanColumn();
  virtual ~SpanColumn();
  
  SpanColumn(const SpanColumn& from);
  
  inline SpanColumn& operator=(const SpanColumn& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const SpanColumn& default_instance();
  
  void Swap(SpanColumn* other);
  
  // implements Message ----------------------------------------------
  
  SpanColumn* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SpanColumn& from);
  void MergeFrom(const SpanColumn& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .InfluenceMapIO.Span spans = 1;
  inline int spans_size() const;
  inline void clear_spans();
  static const int kSpansFieldNumber = 1;
  inline const ::InfluenceMapIO::Span& spans(int index) const;
  inline ::InfluenceMapIO::Span* mutable_spans(int index);
  inline ::InfluenceMapIO::Span* add_spans();
  inline const ::google::protobuf::RepeatedPtrField< ::InfluenceMapIO::Span >&
      spans() const;
  inline ::google::protobuf::RepeatedPtrField< ::InfluenceMapIO::Span >*
      mutable_spans();
  
  // @@protoc_insertion_point(class_scope:InfluenceMapIO.SpanColumn)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::InfluenceMapIO::Span > spans_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_influencemap_2eproto();
  friend void protobuf_AssignDesc_influencemap_2eproto();
  friend void protobuf_ShutdownFile_influencemap_2eproto();
  
  void InitAsDefaultInstance();
  static SpanColumn* default_instance_;
};
// -------------------------------------------------------------------

class InfluenceMap : public ::google::protobuf::Message {
 public:
  InfluenceMap();
  virtual ~InfluenceMap();
  
  InfluenceMap(const InfluenceMap& from);
  
  inline InfluenceMap& operator=(const InfluenceMap& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const InfluenceMap& default_instance();
  
  void Swap(InfluenceMap* other);
  
  // implements Message ----------------------------------------------
  
  InfluenceMap* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const InfluenceMap& from);
  void MergeFrom(const InfluenceMap& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required .InfluenceMapIO.Header header = 1;
  inline bool has_header() const;
  inline void clear_header();
  static const int kHeaderFieldNumber = 1;
  inline const ::InfluenceMapIO::Header& header() const;
  inline ::InfluenceMapIO::Header* mutable_header();
  inline ::InfluenceMapIO::Header* release_header();
  
  // repeated .InfluenceMapIO.SpanColumn sectors = 2;
  inline int sectors_size() const;
  inline void clear_sectors();
  static const int kSectorsFieldNumber = 2;
  inline const ::InfluenceMapIO::SpanColumn& sectors(int index) const;
  inline ::InfluenceMapIO::SpanColumn* mutable_sectors(int index);
  inline ::InfluenceMapIO::SpanColumn* add_sectors();
  inline const ::google::protobuf::RepeatedPtrField< ::InfluenceMapIO::SpanColumn >&
      sectors() const;
  inline ::google::protobuf::RepeatedPtrField< ::InfluenceMapIO::SpanColumn >*
      mutable_sectors();
  
  // @@protoc_insertion_point(class_scope:InfluenceMapIO.InfluenceMap)
 private:
  inline void set_has_header();
  inline void clear_has_header();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::InfluenceMapIO::Header* header_;
  ::google::protobuf::RepeatedPtrField< ::InfluenceMapIO::SpanColumn > sectors_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_influencemap_2eproto();
  friend void protobuf_AssignDesc_influencemap_2eproto();
  friend void protobuf_ShutdownFile_influencemap_2eproto();
  
  void InitAsDefaultInstance();
  static InfluenceMap* default_instance_;
};
// ===================================================================


// ===================================================================

// Vec3

// optional float x = 1;
inline bool Vec3::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Vec3::set_has_x() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Vec3::clear_has_x() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Vec3::clear_x() {
  x_ = 0;
  clear_has_x();
}
inline float Vec3::x() const {
  return x_;
}
inline void Vec3::set_x(float value) {
  set_has_x();
  x_ = value;
}

// optional float y = 2;
inline bool Vec3::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Vec3::set_has_y() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Vec3::clear_has_y() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Vec3::clear_y() {
  y_ = 0;
  clear_has_y();
}
inline float Vec3::y() const {
  return y_;
}
inline void Vec3::set_y(float value) {
  set_has_y();
  y_ = value;
}

// optional float z = 3;
inline bool Vec3::has_z() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Vec3::set_has_z() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Vec3::clear_has_z() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Vec3::clear_z() {
  z_ = 0;
  clear_has_z();
}
inline float Vec3::z() const {
  return z_;
}
inline void Vec3::set_z(float value) {
  set_has_z();
  z_ = value;
}

// -------------------------------------------------------------------

// Header

// required .InfluenceMapIO.Vec3 boundsMin = 1;
inline bool Header::has_boundsmin() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Header::set_has_boundsmin() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Header::clear_has_boundsmin() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Header::clear_boundsmin() {
  if (boundsmin_ != NULL) boundsmin_->::InfluenceMapIO::Vec3::Clear();
  clear_has_boundsmin();
}
inline const ::InfluenceMapIO::Vec3& Header::boundsmin() const {
  return boundsmin_ != NULL ? *boundsmin_ : *default_instance_->boundsmin_;
}
inline ::InfluenceMapIO::Vec3* Header::mutable_boundsmin() {
  set_has_boundsmin();
  if (boundsmin_ == NULL) boundsmin_ = new ::InfluenceMapIO::Vec3;
  return boundsmin_;
}
inline ::InfluenceMapIO::Vec3* Header::release_boundsmin() {
  clear_has_boundsmin();
  ::InfluenceMapIO::Vec3* temp = boundsmin_;
  boundsmin_ = NULL;
  return temp;
}

// required .InfluenceMapIO.Vec3 boundsMax = 2;
inline bool Header::has_boundsmax() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Header::set_has_boundsmax() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Header::clear_has_boundsmax() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Header::clear_boundsmax() {
  if (boundsmax_ != NULL) boundsmax_->::InfluenceMapIO::Vec3::Clear();
  clear_has_boundsmax();
}
inline const ::InfluenceMapIO::Vec3& Header::boundsmax() const {
  return boundsmax_ != NULL ? *boundsmax_ : *default_instance_->boundsmax_;
}
inline ::InfluenceMapIO::Vec3* Header::mutable_boundsmax() {
  set_has_boundsmax();
  if (boundsmax_ == NULL) boundsmax_ = new ::InfluenceMapIO::Vec3;
  return boundsmax_;
}
inline ::InfluenceMapIO::Vec3* Header::release_boundsmax() {
  clear_has_boundsmax();
  ::InfluenceMapIO::Vec3* temp = boundsmax_;
  boundsmax_ = NULL;
  return temp;
}

// required float cellSize = 3;
inline bool Header::has_cellsize() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Header::set_has_cellsize() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Header::clear_has_cellsize() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Header::clear_cellsize() {
  cellsize_ = 0;
  clear_has_cellsize();
}
inline float Header::cellsize() const {
  return cellsize_;
}
inline void Header::set_cellsize(float value) {
  set_has_cellsize();
  cellsize_ = value;
}

// required int32 numCellsX = 4;
inline bool Header::has_numcellsx() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Header::set_has_numcellsx() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Header::clear_has_numcellsx() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Header::clear_numcellsx() {
  numcellsx_ = 0;
  clear_has_numcellsx();
}
inline ::google::protobuf::int32 Header::numcellsx() const {
  return numcellsx_;
}
inline void Header::set_numcellsx(::google::protobuf::int32 value) {
  set_has_numcellsx();
  numcellsx_ = value;
}

// required int32 numCellsY = 5;
inline bool Header::has_numcellsy() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Header::set_has_numcellsy() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Header::clear_has_numcellsy() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Header::clear_numcellsy() {
  numcellsy_ = 0;
  clear_has_numcellsy();
}
inline ::google::protobuf::int32 Header::numcellsy() const {
  return numcellsy_;
}
inline void Header::set_numcellsy(::google::protobuf::int32 value) {
  set_has_numcellsy();
  numcellsy_ = value;
}

// -------------------------------------------------------------------

// Span

// required float min = 1;
inline bool Span::has_min() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Span::set_has_min() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Span::clear_has_min() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Span::clear_min() {
  min_ = 0;
  clear_has_min();
}
inline float Span::min() const {
  return min_;
}
inline void Span::set_min(float value) {
  set_has_min();
  min_ = value;
}

// required float max = 2;
inline bool Span::has_max() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Span::set_has_max() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Span::clear_has_max() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Span::clear_max() {
  max_ = 0;
  clear_has_max();
}
inline float Span::max() const {
  return max_;
}
inline void Span::set_max(float value) {
  set_has_max();
  max_ = value;
}

// -------------------------------------------------------------------

// SpanColumn

// repeated .InfluenceMapIO.Span spans = 1;
inline int SpanColumn::spans_size() const {
  return spans_.size();
}
inline void SpanColumn::clear_spans() {
  spans_.Clear();
}
inline const ::InfluenceMapIO::Span& SpanColumn::spans(int index) const {
  return spans_.Get(index);
}
inline ::InfluenceMapIO::Span* SpanColumn::mutable_spans(int index) {
  return spans_.Mutable(index);
}
inline ::InfluenceMapIO::Span* SpanColumn::add_spans() {
  return spans_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::InfluenceMapIO::Span >&
SpanColumn::spans() const {
  return spans_;
}
inline ::google::protobuf::RepeatedPtrField< ::InfluenceMapIO::Span >*
SpanColumn::mutable_spans() {
  return &spans_;
}

// -------------------------------------------------------------------

// InfluenceMap

// required .InfluenceMapIO.Header header = 1;
inline bool InfluenceMap::has_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void InfluenceMap::set_has_header() {
  _has_bits_[0] |= 0x00000001u;
}
inline void InfluenceMap::clear_has_header() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void InfluenceMap::clear_header() {
  if (header_ != NULL) header_->::InfluenceMapIO::Header::Clear();
  clear_has_header();
}
inline const ::InfluenceMapIO::Header& InfluenceMap::header() const {
  return header_ != NULL ? *header_ : *default_instance_->header_;
}
inline ::InfluenceMapIO::Header* InfluenceMap::mutable_header() {
  set_has_header();
  if (header_ == NULL) header_ = new ::InfluenceMapIO::Header;
  return header_;
}
inline ::InfluenceMapIO::Header* InfluenceMap::release_header() {
  clear_has_header();
  ::InfluenceMapIO::Header* temp = header_;
  header_ = NULL;
  return temp;
}

// repeated .InfluenceMapIO.SpanColumn sectors = 2;
inline int InfluenceMap::sectors_size() const {
  return sectors_.size();
}
inline void InfluenceMap::clear_sectors() {
  sectors_.Clear();
}
inline const ::InfluenceMapIO::SpanColumn& InfluenceMap::sectors(int index) const {
  return sectors_.Get(index);
}
inline ::InfluenceMapIO::SpanColumn* InfluenceMap::mutable_sectors(int index) {
  return sectors_.Mutable(index);
}
inline ::InfluenceMapIO::SpanColumn* InfluenceMap::add_sectors() {
  return sectors_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::InfluenceMapIO::SpanColumn >&
InfluenceMap::sectors() const {
  return sectors_;
}
inline ::google::protobuf::RepeatedPtrField< ::InfluenceMapIO::SpanColumn >*
InfluenceMap::mutable_sectors() {
  return &sectors_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace InfluenceMapIO

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_influencemap_2eproto__INCLUDED
