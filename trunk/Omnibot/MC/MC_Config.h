////////////////////////////////////////////////////////////////////////////////
// 
// $LastChangedBy: drevil $
// $LastChangedDate: 2010-01-18 22:17:46 -0600 (Mon, 18 Jan 2010) $
// $LastChangedRevision: 4597 $
//
// about: WOLF definitions
//
////////////////////////////////////////////////////////////////////////////////

#ifndef __MC_EVENTS_H__
#define __MC_EVENTS_H__

#include "Omni-Bot_Types.h"
#include "Omni-Bot_Events.h"

typedef enum eMC_Version
{
	MC_VERSION_CURRENT = 1,
	MC_VERSION_ALPHA1 = 4,
	MC_VERSION_LATEST,
} MC_Version;

// enumerations: TraceMasks_MC
typedef enum eTraceMasks_MC
{
	// combo masks can be defined separately
	MC_TR_MASK_PHYSGUN		= TR_MASK_SHOT|TR_MASK_GRATE, // physgun cant pull through grates
} TraceMasks_MC;

// enumerations: TF_ButtonFlags
typedef enum eMC_ButtonFlags
{
	MC_BOT_BUTTON_MODULE_FIRST = BOT_BUTTON_FIRSTUSER,

	MC_BOT_BUTTON_MODULE_ATTRITION = MC_BOT_BUTTON_MODULE_FIRST,
	MC_BOT_BUTTON_MODULE_CLOAK,
	MC_BOT_BUTTON_MODULE_DAMAGE_AMPLIFIER,
	MC_BOT_BUTTON_MODULE_ENERGY_BALL,
	MC_BOT_BUTTON_MODULE_FREEZE_GRENADE,
	MC_BOT_BUTTON_MODULE_HEALD,
	MC_BOT_BUTTON_MODULE_INCENDIARY_GRENADE,
	MC_BOT_BUTTON_MODULE_JETPACK,
	MC_BOT_BUTTON_MODULE_LONGJUMP,
	MC_BOT_BUTTON_MODULE_MIRV,
	MC_BOT_BUTTON_MODULE_POISON_SPIT,
	MC_BOT_BUTTON_MODULE_SPAWN_ANTLION,
	MC_BOT_BUTTON_MODULE_SPAWN_ANTLION_WORKER,
	MC_BOT_BUTTON_MODULE_SPAWN_CROW,
	MC_BOT_BUTTON_MODULE_SPAWN_FAST_HEADCRAB,
	MC_BOT_BUTTON_MODULE_SPAWN_FAST_ZOMBIE,
	MC_BOT_BUTTON_MODULE_SPAWN_LASER,
	MC_BOT_BUTTON_MODULE_SPAWN_MAGNETIC_MINE,
	MC_BOT_BUTTON_MODULE_SPAWN_MANHACK,
	MC_BOT_BUTTON_MODULE_SPAWN_TURRET,
	MC_BOT_BUTTON_MODULE_SPAWN_VORTIGAUNT,
	MC_BOT_BUTTON_MODULE_SPAWN_ZOMBIE,
	MC_BOT_BUTTON_MODULE_TELEPORT,
	MC_BOT_BUTTON_MODULE_WEAKEN,

	// must be last active module
	MC_BOT_BUTTON_MODULE_LAST,
} MC_ButtonFlags;

// enumerations: MC_EntityCategory
typedef enum eTF_EntityCategory
{
	MC_ENT_CAT_PHYSPICKUP = ENT_CAT_MAX,
	MC_ENT_CAT_WALLUNIT,

	// THIS MUST BE LAST
	MC_ENT_CAT_MAX,
} MC_EntityCategory;

// typedef: MC_Events
//		Defines the events specific to the ETF game, numbered starting at the end of
//		the global events.
typedef enum eMC_Events
{
	MC_EVENT_BEGIN = EVENT_NUM_EVENTS,
	MC_EVENT_PLAYER_SPREE,
	MC_EVENT_PLAYER_SPREE_END,
	MC_EVENT_SPREEWAR_START,
	MC_EVENT_SPREEWAR_END,
	MC_EVENT_LEVEL_UP,
	MC_EVENT_END
} MC_Events;

// typedef: TF_GameEvents
//		Events that allow the bot to query for information from the game.
typedef enum
{
	MC_MSG_START = GEN_MSG_END,
	MC_MSG_GET_PLAYER_STATS,
	MC_MSG_GET_MODULE_STATS,
	MC_MSG_UPGRADE_MODULE,
	MC_MSG_GET_WEAPON_UPGRADE_STATS,
	MC_MSG_UPGRADE_WEAPON,
	MC_MSG_CAN_PHYSPICKUP,
	MC_MSG_PHYSGUNINFO,
	MC_MSG_CHARGER_STATUS,
	MC_MSG_END
} MC_GameMessage;

// typedef: MC_Weapon
//		The available weapons for this gametype
typedef enum
{
	MC_WP_NONE = INVALID_WEAPON,
	MC_WP_GRAVGUN,
	MC_WP_CROWBAR,
	MC_WP_STUNSTICK,
	MC_WP_PISTOL,
	MC_WP_SMG,
	MC_WP_SHOTGUN,
	MC_WP_SLAM,
	MC_WP_RPG,
	MC_WP_FRAG_GREN,
	MC_WP_MAGNUM357,
	MC_WP_CROSSBOW,
	MC_WP_AR2,
	MC_WP_CAMERA,
	MC_WP_MAX
} MC_Weapon;

// typedef: MC_PlayerClass
//		The available classes for this gametype
typedef enum 
{
	MC_CLASS_NULL = 0,
	MC_CLASS_DEFAULT,
	MC_CLASS_MAX,
	MC_CLASS_ANY = MC_CLASS_MAX,

	MC_CLASSEX_WEAPON,
	MC_CLASSEX_WEAPON_LAST = MC_CLASSEX_WEAPON+MC_WP_MAX,

	MC_CLASSEX_ZOMBIE,
	MC_CLASSEX_ZOMBIE_FAST,
	MC_CLASSEX_ANTLION,
	MC_CLASSEX_ANTLION_WORKER,
	MC_CLASSEX_HEADCRAB,
	MC_CLASSEX_HEADCRAB_FAST,
	MC_CLASSEX_VORTIGAUNT,
	MC_CLASSEX_MANHACK,
	MC_CLASSEX_CROW,

	MC_CLASSEX_PROPBREAKABLE,
	MC_CLASSEX_PROPEXPLOSIVE,

	MC_CLASSEX_HEALTHKIT,
	MC_CLASSEX_HEALTHVIAL,
	MC_CLASSEX_HEALTH_WALLUNIT,
	MC_CLASSEX_ENERGY_WALLUNIT,
	MC_CLASSEX_BATTERY,
	MC_CLASSEX_POWERCUBE,
	MC_CLASSEX_ITEMCRATE,
	MC_CLASSEX_PISTOL_AMMO,
	MC_CLASSEX_LARGE_PISTOL_AMMO,
	MC_CLASSEX_SMG_AMMO,
	MC_CLASSEX_LARGE_SMG_AMMO,
	MC_CLASSEX_AR2_AMMO,
	MC_CLASSEX_LARGE_AR2_AMMO,
	MC_CLASSEX_357_AMMO,
	MC_CLASSEX_LARGE_357_AMMO,
	MC_CLASSEX_CROSSBOW_AMMO,
	MC_CLASSEX_FLARE_AMMO,
	MC_CLASSEX_LARGE_FLARE_AMMO,
	MC_CLASSEX_RPG_AMMO,
	MC_CLASSEX_AR2GREN_AMMO,
	MC_CLASSEX_SNIPER_AMMO,
	MC_CLASSEX_SHOTGUN_AMMO,
	MC_CLASSEX_AR2_ALTFIRE_AMMO,
	MC_CLASSEX_AMMO_CRATE,

	MC_CLASSEX_TRIPMINE,
	MC_CLASSEX_MAGMINE,
	MC_CLASSEX_TURRET,

	MC_NUM_CLASSES
} MC_PlayerClass;

// typedef: MC_Team
//		The available teams for this gametype
typedef enum
{
	MC_TEAM_NONE = OB_TEAM_NONE,
	MC_TEAM_COMBINE,
	MC_TEAM_SCIENCE,
	MC_TEAM_REBELS,
	MC_TEAM_MAX
} MC_Team;

// typedef: MC_Modules
//		The available modules
typedef enum
{
	MC_MODULE_RECHARGE,
	MC_MODULE_VITALITY,
	MC_MODULE_ARMOR_CAPACITY,
	MC_MODULE_AUX_CAPACITY,
	MC_MODULE_SPRINT_SPEED,
	MC_MODULE_BRUTE_FORCE,
	MC_MODULE_START_ARMOR,
	MC_MODULE_CRITICAL_HIT,
	MC_MODULE_REGENERATION,
	MC_MODULE_GHOST,
	MC_MODULE_ARMOR_REGEN,
	MC_MODULE_AMMO_REGEN,
	MC_MODULE_BULLET_RESIST,
	MC_MODULE_PIERCE_RESIST,
	MC_MODULE_IMPACT_RESIST,
	MC_MODULE_ENERGY_RESIST,
	MC_MODULE_SHOCK_RESIST,
	MC_MODULE_POISON_RESIST,
	MC_MODULE_THERMAL_RESIST,
	MC_MODULE_CLOAK,
	MC_MODULE_JETPACK,
	MC_MODULE_TELEPORT,
	MC_MODULE_LONG_JUMP,
	MC_MODULE_PHASE_SHIFT,
	MC_MODULE_ENERGY_BALL,
	MC_MODULE_FLECHETTE,
	MC_MODULE_POISON_GRENADE,
	MC_MODULE_FREEZE_GRENADE,
	MC_MODULE_INCEN_GRENADE,
	MC_MODULE_MIRV,
	MC_MODULE_HEALD,
	MC_MODULE_DAMAGE_AMP,
	MC_MODULE_ATTRITION,
	MC_MODULE_WEAKEN,
	MC_MODULE_PLAGUE,
	MC_MODULE_MIND_ABSORB,
	MC_MODULE_SHOCKWAVE,
	MC_MODULE_LASERS,
	MC_MODULE_TURRET,
	MC_MODULE_MAGMINE,
	MC_MODULE_CROW,
	MC_MODULE_MINION_ZOMBIE,
	MC_MODULE_MINION_FASTZOMBIE,
	MC_MODULE_MINION_ANTLION,
	MC_MODULE_MINION_ANTLION_WORKER,
	MC_MODULE_MINION_FASTHEADCRAB,
	MC_MODULE_MINION_VORTIGAUNT,
	MC_MODULE_MINION_MANHACK,

	MC_MODULE_MAX
} MC_Modules;

// typedef: MC_WeaponUpgrades
//		The available weapon upgrades
typedef enum
{
	MC_UPGRADE_MELEE_DAMAGE,
	MC_UPGRADE_MELEE_SWING,
	MC_UPGRADE_MELEE_RANGE,
	MC_UPGRADE_MELEE_BLEED,
	MC_UPGRADE_MELEE_SILENCER,

	MC_UPGRADE_GRAVGUN_PUNTING,
	MC_UPGRADE_GRAVGUN_SUCTION,
	MC_UPGRADE_GRAVGUN_PICKUPMASS,
	MC_UPGRADE_GRAVGUN_SILENCER,

	MC_UPGRADE_PISTOL_DAMAGE,
	MC_UPGRADE_PISTOL_RECOIL,
	MC_UPGRADE_PISTOL_STUN,
	MC_UPGRADE_PISTOL_SILENCER,

	MC_UPGRADE_357_POWER,
	MC_UPGRADE_357_DOUBLE,
	MC_UPGRADE_357_KNOCKBACK,
	MC_UPGRADE_357_PENETRATION,
	MC_UPGRADE_357_SILENCER,

	MC_UPGRADE_SMG_DAMAGE,
	MC_UPGRADE_SMG_ACCURACY,
	MC_UPGRADE_SMG_CLIP_SIZE,
	MC_UPGRADE_SMG_RADIUS,
	MC_UPGRADE_SMG_RANGE,

	MC_UPGRADE_AR2_EM_TUNING,
	MC_UPGRADE_AR2_SLOWING_ROUNDS,
	MC_UPGRADE_AR2_PENETRATION,
	MC_UPGRADE_AR2_GAUSS_GUN,
	MC_UPGRADE_AR2_ALT_AMMO,
	MC_UPGRADE_AR2_BOUNCES,

	MC_UPGRADE_SHOTGUN_SPREAD,
	MC_UPGRADE_SHOTGUN_PELLETS,
	MC_UPGRADE_SHOTGUN_KNOCKBACK,
	MC_UPGRADE_SHOTGUN_BLAST_CAPS,
	MC_UPGRADE_SHOTGUN_SLUGS,

	MC_UPGRADE_CROSSBOW_TENSION,
	MC_UPGRADE_CROSSBOW_BOUNCES,
	MC_UPGRADE_CROSSBOW_POISON,
	MC_UPGRADE_CROSSBOW_PIERCING,
	MC_UPGRADE_CROSSBOW_SILENCER,

	MC_UPGRADE_RPG_PLATING,
	MC_UPGRADE_RPG_RADIUS,
	MC_UPGRADE_RPG_SPEED,
	MC_UPGRADE_RPG_TOGGLE,
	MC_UPGRADE_RPG_TRAIL,

	MC_UPGRADE_GRENADE_DAMAGE,
	MC_UPGRADE_GRENADE_RADIUS,
	MC_UPGRADE_GRENADE_REFIRE,
	MC_UPGRADE_GRENADE_RANGE,

	MC_UPGRADE_SLAM_DAMAGE,
	MC_UPGRADE_SLAM_RADIUS,
	MC_UPGRADE_SLAM_TRANSPARENCY,

	MC_UPGRADE_MAX
} MC_WeaponUpgrades;


#endif
