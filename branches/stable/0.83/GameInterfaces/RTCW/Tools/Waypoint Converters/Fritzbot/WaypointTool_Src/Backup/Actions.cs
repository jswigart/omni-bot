//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.1.4322.2300
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

namespace WaypointTool {
    using System;
    using System.Data;
    using System.Xml;
    using System.Runtime.Serialization;
    
    
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.ToolboxItem(true)]
    public class Actions : DataSet {
        
        private ActionDataTable tableAction;
        
        public Actions() {
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        protected Actions(SerializationInfo info, StreamingContext context) {
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((strSchema != null)) {
                DataSet ds = new DataSet();
                ds.ReadXmlSchema(new XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["Action"] != null)) {
                    this.Tables.Add(new ActionDataTable(ds.Tables["Action"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.InitClass();
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ActionDataTable Action {
            get {
                return this.tableAction;
            }
        }
        
        public override DataSet Clone() {
            Actions cln = ((Actions)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        protected override void ReadXmlSerializable(XmlReader reader) {
            this.Reset();
            DataSet ds = new DataSet();
            ds.ReadXml(reader);
            if ((ds.Tables["Action"] != null)) {
                this.Tables.Add(new ActionDataTable(ds.Tables["Action"]));
            }
            this.DataSetName = ds.DataSetName;
            this.Prefix = ds.Prefix;
            this.Namespace = ds.Namespace;
            this.Locale = ds.Locale;
            this.CaseSensitive = ds.CaseSensitive;
            this.EnforceConstraints = ds.EnforceConstraints;
            this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
            this.InitVars();
        }
        
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new XmlTextReader(stream), null);
        }
        
        internal void InitVars() {
            this.tableAction = ((ActionDataTable)(this.Tables["Action"]));
            if ((this.tableAction != null)) {
                this.tableAction.InitVars();
            }
        }
        
        private void InitClass() {
            this.DataSetName = "Actions";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/Actions.xsd";
            this.Locale = new System.Globalization.CultureInfo("en-US");
            this.CaseSensitive = false;
            this.EnforceConstraints = true;
            this.tableAction = new ActionDataTable();
            this.Tables.Add(this.tableAction);
        }
        
        private bool ShouldSerializeAction() {
            return false;
        }
        
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        public delegate void ActionRowChangeEventHandler(object sender, ActionRowChangeEvent e);
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ActionDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnID;
            
            private DataColumn columnCloseNode;
            
            private DataColumn columnAllyAction;
            
            private DataColumn columnAxisAction;
            
            private DataColumn columnRadius;
            
            private DataColumn columnGoal;
            
            private DataColumn columnGroup;
            
            private DataColumn columnClass;
            
            private DataColumn columnLinks;
            
            private DataColumn columnProne;
            
            private DataColumn columnActive;
            
            private DataColumn columnEntity;
            
            internal ActionDataTable() : 
                    base("Action") {
                this.InitClass();
            }
            
            internal ActionDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn IDColumn {
                get {
                    return this.columnID;
                }
            }
            
            internal DataColumn CloseNodeColumn {
                get {
                    return this.columnCloseNode;
                }
            }
            
            internal DataColumn AllyActionColumn {
                get {
                    return this.columnAllyAction;
                }
            }
            
            internal DataColumn AxisActionColumn {
                get {
                    return this.columnAxisAction;
                }
            }
            
            internal DataColumn RadiusColumn {
                get {
                    return this.columnRadius;
                }
            }
            
            internal DataColumn GoalColumn {
                get {
                    return this.columnGoal;
                }
            }
            
            internal DataColumn GroupColumn {
                get {
                    return this.columnGroup;
                }
            }
            
            internal DataColumn ClassColumn {
                get {
                    return this.columnClass;
                }
            }
            
            internal DataColumn LinksColumn {
                get {
                    return this.columnLinks;
                }
            }
            
            internal DataColumn ProneColumn {
                get {
                    return this.columnProne;
                }
            }
            
            internal DataColumn ActiveColumn {
                get {
                    return this.columnActive;
                }
            }
            
            internal DataColumn EntityColumn {
                get {
                    return this.columnEntity;
                }
            }
            
            public ActionRow this[int index] {
                get {
                    return ((ActionRow)(this.Rows[index]));
                }
            }
            
            public event ActionRowChangeEventHandler ActionRowChanged;
            
            public event ActionRowChangeEventHandler ActionRowChanging;
            
            public event ActionRowChangeEventHandler ActionRowDeleted;
            
            public event ActionRowChangeEventHandler ActionRowDeleting;
            
            public void AddActionRow(ActionRow row) {
                this.Rows.Add(row);
            }
            
            public ActionRow AddActionRow(string ID, string CloseNode, string AllyAction, string AxisAction, string Radius, string Goal, string Group, string Class, string Links, string Prone, string Active, string Entity) {
                ActionRow rowActionRow = ((ActionRow)(this.NewRow()));
                rowActionRow.ItemArray = new object[] {
                        ID,
                        CloseNode,
                        AllyAction,
                        AxisAction,
                        Radius,
                        Goal,
                        Group,
                        Class,
                        Links,
                        Prone,
                        Active,
                        Entity};
                this.Rows.Add(rowActionRow);
                return rowActionRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                ActionDataTable cln = ((ActionDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new ActionDataTable();
            }
            
            internal void InitVars() {
                this.columnID = this.Columns["ID"];
                this.columnCloseNode = this.Columns["CloseNode"];
                this.columnAllyAction = this.Columns["AllyAction"];
                this.columnAxisAction = this.Columns["AxisAction"];
                this.columnRadius = this.Columns["Radius"];
                this.columnGoal = this.Columns["Goal"];
                this.columnGroup = this.Columns["Group"];
                this.columnClass = this.Columns["Class"];
                this.columnLinks = this.Columns["Links"];
                this.columnProne = this.Columns["Prone"];
                this.columnActive = this.Columns["Active"];
                this.columnEntity = this.Columns["Entity"];
            }
            
            private void InitClass() {
                this.columnID = new DataColumn("ID", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnID);
                this.columnCloseNode = new DataColumn("CloseNode", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCloseNode);
                this.columnAllyAction = new DataColumn("AllyAction", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnAllyAction);
                this.columnAxisAction = new DataColumn("AxisAction", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnAxisAction);
                this.columnRadius = new DataColumn("Radius", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnRadius);
                this.columnGoal = new DataColumn("Goal", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnGoal);
                this.columnGroup = new DataColumn("Group", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnGroup);
                this.columnClass = new DataColumn("Class", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnClass);
                this.columnLinks = new DataColumn("Links", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnLinks);
                this.columnProne = new DataColumn("Prone", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnProne);
                this.columnActive = new DataColumn("Active", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnActive);
                this.columnEntity = new DataColumn("Entity", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnEntity);
            }
            
            public ActionRow NewActionRow() {
                return ((ActionRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new ActionRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(ActionRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ActionRowChanged != null)) {
                    this.ActionRowChanged(this, new ActionRowChangeEvent(((ActionRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ActionRowChanging != null)) {
                    this.ActionRowChanging(this, new ActionRowChangeEvent(((ActionRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ActionRowDeleted != null)) {
                    this.ActionRowDeleted(this, new ActionRowChangeEvent(((ActionRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ActionRowDeleting != null)) {
                    this.ActionRowDeleting(this, new ActionRowChangeEvent(((ActionRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveActionRow(ActionRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ActionRow : DataRow {
            
            private ActionDataTable tableAction;
            
            internal ActionRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableAction = ((ActionDataTable)(this.Table));
            }
            
            public string ID {
                get {
                    try {
                        return ((string)(this[this.tableAction.IDColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAction.IDColumn] = value;
                }
            }
            
            public string CloseNode {
                get {
                    try {
                        return ((string)(this[this.tableAction.CloseNodeColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAction.CloseNodeColumn] = value;
                }
            }
            
            public string AllyAction {
                get {
                    try {
                        return ((string)(this[this.tableAction.AllyActionColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAction.AllyActionColumn] = value;
                }
            }
            
            public string AxisAction {
                get {
                    try {
                        return ((string)(this[this.tableAction.AxisActionColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAction.AxisActionColumn] = value;
                }
            }
            
            public string Radius {
                get {
                    try {
                        return ((string)(this[this.tableAction.RadiusColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAction.RadiusColumn] = value;
                }
            }
            
            public string Goal {
                get {
                    try {
                        return ((string)(this[this.tableAction.GoalColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAction.GoalColumn] = value;
                }
            }
            
            public string Group {
                get {
                    try {
                        return ((string)(this[this.tableAction.GroupColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAction.GroupColumn] = value;
                }
            }
            
            public string Class {
                get {
                    try {
                        return ((string)(this[this.tableAction.ClassColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAction.ClassColumn] = value;
                }
            }
            
            public string Links {
                get {
                    try {
                        return ((string)(this[this.tableAction.LinksColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAction.LinksColumn] = value;
                }
            }
            
            public string Prone {
                get {
                    try {
                        return ((string)(this[this.tableAction.ProneColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAction.ProneColumn] = value;
                }
            }
            
            public string Active {
                get {
                    try {
                        return ((string)(this[this.tableAction.ActiveColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAction.ActiveColumn] = value;
                }
            }
            
            public string Entity {
                get {
                    try {
                        return ((string)(this[this.tableAction.EntityColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAction.EntityColumn] = value;
                }
            }
            
            public bool IsIDNull() {
                return this.IsNull(this.tableAction.IDColumn);
            }
            
            public void SetIDNull() {
                this[this.tableAction.IDColumn] = System.Convert.DBNull;
            }
            
            public bool IsCloseNodeNull() {
                return this.IsNull(this.tableAction.CloseNodeColumn);
            }
            
            public void SetCloseNodeNull() {
                this[this.tableAction.CloseNodeColumn] = System.Convert.DBNull;
            }
            
            public bool IsAllyActionNull() {
                return this.IsNull(this.tableAction.AllyActionColumn);
            }
            
            public void SetAllyActionNull() {
                this[this.tableAction.AllyActionColumn] = System.Convert.DBNull;
            }
            
            public bool IsAxisActionNull() {
                return this.IsNull(this.tableAction.AxisActionColumn);
            }
            
            public void SetAxisActionNull() {
                this[this.tableAction.AxisActionColumn] = System.Convert.DBNull;
            }
            
            public bool IsRadiusNull() {
                return this.IsNull(this.tableAction.RadiusColumn);
            }
            
            public void SetRadiusNull() {
                this[this.tableAction.RadiusColumn] = System.Convert.DBNull;
            }
            
            public bool IsGoalNull() {
                return this.IsNull(this.tableAction.GoalColumn);
            }
            
            public void SetGoalNull() {
                this[this.tableAction.GoalColumn] = System.Convert.DBNull;
            }
            
            public bool IsGroupNull() {
                return this.IsNull(this.tableAction.GroupColumn);
            }
            
            public void SetGroupNull() {
                this[this.tableAction.GroupColumn] = System.Convert.DBNull;
            }
            
            public bool IsClassNull() {
                return this.IsNull(this.tableAction.ClassColumn);
            }
            
            public void SetClassNull() {
                this[this.tableAction.ClassColumn] = System.Convert.DBNull;
            }
            
            public bool IsLinksNull() {
                return this.IsNull(this.tableAction.LinksColumn);
            }
            
            public void SetLinksNull() {
                this[this.tableAction.LinksColumn] = System.Convert.DBNull;
            }
            
            public bool IsProneNull() {
                return this.IsNull(this.tableAction.ProneColumn);
            }
            
            public void SetProneNull() {
                this[this.tableAction.ProneColumn] = System.Convert.DBNull;
            }
            
            public bool IsActiveNull() {
                return this.IsNull(this.tableAction.ActiveColumn);
            }
            
            public void SetActiveNull() {
                this[this.tableAction.ActiveColumn] = System.Convert.DBNull;
            }
            
            public bool IsEntityNull() {
                return this.IsNull(this.tableAction.EntityColumn);
            }
            
            public void SetEntityNull() {
                this[this.tableAction.EntityColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ActionRowChangeEvent : EventArgs {
            
            private ActionRow eventRow;
            
            private DataRowAction eventAction;
            
            public ActionRowChangeEvent(ActionRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public ActionRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
