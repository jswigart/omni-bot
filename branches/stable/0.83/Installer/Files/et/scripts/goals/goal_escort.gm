// This script contains functionality to allow bots to escort vehicles

// These parameters are required
this.Name = "ESCORT";		// The name of the goal.
this.Parent = "HighLevel";		// The name of the parent. This setting determines where in the state tree the goal will reside in.
this.SkipGetPriorityWhenActive = true;
this.Debug = false;

this.Initialize = function()
{
	this.Bot.QueryGoalsTable = table();
};

this.OnSpawn = function()
{
	// don't consider this goal right away, because ET takes a few frame to initialize entities
	// so vehicles will be alive temporarily at the start of the map for a few frames
	this.DelayGetPriority(3);
};

this.GetPriority = function()
{
	while(1)
	{
		count = this.QueryGoals(this.Bot.QueryGoalsTable,0xba7e23b5 /* ESCORT */);
		if ( count > 0 )
		{
			foreach ( id and goal in this.Bot.QueryGoalsTable )
			{
				if ( !goal.Offsets || tableCount(goal.Offsets) < 1 ) {
					goal.DisableGoal(true);
					Util.ScriptDebugPrint(goal.GetName(), "disabled", "no offsets defined!");
					continue;
				}

				if ( !goal.Vehicle ) {
					goal.DisableGoal(true);
					Util.ScriptDebugPrint(goal.GetName(), "disabled", "no vehicle defined!");
					continue;
				}

				this.MapGoal = goal;
				this.Priority = goal.GetGoalPriority(this.Bot);
				break;
			}
		}

		tableClear(this.Bot.QueryGoalsTable);

		sleep(2);
	}
};

this.Enter = function()
{
//	this.Escorting = false; // in route to vehicle
//	this.PainSource = null;
	this.offsetCount = tableCount(this.MapGoal.Offsets);

	if(!this.MarkInProgress(this.MapGoal)) {
		this.BlackboardDelay(5, this.MapGoal);
		this.Finished();
	}

	this.VehicleGoal = GetGoal(this.MapGoal.Vehicle);
	if (!this.VehicleGoal) {
		this.MapGoal.DisableGoal(true);
		Util.ScriptDebugPrint(this.MapGoal.GetName(), "disabled", "invalid vehicle defined!");
		this.Finished();
	}

	this.VehicleEnt = this.VehicleGoal.GetEntity();
	if (!this.VehicleEnt) {
		this.MapGoal.DisableGoal(true);
		Util.ScriptDebugPrint(this.MapGoal.GetName(), "disabled", "no entity for defined vehicle!");
		this.Finished();
	}

	// randomly choose a button
	if (this.MapGoal.Buttons)
	{
		n = tableCount(this.MapGoal.Buttons);
		if(n > 0)
		{
			r = RandInt(0,n-1);
			this.Button = this.MapGoal.Buttons[ r ];
		}
	}
};

//this.Exit = function()
//{
//	this.PainSource = null;
//	this.Escorting = false;
//}

// find an offset that is not in line of site of current pain inflictor
//this.GetCoveredOffset = function()
//{
//	ind = -1;
//	if (!this.PainSource) {
//		return ind;
//	}

//	painSourcePosition = GetEntPosition(this.PainSource) + Vector3(0,0,64);
//	for ( i = 0; i < this.offsetCount; i += 1 )
//	{
//		targetPosition = GetEntityWorldSpace(this.VehicleEnt, this.MapGoal.Offsets[ i ]);
//		tr = TraceLine(painSourcePosition, targetPosition, null, TRACE.SHOT, this.PainSource, false);
//		if ( tr.fraction < 1 )
//		{
//			if ( this.Debug ) {
//				this.Bot.Say("found safe offset position");
//				DrawDebugLine(painSourcePosition, targetPosition, COLOR.GREEN, 30);
//			}

//			this.Bot.HoldButton(BTN.SPRINT, 2.0);

//			fc = 0;
//			while ( fc < 40 ) {
//				// TODO: needs logic to navigate around the vehicle here
//				this.Bot.MoveTowards(GetEntityWorldSpace(this.VehicleEnt, this.MapGoal.Offsets[ i ]), 8, MoveMode.Run);
//				fc += 1;
//			}

//			ind = i;
//			break;
//		}
//	}

//	this.PainSource = null;
//	return ind;
//};

this.Update = function()
{
	x = 0;
	startIndex = 0;
	offsetPos = null;
	pathSuccess = false;

	// randomly select a start index if one isn't defined or invalid
	if ( typeId(this.MapGoal.StartIndex) != 1 || this.MapGoal.StartIndex < 0 || this.MapGoal.StartIndex > this.offsetCount - 1 ) {
		startIndex = RandInt(0, this.offsetCount - 1);
		if ( this.Debug ) { print(this.MapGoal.GetName(), "selected random start index of", startIndex); }
	}
	else {
		startIndex = this.MapGoal.StartIndex;
		if ( this.Debug ) { print(this.MapGoal.GetName(), "user defined start index of", startIndex); }
	}

	// loop through from the start index until we get a good path
	for ( i = 0; i < this.offsetCount; i += 1 )
	{
		ind = startIndex + i;

		// at the end of the list? continue looping from 0 if so
		if ( ind > this.offsetCount - 1 ) {
			ind = 0 + x;
			x += 1;
		}

		// if it's excluded, skip it
		if ( this.MapGoal.ExcludeIndexes && typeId(Util.GetTableKey(this.MapGoal.ExcludeIndexes, ind)) != 0 ) {
			if ( this.Debug ) { print(this.Name, "skipping index", ind); }
			continue;
		}

		// and finally check and see if the bot can get there
		offsetPos = GetEntityWorldSpace(this.VehicleEnt, this.MapGoal.Offsets[ ind ]);
		if ( this.Goto(offsetPos, 32.0) != EVENT.PATH_FAILED ) {
			pathSuccess = true;
			break;
		}
		else {
			if ( this.Debug ) {
				print( this.MapGoal.GetName(), "path failed for index", ind);
			}
		}
	}

	if ( pathSuccess ) {
//		this.Escorting = true;

		if(!this.MarkInUse(this.MapGoal)) {
			this.BlackboardDelay(5, this.MapGoal);
			this.Finished();
		}

		if ( GetEntFlags(this.VehicleEnt, ENTFLAG.DEAD) ) {
			if ( !Map || !Map.InvVehicle || !Map.InvVehicle[ this.VehicleEnt ] ) {
				this.BlackboardDelay(10, this.MapGoal);
				this.Finished();
			}
		}

		deadCheckInterval = 20; // frames
		stuckCheckInterval = 0;
		jumpCounter = 0;
//		res = null;
		while(1)
		{
			// check every second (20 frames) so they can leave if damaged while already escorting
			deadCheckInterval -= 1;
			if ( deadCheckInterval < 1 ) {
				deadCheckInterval = 20;

				if ( GetEntFlags(this.VehicleEnt, ENTFLAG.DEAD) ) {
					if ( !Map || !Map.InvVehicle || !Map.InvVehicle[ this.VehicleEnt ] ) {
						this.BlackboardDelay(10, this.MapGoal);
						this.Finished();
					}
				}
			}

//			// if taking fire, adjust the offset to be used
//			if ( this.PainSource ) {
//				res = this.GetCoveredOffset();
//			}

//			if ( res && res > -1 ) {
//				ind = res;
//			}

			this.GetNewVehicleLookPosition();
			if ( this.Button )
				{ this.Bot.PressButton(this.Button); }

			offsetPos = GetEntityWorldSpace(this.VehicleEnt, this.MapGoal.Offsets[ ind ]);
			if ( offsetPos ) {
				dist = this.Bot.DistanceTo(offsetPos);
				if ( dist < 128 ) {
					this.Bot.MoveTowards(offsetPos, 8, MoveMode.Walk);
					stuckCheckInterval = 0;
				}
				else {
					this.Bot.MoveTowards(offsetPos, 8, MoveMode.Run);
					stuckCheckInterval += 1;
					if ( stuckCheckInterval > 40 ) {
						stuckCheckInterval = 0;
						if (jumpCounter < 2) {
							jumpCounter += 1;
							this.Bot.PressButton(BTN.JUMP);
						} else {
							jumpCounter = 0;
							// repath
							this.ReleaseAimRequest();
							if ( this.Goto(offsetPos) == EVENT.PATH_FAILED ) {
								this.Finished();
							}
						}
					}
				}
			}
			else {
				break;
			}
			yield();
		}
	}
	else {
		this.BlackboardDelay(10, this.MapGoal);
		Util.ScriptDebugPrint(this.MapGoal.GetName(), "pathfailed", "vehicle path failed, check position: " + GetEntPosition(this.VehicleEnt));
	}

	this.Finished();
};

this.GetNewVehicleLookPosition = function()
{
	vehicleVelocity = GetEntVelocity(this.VehicleEnt);

	if(vehicleVelocity && !vehicleVelocity.IsZero())
	{
		this.AddAimRequest(Priority.Low, "facing", vehicleVelocity);
	}
	else
	{
		vehFacing = GetEntFacing( this.VehicleEnt );
		this.AddAimRequest(Priority.Low, "facing", vehFacing);
	}
};

//this.LastFeelPainTime = 0;
//this.Events[EVENT.FEEL_PAIN] = function(Inflictor, PreviousHealth, CurrentHealth)
//{
//	//TODO: add team check
//	if (!this.Escorting || this.offsetCount < 2) {
//		return;
//	}
//
//	time = GetTime();
//	timeBetweenLast = this.LastFeelPainTime;
//	this.LastFeelPainTime = time;
//
//	if ( timeBetweenLast < 2.0 ) {
//		return;
//	}
//
//	this.PainSource = Inflictor;
//};
