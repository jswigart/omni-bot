/****************************************************
Pathing updated and script by **PC** Mateos
Correspondant WAY file size : 66,1�Ko (67�747 octets)
Last Update : 31th October 2010
****************************************************/

global Map =
{
	Debug = 0,
	ShowMovers = false,

	Assault_Ramp_Dyno = 0,
	Command_Post_Dyno = 0,
	Courtyard_MG_Dyno = 0,
	Electric_Floor_Controls_Dyno = 0,
	Generator_Dyno = 0,
	Main_Entrance_Dyno = 0,
	Side_Gate_Dyno = 0,
	Truck_Barrier_Dyno = 0,

	TruckStatus = 0,	//Not Damaged
	MainEntranceStatus = 0,

	Ammo_Cabinet_alliedammorack = "AMMOCAB_alliedammorack",
	Ammo_Cabinet_ammorack1 = "AMMOCAB_ammorack1",
	Ammo_Cabinet_ammorack2 = "AMMOCAB_ammorack2",
	Health_Cabinet_alliedhealthrack = "HEALTHCAB_alliedhealthrack",
	Health_Cabinet_healthrack1 = "HEALTHCAB_healthrack1",
	Health_Cabinet_kitchenhealthrack = "HEALTHCAB_kitchenhealthrack",

	Checkpoint_courtyardflag = "CHECKPOINT_courtyardflag",
	Flag_radarpart = "FLAG_radarpart",
	Cappoint_Truck = "CAPPOINT_Truck",

	Build_Assault_Ramp = "BUILD_Assault_Ramp",
	Build_Command_Post = "BUILD_Command_Post",
	Build_Courtyard_MG = "BUILD_Courtyard_MG",
	Build_Electric_Floor_Controls = "BUILD_Electric_Floor_Controls",
	Build_Side_Gate = "BUILD_Side_Gate",
	Build_Truck = "BUILD_Truck",
	Build_Truck_Barrier = "BUILD_Truck_Barrier",
	Plant_Assault_Ramp = "PLANT_Assault_Ramp",
	Plant_Command_Post = "PLANT_Command_Post",
	Plant_Courtyard_MG = "PLANT_Courtyard_MG",
	Plant_Electric_Floor_Controls = "PLANT_Electric_Floor_Controls",
	Plant_Generator = "PLANT_Generator",
	Plant_Main_Entrance = "PLANT_Main_Entrance",
	Plant_Side_Gate = "PLANT_Side_Gate",
	Plant_Truck_Barrier = "PLANT_Truck_Barrier",

	Mount_240 = "MOUNTMG42_240",
	Mount_Courtyard_MG = "MOUNTMG42_Courtyard_MG",
	Repair_240 = "REPAIRMG42_240",
	Repair_Courtyard_MG = "REPAIRMG42_Courtyard_MG",
	Mobile_MG42_AxisBunker1 = "MOBILEMG42_AxisBunker1",
	Mobile_MG42_AxisBunker2 = "MOBILEMG42_AxisBunker2",
	Mobile_MG42_AxisIn1 = "MOBILEMG42_AxisIn1",
	Mobile_MG42_AxisIn2 = "MOBILEMG42_AxisIn2",
	Mobile_MG42_AxisOut1 = "MOBILEMG42_AxisOut1",
	Mobile_MG42_AxisOut2 = "MOBILEMG42_AxisOut2",
	Mobile_MG42_AxisOut3 = "MOBILEMG42_AxisOut3",
	Snipe_AlliedHood = "SNIPE_AlliedHood",
	Snipe_AlliedHood2 = "SNIPE_AlliedHood2",
	Snipe_AxisEnd = "SNIPE_AxisEnd",
	Snipe_AxisHood = "SNIPE_AxisHood",
	Snipe_CastleFrontLeft = "SNIPE_CastleFrontLeft",
	Snipe_CastleFrontRight = "SNIPE_CastleFrontRight",
	Snipe_CastleLeft = "SNIPE_CastleLeft",
	Snipe_MainDoor = "SNIPE_MainDoor",

	Mover_truck = "MOVER_truck",

	/*Switches =
	{
		e1_top1 =
		{
			Enabled = false,
			Priority = 0.0,
			WaypointName = "e1_top1",
			Timeout = 8000,

			Wait = function()
			{
				if ( Map.Elevator1Pos == "top" )
				{
					sleep(1);
					return true;
				}
				return false;
			},
		},
		e1_top2 =
		{
			Enabled = true,
			Priority = 0.0,
			WaypointName = "e1_top2",
			Timeout = 8000,

			Wait = function()
			{
				if ( Map.Elevator1Pos == "bottom" )
				{
					sleep(1);
					return true;
				}
				return false;
			},
		},
		e1_bot1 =
		{
			Enabled = true,
			Priority = 0.0,
			WaypointName = "e1_bot1",
			Timeout = 8000,

			Wait = function()
			{
				if ( Map.Elevator1Pos == "bottom" )
				{
					sleep(1);
					return true;
				}
				return false;
			},
		},
		e1_bot2 =
		{
			Enabled = false,
			Priority = 0.0,
			WaypointName = "e1_bot2",
			Timeout = 8000,

			Wait = function()
			{
				if ( Map.Elevator1Pos == "top" )
				{
					sleep(1);
					return true;
				}
				return false;
			},
		},
	},

	Elevator1Pos = "top",
	Elevator1 = function(trigger)
	{
		Map.Elevator1Pos = "moving";
		Util.MapDebugPrint("Elevator1 moving");

		Map.Switches.e1_top1.Enabled = false;
		Map.Switches.e1_top2.Enabled = false;
		Map.Switches.e1_bot1.Enabled = false;
		Map.Switches.e1_bot2.Enabled = false;

		sleep(7);

		vel = ToVector(trigger.Action);

		if (vel.z < 0)
		{
			Map.Elevator1Pos = "bottom";
			Map.Switches.e1_top1.Enabled = true;
			Map.Switches.e1_bot2.Enabled = true;
			Util.MapDebugPrint("Elevator1 at bottom");
		}
		else
		{
			Map.Elevator1Pos = "top";
			Map.Switches.e1_bot1.Enabled = true;
			Map.Switches.e1_top2.Enabled = true;
			Util.MapDebugPrint("Elevator1 at top");
		}
	},*/

	Assault_Ramp_Built = function( trigger )
	{
		if ( TestMap )
			{ return; }

		Groups.EnableAxis(Groups.group3);
		SetAvailableMapGoals( TEAM.AXIS, true, Map.Plant_Assault_Ramp );

		SetAvailableMapGoals( TEAM.ALLIES, true, Map.Checkpoint_courtyardflag );

		Util.MapDebugPrint( "Assault_Ramp_Built" );
	},

	Command_Post_Built = function( trigger )
	{
		if ( TestMap )
			{ return; }

		Util.MapDebugPrint( "Command_Post_Built" );
	},

	Courtyard_MG_Built = function( trigger )
	{
		if ( TestMap )
			{ return; }

		Util.MapDebugPrint( "Courtyard_MG_Built" );
	},

	Electric_Floor_Controls_Built = function( trigger )
	{
		if ( TestMap )
			{ return; }

		Util.MapDebugPrint( "Electric_Floor_Controls_Built" );
	},

	Side_Gate_Built = function( trigger )
	{
		if ( TestMap )
			{ return; }

		Util.MapDebugPrint( "Side_Gate_Built" );
	},

	Truck_Built = function( trigger )
	{
		if ( TestMap )
			{ return; }

		Map.TruckStatus = 0;		//Not Damaged

		Util.MapDebugPrint( "Truck_Built" );
	},

	Truck_Destroyed = function( trigger )
	{
		if ( TestMap )
			{ return; }

		Map.TruckStatus = 1;		//Damaged

		Util.MapDebugPrint( "Truck_Destroyed" );
	},

	Truck_Barrier_Built = function( trigger )
	{
		if ( TestMap )
			{ return; }

		Util.MapDebugPrint( "Truck_Barrier_Built" );
	},

	Assault_Ramp_Planted = function( trigger )
	{
		if ( TestMap )
			{ return; }

		Map.Assault_Ramp_Dyno += 1;
		SetAvailableMapGoals( TEAM.AXIS, false, Map.Plant_Assault_Ramp );

		Util.MapDebugPrint( "Assault_Ramp_Planted" );
	},

	Command_Post_Planted = function( trigger )
	{
		if ( TestMap )
			{ return; }

		Map.Command_Post_Dyno += 1;
		SetAvailableMapGoals( TEAM.AXIS, false, Map.Plant_Command_Post );

		// CHECK! Is this a valid goal for both teams?
		SetAvailableMapGoals( TEAM.ALLIES, false, Map.Plant_Command_Post );

		Util.MapDebugPrint( "Command_Post_Planted" );
	},

	Courtyard_MG_Planted = function( trigger )
	{
		if ( TestMap )
			{ return; }

		Map.Courtyard_MG_Dyno += 1;
		SetAvailableMapGoals( TEAM.ALLIES, false, Map.Plant_Courtyard_MG );

		Util.MapDebugPrint( "Courtyard_MG_Planted" );
	},

	Electric_Floor_Controls_Planted = function( trigger )
	{
		if ( TestMap )
			{ return; }

		Map.Electric_Floor_Controls_Dyno += 1;
		SetAvailableMapGoals( TEAM.ALLIES, false, Map.Plant_Electric_Floor_Controls );

		Util.MapDebugPrint( "Electric_Floor_Controls_Planted" );
	},

	Generator_Planted = function( trigger )
	{
		if ( TestMap )
			{ return; }

		Map.Generator_Dyno += 1;
		SetAvailableMapGoals( TEAM.ALLIES, true, "ATTACK_Dyna.*" );
		SetAvailableMapGoals( TEAM.ALLIES, false, Map.Plant_Generator );

		Util.MapDebugPrint( "Generator_Planted" );
	},

	Main_Entrance_Planted = function( trigger )
	{
		if ( TestMap )
			{ return; }

		Map.Main_Entrance_Dyno += 1;
		SetAvailableMapGoals( TEAM.ALLIES, false, Map.Plant_Main_Entrance );

		Util.MapDebugPrint( "Main_Entrance_Planted" );
	},

	Side_Gate_Planted = function( trigger )
	{
		if ( TestMap )
			{ return; }

		Map.Side_Gate_Dyno += 1;
		SetAvailableMapGoals( TEAM.ALLIES, false, Map.Plant_Side_Gate );

		Util.MapDebugPrint( "Side_Gate_Planted" );
	},

	Truck_Barrier_Planted = function( trigger )
	{
		if ( TestMap )
			{ return; }

		Map.Truck_Barrier_Dyno += 1;
		SetAvailableMapGoals( TEAM.ALLIES, false, Map.Plant_Truck_Barrier );

		Util.MapDebugPrint( "Truck_Barrier_Planted" );
	},

	Assault_Ramp_Defused = function( trigger )
	{
		if ( TestMap )
			{ return; }

		Map.Assault_Ramp_Dyno -= 1;
		if ( Map.Assault_Ramp_Dyno < 1 )
			{ SetAvailableMapGoals( TEAM.AXIS, true, Map.Plant_Assault_Ramp ); }

		Util.MapDebugPrint( "Assault_Ramp_Defused" );
	},

	Command_Post_Defused = function( trigger )
	{
		if ( TestMap )
			{ return; }

		Map.Command_Post_Dyno -= 1;
		if ( Map.Command_Post_Dyno < 1 )
			{ SetAvailableMapGoals( TEAM.AXIS, true, Map.Plant_Command_Post ); }

		// CHECK! Is this a valid goal for both teams?
		if ( Map.Command_Post_Dyno < 1 )
			{ SetAvailableMapGoals( TEAM.ALLIES, true, Map.Plant_Command_Post ); }

		Util.MapDebugPrint( "Command_Post_Defused" );
	},

	Courtyard_MG_Defused = function( trigger )
	{
		if ( TestMap )
			{ return; }

		Map.Courtyard_MG_Dyno -= 1;
		if ( Map.Courtyard_MG_Dyno < 1 )
			{ SetAvailableMapGoals( TEAM.ALLIES, true, Map.Plant_Courtyard_MG ); }

		Util.MapDebugPrint( "Courtyard_MG_Defused" );
	},

	Electric_Floor_Controls_Defused = function( trigger )
	{
		if ( TestMap )
			{ return; }

		Map.Electric_Floor_Controls_Dyno -= 1;
		if ( Map.Electric_Floor_Controls_Dyno < 1 )
			{ SetAvailableMapGoals( TEAM.ALLIES, true, Map.Plant_Electric_Floor_Controls ); }

		SetAvailableMapGoals( TEAM.ALLIES, true, Map.Plant_Electric_Floor_Controls );

		Util.MapDebugPrint( "Electric_Floor_Controls_Defused" );
	},

	Generator_Defused = function( trigger )
	{
		if ( TestMap )
			{ return; }

		Map.Generator_Dyno -= 1;
		if ( Map.Generator_Dyno < 1 )
			{ SetAvailableMapGoals( TEAM.ALLIES, true, Map.Plant_Generator ); }

		Util.MapDebugPrint( "Generator_Defused" );
	},

	Main_Entrance_Defused = function( trigger )
	{
		if ( TestMap )
			{ return; }

		Map.Main_Entrance_Dyno -= 1;
		if ( Map.Main_Entrance_Dyno < 1 )
			{ SetAvailableMapGoals( TEAM.ALLIES, true, Map.Plant_Main_Entrance ); }

		Util.MapDebugPrint( "Main_Entrance_Defused" );
	},

	Side_Gate_Defused = function( trigger )
	{
		if ( TestMap )
			{ return; }

		Map.Side_Gate_Dyno -= 1;
		if ( Map.Side_Gate_Dyno < 1 )
			{ SetAvailableMapGoals( TEAM.ALLIES, true, Map.Plant_Side_Gate ); }

		Util.MapDebugPrint( "Side_Gate_Defused" );
	},

	Truck_Barrier_Defused = function( trigger )
	{
		if ( TestMap )
			{ return; }

		Map.Truck_Barrier_Dyno -= 1;
		if ( Map.Truck_Barrier_Dyno < 1 )
			{ SetAvailableMapGoals( TEAM.ALLIES, true, Map.Plant_Truck_Barrier ); }

		Util.MapDebugPrint( "Truck_Barrier_Defused" );
	},

	Assault_Ramp_Destroyed = function( trigger )
	{
		if ( TestMap )
			{ return; }

		if ( Map.MainEntranceStatus == 0 )	//If Main Entrance is intact
		{
			Groups.DisableAxis(Groups.group3);
		}

		Util.MapDebugPrint( "Assault_Ramp_Destroyed" );
	},

	Command_Post_Destroyed = function( trigger )
	{
		if ( TestMap )
			{ return; }

		Util.MapDebugPrint( "Command_Post_Destroyed" );
	},

	Courtyard_MG_Destroyed = function( trigger )
	{
		if ( TestMap )
			{ return; }

		Util.MapDebugPrint( "Courtyard_MG_Destroyed" );
	},

	Electric_Floor_Controls_Destroyed = function( trigger )
	{
		if ( TestMap )
			{ return; }

		SetAvailableMapGoals( TEAM.AXIS, true, Map.Build_Electric_Floor_Controls );

		Util.MapDebugPrint( "Electric_Floor_Controls_Destroyed" );
	},

	Generator_Destroyed = function( trigger )
	{
		if ( TestMap )
			{ return; }

		Groups.EnableAxis(Groups.group4);
		Groups.DisableAxis(Groups.group2);
		Groups.DisableAxis(Groups.group3);

		SetAvailableMapGoals( TEAM.AXIS, false, Map.Build_Courtyard_MG );
		SetAvailableMapGoals( TEAM.AXIS, false, Map.Plant_Assault_Ramp );
		SetAvailableMapGoals( TEAM.AXIS, false, Map.Mount_Courtyard_MG );
		SetAvailableMapGoals( TEAM.AXIS, false, Map.Checkpoint_courtyardflag );

		SetAvailableMapGoals( TEAM.ALLIES, true, "ATTACK_Bravo.*" );
		SetAvailableMapGoals( TEAM.ALLIES, true, Map.Plant_Electric_Floor_Controls );
		SetAvailableMapGoals( TEAM.ALLIES, false, "ATTACK_Dyna.*" );
		SetAvailableMapGoals( TEAM.ALLIES, false, "ATTACK_Charlie.*" );
		SetAvailableMapGoals( TEAM.ALLIES, false, "SNIPE_AlliedHood" );
		SetAvailableMapGoals( TEAM.ALLIES, false, Map.Plant_Courtyard_MG );
		SetAvailableMapGoals( TEAM.ALLIES, false, Map.Build_Assault_Ramp );
		SetAvailableMapGoals( TEAM.ALLIES, false, Map.Checkpoint_courtyardflag );

		SetAvailableMapGoals( TEAM.AXIS, false, "AMMOCAB_.*" );
		SetAvailableMapGoals( TEAM.AXIS, false, "HEALTHCAB_.*" );
		SetAvailableMapGoals( TEAM.ALLIES, false, "AMMOCAB_.*" );
		SetAvailableMapGoals( TEAM.ALLIES, false, "HEALTHCAB_.*" );

		Groups.DisableAllies(Groups.group1);
		Groups.DisableAxis(Groups.group1);

		//Buggy comportement
		SetAvailableMapGoals( TEAM.ALLIES, false, Map.Plant_Side_Gate );

		Util.MapDebugPrint( "Generator_Destroyed" );
	},

	Main_Entrance_Destroyed = function( trigger )
	{
		if ( TestMap )
			{ return; }

		Map.MainEntranceStatus == 1;		//Main Entrance is destroyed

		Groups.DisableAxis(Groups.group2);
		Groups.EnableAxis(Groups.group3);

		SetAvailableMapGoals( TEAM.ALLIES, true, Map.Checkpoint_courtyardflag );
		SetAvailableMapGoals( TEAM.ALLIES, false, "ATTACK_Charlie.*" );

		Util.MapDebugPrint( "Main_Entrance_Destroyed" );
	},

	Side_Gate_Destroyed = function( trigger )
	{
		if ( TestMap )
			{ return; }

		SetAvailableMapGoals( TEAM.AXIS, true, Map.Build_Side_Gate );

		Util.MapDebugPrint( "Side_Gate_Destroyed" );
	},

	Truck_Barrier_Destroyed = function( trigger )
	{
		if ( TestMap )
			{ return; }

		Util.MapDebugPrint( "Truck_Barrier_Destroyed" );
	},

	radarpart_Taken = function( trigger )
	{
		if ( TestMap )
			{ return; }

		Groups.DisableAxis(Groups.group4);
		SetAvailableMapGoals( TEAM.AXIS, true, "DEFEND_Hotel.*" );

		SetAvailableMapGoals( TEAM.ALLIES, true, "DEFEND_Hotel.*" );
		SetAvailableMapGoals( TEAM.ALLIES, false, "ATTACK_Bravo.*" );

		Util.MapDebugPrint( "radarpart_Taken" );
	},

	radarpart_Returned = function( trigger )
	{
		if ( TestMap )
			{ return; }

		Groups.EnableAxis(Groups.group4);
		SetAvailableMapGoals( TEAM.AXIS, false, "DEFEND_Hotel.*" );

		SetAvailableMapGoals( TEAM.ALLIES, true, "ATTACK_Bravo.*" );
		SetAvailableMapGoals( TEAM.ALLIES, false, "DEFEND_Hotel.*" );

		Util.MapDebugPrint( "radarpart_Returned" );
	},

	radarpart_Secured = function( trigger )
	{
		if ( TestMap )
			{ return; }

		Groups.DisableAxis(Groups.group4);
		SetAvailableMapGoals( TEAM.AXIS, true, "DEFEND_Delta.*" );
		SetAvailableMapGoals( TEAM.AXIS, true, Map.Build_Truck_Barrier );
		SetAvailableMapGoals( TEAM.AXIS, false, "DEFEND_Hotel.*" );
		SetAvailableMapGoals( TEAM.AXIS, false, Map.Build_Electric_Floor_Controls );

		SetAvailableMapGoals( TEAM.ALLIES, true, "ESCORT_truck" );
		SetAvailableMapGoals( TEAM.ALLIES, true, Map.Build_Truck );
		SetAvailableMapGoals( TEAM.ALLIES, true, "SNIPE_AlliedHood2" );
		SetAvailableMapGoals( TEAM.ALLIES, false, "ATTACK_Bravo.*" );
		SetAvailableMapGoals( TEAM.ALLIES, false, "DEFEND_Hotel.*" );
		SetAvailableMapGoals( TEAM.ALLIES, false, Map.Plant_Electric_Floor_Controls );

		Util.MapDebugPrint( "radarpart_Secured" );
	},

	courtyardflag_Axis_Captured = function( trigger )
	{
		if ( TestMap )
			{ return; }

		SetGoalPriority( Map.Plant_Generator, 0.85 );

		Util.MapDebugPrint( "courtyardflag_Axis_Captured" );
	},

	courtyardflag_Allies_Captured = function( trigger )
	{
		if ( TestMap )
			{ return; }

		SetGoalPriority( Map.Plant_Generator, 1.0 );

		SetAvailableMapGoals( TEAM.AXIS, true, Map.Checkpoint_courtyardflag );

		Util.MapDebugPrint( "courtyardflag_Allies_Captured" );
	},

	truck_region_1 = function( trigger )
	{
		if ( TestMap )
			{ return; }

		SetAvailableMapGoals( TEAM.AXIS, true, Map.Mount_240 );
		SetAvailableMapGoals( TEAM.AXIS, true, "DEFEND_End.*" );
		SetAvailableMapGoals( TEAM.AXIS, false, "DEFEND_Delta.*" );

		Util.ChangeSpawn(TEAM.ALLIES, 1);
		SetAvailableMapGoals( TEAM.ALLIES, true, "ATTACK_Golf.*" );

		Util.MapDebugPrint( "truck_region_1" );
	},

	truck_region_2 = function( trigger )
	{
		if ( TestMap )
			{ return; }

		SetAvailableMapGoals( TEAM.AXIS, false, Map.Build_Truck_Barrier );

		SetAvailableMapGoals( TEAM.ALLIES, true, "SNIPE_AlliedHood2" );

		Util.MapDebugPrint( "truck_region_2" );
	},
};

global OnMapLoad = function()
{
	if ( TestMapOn )
		{ Util.AutoTestMap(); }

	// *** TRIGGERS ***
	OnTrigger( "Allies have built the Assault Ramp!", Map.Assault_Ramp_Built );
	OnTrigger( "Axis Command Post constructed. Charge speed increased!", Map.Command_Post_Built );
	OnTrigger( "Axis have constructed the Courtyard MG!", Map.Courtyard_MG_Built );
	OnTrigger( "Axis have repaired the Electric Floor Controls!", Map.Electric_Floor_Controls_Built );
	OnTrigger( "Axis have constructed the Side Gate!", Map.Side_Gate_Built );
	OnTrigger( "The Truck has been repaired!", Map.Truck_Built );
	OnTrigger( "The Truck has been damaged!", Map.Truck_Destroyed );
	OnTrigger( "Axis have built the Truck Barrier!", Map.Truck_Barrier_Built );
	OnTrigger( "Planted at the Assault Ramp.", Map.Assault_Ramp_Planted );
	OnTrigger( "Planted at the Axis Command Post.", Map.Command_Post_Planted );
	OnTrigger( "Planted at the Courtyard MG.", Map.Courtyard_MG_Planted );
	OnTrigger( "Planted at the Electric Floor Controls.", Map.Electric_Floor_Controls_Planted );
	OnTrigger( "Planted at the Generator.", Map.Generator_Planted );
	OnTrigger( "Planted at the Main Entrance.", Map.Main_Entrance_Planted );
	OnTrigger( "Planted at the Side Gate.", Map.Side_Gate_Planted );
	OnTrigger( "Planted at the Truck Barrier.", Map.Truck_Barrier_Planted );
	OnTrigger( "Defused at the Assault Ramp.", Map.Assault_Ramp_Defused );
	OnTrigger( "Defused at the Axis Command Post.", Map.Command_Post_Defused );
	OnTrigger( "Defused at the Courtyard MG.", Map.Courtyard_MG_Defused );
	OnTrigger( "Defused at the Electric Floor Controls.", Map.Electric_Floor_Controls_Defused );
	OnTrigger( "Defused at the Generator.", Map.Generator_Defused );
	OnTrigger( "Defused at the Main Entrance.", Map.Main_Entrance_Defused );
	OnTrigger( "Defused at the Side Gate.", Map.Side_Gate_Defused );
	OnTrigger( "Defused at the Truck Barrier.", Map.Truck_Barrier_Defused );
	OnTrigger( "Axis have destroyed the Assault Ramp!", Map.Assault_Ramp_Destroyed );
	OnTrigger( "Allied team has destroyed the Axis Command Post!", Map.Command_Post_Destroyed );
	OnTrigger( "Allies have destroyed the Courtyard MG!", Map.Courtyard_MG_Destroyed );
	OnTrigger( "Allies have disabled the Electric Floor Controls!", Map.Electric_Floor_Controls_Destroyed );
	OnTrigger( "Allies have destroyed the Generator and secured the Courtyard Spawn!", Map.Generator_Destroyed );
	OnTrigger( "Allies have destroyed the Main Entrance!", Map.Main_Entrance_Destroyed );
	OnTrigger( "Allies have destroyed the Side Gate!", Map.Side_Gate_Destroyed );
	OnTrigger( "Allies have destroyed the Truck Barrier!", Map.Truck_Barrier_Destroyed );;
	OnTrigger( "Allies have taken the Radar Parts!", Map.radarpart_Taken );
	OnTrigger( "Axis have returned the Radar Parts!", Map.radarpart_Returned );
	OnTrigger( "Allies have secured the Radar Parts to the Truck!", Map.radarpart_Secured );
	OnTrigger( "Axis reclaim the Courtyard!", Map.courtyardflag_Axis_Captured );
	OnTrigger( "Allies capture the Courtyard!", Map.courtyardflag_Allies_Captured );

	// *** INITIAL AVAILABILITY OF GOALS ***
	SetAvailableMapGoals( TEAM.AXIS, false, ".*" );
	SetAvailableMapGoals( TEAM.ALLIES, false, "SNIPE.*" );

	SetAvailableMapGoals( TEAM.ALLIES, true, Map.Plant_Main_Entrance );
	SetAvailableMapGoals( TEAM.ALLIES, true, Map.Build_Assault_Ramp );
	SetAvailableMapGoals( TEAM.ALLIES, true, Map.Plant_Side_Gate );
	SetAvailableMapGoals( TEAM.ALLIES, true, "SNIPE_AlliedHood" );
	SetAvailableMapGoals( TEAM.ALLIES, true, "ATTACK_Charlie.*" );
	Groups.DisableAllies(Groups.group1);
	Groups.DisableAllies(Groups.group2);
	SetAvailableMapGoals( TEAM.ALLIES, false, "DEFEND_.*" );
	SetAvailableMapGoals( TEAM.ALLIES, false, "MOBILEMG42_.*" );
	SetAvailableMapGoals( TEAM.ALLIES, false, "ATTACK_Golf.*" );
	SetAvailableMapGoals( TEAM.ALLIES, false, Map.Build_Truck );
	SetAvailableMapGoals( TEAM.ALLIES, false, Map.Mount_Courtyard_MG );

	Groups.EnableAxis(Groups.group1);
	Groups.EnableAxis(Groups.group2);

	// ** PRIORITY ***
	SetGoalPriority( Map.Plant_Main_Entrance, 0.9 );
	SetGoalPriority( Map.Build_Electric_Floor_Controls, 0.9 );
	SetGoalPriority( Map.Plant_Electric_Floor_Controls, 0.9 );
	SetGoalPriority( Map.Plant_Generator, 0.85 );
	SetGoalPriority( Map.Build_Command_Post, 0.8 );
	SetGoalPriority( Map.Plant_Command_Post, 0.8 );
	SetGoalPriority( Map.Build_Assault_Ramp, 0.7 );
	SetGoalPriority( Map.Plant_Side_Gate, 0.7 );
	SetGoalPriority( Map.Checkpoint_courtyardflag, 0.6 );
	SetGoalPriority( "MOUNTMG42_.*", 0.5 );

	// *** MAX USERS PER GOAL ***
	Util.SetMaxUsersInUse( 1, "ATTACK_.*" );
	Util.SetMaxUsersInUse( 1, "DEFEND_.*" );
	Util.SetMaxUsersInUse( 1, "MOUNTMG42_.*" );
	Util.SetMaxUsersInProgress( 2, "FLAG_.*" );
	Util.SetMaxUsersInProgress( 2, "BUILD_.*" );
	Util.SetMaxUsersInProgress( 1, "PLANT_.*" );
	Util.SetMaxUsersInProgress( 1, "REPAIR_.*" );
	Util.SetMaxUsersInProgress( 1, "ATTACK_.*" );
	Util.SetMaxUsersInProgress( 1, "DEFEND_.*" );
	Util.SetMaxUsersInProgress( 1, "MOBILEMG42_.*" );

	//Elevator Stuff (Disabled)
	//Util.UpdateSwitchData();
	//OnTrigger( "elevator_goto", Map.Elevator1 );

	Util.SetGoalOffset( -100, 0, 250, "PLANT_Assault_Ramp" );
	Util.SetGoalOffset( -30, -100, 0, "PLANT_Truck_Barrier" );

	Util.OnTriggerPosition( Map.Mover_truck, "region1", 200.0, Map.truck_region_1 );
	Util.OnTriggerPosition( Map.Mover_truck, "region2", 200.0, Map.truck_region_2 );

	SetMapGoalProperties( "ATTACK_.*", {mincamptime=60, maxcamptime=120});
	SetMapGoalProperties( "DEFEND_.*", {mincamptime=60, maxcamptime=120});
	SetMapGoalProperties( "SNIPE_.*", {mincamptime=120, maxcamptime=120});
	SetMapGoalProperties( "MOBILEMG42_.*", {mincamptime=120, maxcamptime=120});

	// *** ROUTES ***
	MapRoutes =
	{
		BUILD_Assault_Ramp =
		{
			ROUTE_GuestHouse1 =
			{
				ROUTE_GuestHouseEast1 =
				{
					ROUTE_GuestHouseEast2 = {},
				},
			},
			ROUTE_GuestHouse2 =
			{
				ROUTE_GuestHouseEast1 =
				{
					ROUTE_GuestHouseEast2 = {},
				},
			},
			ROUTE_GuestHouse3 =
			{
				ROUTE_GuestHouseEast1 =
				{
					ROUTE_GuestHouseEast2 = {},
				},
			},
		},

		CAPPOINT_Truck =
		{
			ROUTE_PartTaken  =
			{
				ROUTE_Escape1  =
				{
					ROUTE_Escape2  =
					{
						ROUTE_BunkerWay1  = {},
					},
					ROUTE_BunkerBis2  =
					{
						ROUTE_BunkerBis1  =
						{
							ROUTE_BunkerWay1  = {},
						},
					},
				},
			},
		},

		CHECKPOINT_courtyardflag =
		{
			ROUTE_Laboratory  =
			{
				Weight = 5,
				ROUTE_FlagRecovery1  =
				{
					ROUTE_FlagRecovery2  =
					{
						ROUTE_FlagRecovery3  = {},
					},
					ROUTE_FlagRecoveryD1  =
					{
						ROUTE_FlagRecoveryD2  = {},
					},
				},
			},
		},

		PLANT_Electric_Floor_Controls =
		{
			ROUTE_Courtyard =
			{
				Weight = 1,
				ROUTE_BunkerWay1 =
				{
					Weight = 1,
					ROUTE_BunkerStairs1 =
					{
						ROUTE_BunkerStairs2 = {},
					},
					Weight = 4,
					ROUTE_BunkerBis1 =
					{
						ROUTE_BunkerBis2 = {},
					},
				},
				Weight = 4,
				ROUTE_HouseWay1 =
				{
					ROUTE_HouseWay2 =
					{
						ROUTE_HouseWay3 = {},
					},
				},

			},
		},

		PLANT_Side_Gate =
		{
			ROUTE_GuestHouse1 =
			{
				ROUTE_GuestHouseWest1 =
				{
					ROUTE_GuestHouseWest2 = {},
				},
			},
			ROUTE_GuestHouse2 =
			{
				ROUTE_GuestHouseWest1 =
				{
					ROUTE_GuestHouseWest2 = {},
				},
			},
			ROUTE_GuestHouse3 =
			{
				ROUTE_GuestHouseWest1 =
				{
					ROUTE_GuestHouseWest2 = {},
				},
			},
		},
	};

	//Copy routes
	MapRoutes.CHECKPOINT_courtyardflag = MapRoutes.BUILD_Assault_Ramp;
	MapRoutes.ATTACK_Bravo1 = MapRoutes.PLANT_Electric_Floor_Controls;
	MapRoutes.ATTACK_Bravo2 = MapRoutes.PLANT_Electric_Floor_Controls;
	MapRoutes.ATTACK_Bravo3 = MapRoutes.PLANT_Electric_Floor_Controls;
	MapRoutes.ATTACK_Bravo4 = MapRoutes.PLANT_Electric_Floor_Controls;
	MapRoutes.ATTACK_Bravo5 = MapRoutes.PLANT_Electric_Floor_Controls;
	MapRoutes.ATTACK_Bravo6 = MapRoutes.PLANT_Electric_Floor_Controls;
	MapRoutes.ATTACK_Bravo7 = MapRoutes.PLANT_Electric_Floor_Controls;

	Util.Routes(MapRoutes);

	Util.MapDebugPrint( "Omni-bot map script for Chateau Voilegarde Beta 3 by **PC** Mateos" );
};

global OnBotJoin = function( bot )
{
	bot.TargetBreakableDist = 90.0;
	weaps = { WEAPON.THOMPSON, WEAPON.MP40, WEAPON.SHOTGUN, WEAPON.M97, WEAPON.M7, WEAPON.GARAND, WEAPON.BAR };

	foreach( id and weap in weaps )
	{
		w = bot.GetWeapon(weap);
		w.PrimaryFire.SetTargetBias(CLASS.BREAKABLE, 1.2);
	}

	w = bot.GetWeapon(WEAPON.KNIFE);
	w.PrimaryFire.SetDesirabilityRange(0, 48, 0.6);
};

global Groups =
{
	//Command Post
	group1 =
	{
		Map.Build_Command_Post,
		Map.Plant_Command_Post,
	},

	//Axis Part 1 : Map startin'
	group2 =
	{
		"DEFEND_start.*",
		"SNIPE_AxisHood",
		"SNIPE_CastleFrontLeft",
		"SNIPE_CastleFrontRight",
		"SNIPE_CastleLeft",
		"MOBILEMG42_AxisOut1",
		"MOBILEMG42_AxisOut2",
		"MOBILEMG42_AxisOut3",
		Map.Build_Courtyard_MG,
	},

	//Axis Part 2 : Main Entrance Destroyed
	group3 =
	{
		"DEFEND_Foxtrot.*",
		"SNIPE_MainDoor",
		"MOBILEMG42_AxisIn1",
		"MOBILEMG42_AxisIn2",
		Map.Mount_Courtyard_MG,
	},

	//Axis Part 3 : Generator Destroyed
	group4 =
	{
		"DEFEND_Alpha.*",
		"MOBILEMG42_AxisBunker1",
		"MOBILEMG42_AxisBunker2",
	},

	EnableAllies = function(group)
	{
		foreach (id and goal in group)
		{
			SetAvailableMapGoals( TEAM.ALLIES, true, goal );

			Util.MapDebugPrint("EnableAllies: enabling " +  goal);
		}
	},

	EnableAxis = function(group)
	{
		foreach (id and goal in group)
		{
			SetAvailableMapGoals( TEAM.AXIS, true, goal );

			Util.MapDebugPrint("EnableAxis: enabling " + goal);
		}
	},

	DisableAllies = function(group)
	{
		foreach (id and goal in group)
		{
			SetAvailableMapGoals( TEAM.ALLIES, false, goal );

			Util.MapDebugPrint("DisableAllies: disabling " + goal);
		}
	},

	DisableAxis = function(group)
	{
		foreach (id and goal in group)
		{
			SetAvailableMapGoals( TEAM.AXIS, false, goal );

			Util.MapDebugPrint("DisableAxis: disabling " + goal);
		}
	},
};
