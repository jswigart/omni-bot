// This script contains functionality to trigger any available switches as set up in the global map table.

// This goal uses the global blackboard, so let's register a key for it.
if(!BB.SWITCHUSER)
{
	BB.SWITCHUSER = Blackboard.MakeKey();
}

// These parameters are required
this.Name = "UseSwitch";		// The name of the goal.
this.Parent = "HighLevel";		// The name of the parent. This setting determines where in the state tree the goal will reside in.

this.Initialize = function()
{
	// Internal variables
	this.Debug = true;
	this.TimeBetweenChecks = 5;
	
	// If there is no global map or switches table this script goal is useless, 
	// so lets disable it from consideration.
	if(!Map || !Map.Switches)
	{
		this.Disable = true;
	}
	else
	{
		// If not otherwise defined, set a high bot limit for the switches.
		foreach ( i and switchTable in Map.Switches )
		{
			if ( !Map.Switches[ i ].LimitBots )
				{ Map.Switches[ i ].LimitBots = 64; }
		}
	}
	
	print(this.Name, " Initialized");
};

//this.OnSpawn = function()
//{
//};

this.GetPriority = function()
{
	myTeamMask = (1<<this.Bot.GetTeam());
	myClassMask = (1<<this.Bot.GetClass());
	
	if(!this.IsActive())
	{
		// Look for a switch we can go for.
		foreach ( i and switchTable in Map.Switches )
		{
			//numBotsOnSwitch = Blackboard.GetNumRecords(BB.SWITCHUSER, i);	
			if( 	( switchTable.LimitTeam & myTeamMask ) && 
				( switchTable.LimitClass & myClassMask) /*&&
				( numBotsOnSwitch < switchTable.LimitBots )*/)
			{
				this.CurrentSwitch = i;
				this.Priority = 1;
				return;
			}
			sleep(0.2);
		}
	}
	
	sleep(this.TimeBetweenChecks);
};

this.Enter = function()
{
	// bbRecord =
	// {
		// Owner = this.Bot.GetGameId(),
		// Target = this.CurrentSwitch,
	// };

	// Blackboard.PostRecord(BB.SWITCHUSER, bbRecord);
	
	switch = Map.Switches[this.CurrentSwitch];
        	
	wpPos = switch.Waypoint.position;
	radius = switch.Waypoint.radius;
	wpFacing = switch.Waypoint.facing;
	
	this.Goto(wpPos, radius);
};

this.Exit = function()
{
	// Remove myself from the blackboard for using this switch
	// Blackboard.RemoveByPoster(this.Bot.GetGameId(), BB.SWITCHUSER);
	
	// Release the aim request so other goals can assume controls
	this.ReleaseAimRequest();
};

this.Update = function()
{
	if( block(EVENT.PATH_SUCCESS, EVENT.PATH_FAILED) == EVENT.PATH_SUCCESS )
	{
		assert(this.CurrentSwitch);
		
		switch = Map.Switches[this.CurrentSwitch];		
		pos = switch.Waypoint.position;
		facing = switch.Waypoint.facing;
		
		assert(pos && facing);
		this.AddAimRequest(Priority.High, "facing", facing);
				
		myTeamMask = (1<<this.Bot.GetTeam());
		myClassMask = (1<<this.Bot.GetClass()) ;                        
		counter = 0;
		while( ( switch.LimitTeam & myTeamMask ) && ( switch.LimitClass & myClassMask) )
		{
			if ( counter & 2)
                                { this.Bot.PressButton( BTN.USE); }   
			counter += 1;
                        yield();
                } 
                this.ReleaseAimRequest();                         
	}	
        // Finish the state.
	this.Finished();
};
