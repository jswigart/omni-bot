//==========================================================================================
//
//	password2.gm
//
//	Who	When		What
//------------------------------------------------------------------------------------------
//	MickyP	05 December 2011	Initial Script
//
//==========================================================================================
//

global Map =
{
	ShowMovers = false,
	Debug = 1,
	DoorDown = 0,
	PassComplete = 0,
	PartsTaken = 0,
	PassDoorOpen = 0,
	PlayersAtPass = 0,
	PasswordEnts = {251,250,249,248},

	Switches =
	{
		garage_door =
		{
			Enabled = true,
			Priority = 0,
			WaypointName = "switch_2",
			Timeout = 2000,
			LimitBots = 1,
		},

	},

	PlayerCount = 
	{
        Name = "PlayerNumber",
        TriggerOnClass = CLASS.ANYPLAYER,
        
		OnEnter = function(ent)
		{
			if( GetEntTeam(ent) == TEAM.ALLIES )
			{
			Map.PlayersAtPass += 1;
			print("player inside"); // Debug only
			print(Map.PlayersAtPass); // Debug only	
			}
		},
		OnExit = function(ent)
		{
			if( GetEntTeam(ent) == TEAM.ALLIES )
			{
			Map.PlayersAtPass -= 1;
			print("player inside"); // Debug only
			print(Map.PlayersAtPass); // Debug only
			}
		},
	},

	ReadPassword = function()
	{
		Map.password = {};
		for(i=0; i<=3; i+=1)
		{
			v = GetEntFacing(Map.PasswordEnts[i]);
			x=v.x; z=v.z;
			if(x==1){ n=1; }
			else if(x==-1){ n=5; }
			else if(z==1){ n=3; }
			else if(z==-1){ n=7; }
			else if(x>0){
				if(z>0){ n=2; } else { n=8; }
			}else{
				if(z>0){ n=4; } else { n=6; }
			}
			Map.password[i] = n;
		}
		Util.MapDebugPrint( "Password is " + Map.password[0] + Map.password[1] + Map.password[2] + Map.password[3] );
	},

	Service_Door_Destroyed = function( trigger )
	{
		if ( TestMap )
			{ return; }

		Util.EnableGoal( "ROUTE_OverView_Ladder_Access" );
		Util.MapDebugPrint( "Service_Door_Destroyed" );
	},

	Password_Entered = function( trigger )
	{
		if ( TestMap )
			{ return; }

		SetAvailableMapGoals( TEAM.AXIS, true, "SWITCH_Password_Reset" );

		Util.MapDebugPrint( "Password_Entered" );
	},

	Password_Reset = function( trigger )
	{
		if ( TestMap )
			{ return; }

		SetAvailableMapGoals( TEAM.AXIS, false, "SWITCH_Password_Reset" );
		
		if ( Map.PassDoorOpen == 0 )
				{
				SetAvailableMapGoals( TEAM.ALLIES, true, "DEFEND_Password_Room_.*" );
				SetAvailableMapGoals( TEAM.ALLIES, false, "DEFEND_Endoarm_Room_.*" );
				
				SetAvailableMapGoals( TEAM.AXIS, true, "DEFEND_Password_Room_.*" );
				SetAvailableMapGoals( TEAM.AXIS, false, "DEFEND_Endoarm_Room_.*" );
				}
		Util.MapDebugPrint( "Password_Reset" );
	},
	
	Password_Sucessful = function( trigger )
	{
		if ( TestMap )
			{ return; }

		Map.PassComplete = 1;
		
		SetAvailableMapGoals( TEAM.AXIS, false, "SWITCH_Password_Reset" );
		SetAvailableMapGoals( TEAM.AXIS, false, "SWITCH_Password_Door" );
		SetAvailableMapGoals( TEAM.AXIS, false, "DEFEND_Password_Room_.*" );
		
		
		
		SetAvailableMapGoals( TEAM.ALLIES, false, "SWITCH_Password_Door" );
		SetAvailableMapGoals( TEAM.ALLIES, false, "DEFEND_Password_Room_.*" );
		SetAvailableMapGoals( TEAM.ALLIES, true, "FLAG_Endoarm" );
		SetAvailableMapGoals( TEAM.ALLIES, true, "CAPPOINT_Truck" );
		
		Util.MapDebugPrint( "Password_Sucessful" );
	},
	
	Endoarm_Taken = function( trigger )
	{
		if ( TestMap )
			{ return; }

		SetAvailableMapGoals( TEAM.AXIS, false, "DEFEND_Endoarm_Room_.*" );
		SetAvailableMapGoals( TEAM.AXIS, false, "DEFEND_OverView_.*" );
		SetAvailableMapGoals( TEAM.AXIS, true, "DEFEND_Truck_.*" );
		
		SetAvailableMapGoals( TEAM.ALLIES, true, "DEFEND_Truck_.*" );
		
		Map.PartsTaken = 1;
		Util.MapDebugPrint( "Endoarm_Taken" );
	},

	Endoarm_Returned = function( trigger )
	{
		if ( TestMap )
			{ return; }
			
		SetAvailableMapGoals( TEAM.AXIS, false, "DEFEND_Truck_.*" );
		SetAvailableMapGoals( TEAM.AXIS, true, "DEFEND_Password_Room_.*" );
		SetAvailableMapGoals( TEAM.AXIS, true, "DEFEND_OverView_.*" );
		
		SetAvailableMapGoals( TEAM.ALLIES, false, "DEFEND_Truck_.*" );

		Map.PartsTaken = 0;
		Util.MapDebugPrint( "Endoarm_Returned" );
	},

	Endoarm_Secured = function( trigger )
	{
		if ( TestMap )
			{ return; }

		Util.MapDebugPrint( "Endoarm_Secured" );
	},

	allied_flag_Axis_Captured = function( trigger )
	{
		if ( TestMap )
			{ return; }

		Util.MapDebugPrint( "allied_flag_Axis_Captured" );
	},

	allied_flag_Allies_Captured = function( trigger )
	{
		if ( TestMap )
			{ return; }

		Util.MapDebugPrint( "allied_flag_Allies_Captured" );
	},

	door_trigger = function( trigger )
	{
		vel = ToVector(trigger.Action);
		if ( vel.z < 0 )
			{
			Map.DoorDown = 0;
			Map.Switches.garage_door.Enabled = true;
			SetAvailableMapGoals( TEAM.AXIS, false, "SWITCH_Garage_Door" );
			Util.MapDebugPrint( "door_closed" );
			}
		else if ( vel.z > 0 )
			{
			Map.DoorDown = 1;
			Map.Switches.garage_door.Enabled = false;
			if ( Map.PartsTaken == 0 )
				{
				SetAvailableMapGoals( TEAM.AXIS, true, "SWITCH_Garage_Door" );
				}
			Util.MapDebugPrint( "door_open" );
			}
	},
	
	password_trigger = function( trigger )
	{
		if ( Map.PassComplete == 1 )
			{ return; }
		
		vel = ToVector(trigger.Action);
		if ( vel.y < 0 )
			{
			Map.PassDoorOpen = 0;
			SetAvailableMapGoals( TEAM.ALLIES, true, "SWITCH_Password_Door" );
			SetAvailableMapGoals( TEAM.AXIS, false, "SWITCH_Password_Door" );
			Util.MapDebugPrint( "Pass_door_closed" );
			}
		else if ( vel.y > 0 )
			{
			Map.PassDoorOpen = 1;
			SetAvailableMapGoals( TEAM.AXIS, true, "SWITCH_Password_Door" );
			SetAvailableMapGoals( TEAM.ALLIES, false, "SWITCH_Password_Door" );
			
			sleep(2); // Allow time for door to open
			if ( Map.PlayersAtPass > 0 )
				{
				SetAvailableMapGoals( TEAM.ALLIES, false, "DEFEND_Password_Room_.*" );
				SetAvailableMapGoals( TEAM.ALLIES, true, "DEFEND_Endoarm_Room_.*" );
				
				SetAvailableMapGoals( TEAM.AXIS, false, "DEFEND_Password_Room_.*" );
				SetAvailableMapGoals( TEAM.AXIS, true, "DEFEND_Endoarm_Room_.*" );
				}
			Util.MapDebugPrint( "Pass_door_open" );
			}
	},
	
	password_enter = function( trigger )
	{

	//	Util.MapDebugPrint( "Pass_Num_Entered" );

	},
};

global OnMapLoad = function()
{
	if ( TestMapOn )
		{ Util.AutoTestMap(); }

	// test. remove.
	Map.ReadPassword();

	// Register callback functions
	OnTrigger( "Allies breach the Service Door!", Map.Service_Door_Destroyed );
	OnTrigger( "Process started with valid password!", Map.Password_Entered );
	OnTrigger( "Process aborted...", Map.Password_Reset );
	OnTrigger( "Process finished!", Map.Password_Sucessful );
	OnTrigger( "Allies have stolen the Endoarm!", Map.Endoarm_Taken );
	OnTrigger( "Flag returned Endoarm!", Map.Endoarm_Returned );
	OnTrigger( "Allies escaped with the Endoarm!", Map.Endoarm_Secured );
	OnTrigger( "Allies capture the Service Halls!", Map.allied_flag_Axis_Captured );
	OnTrigger( "Axis reclaims the Service Halls!", Map.allied_flag_Allies_Captured );
	OnTrigger( "lift_start", Map.door_trigger );
	OnTrigger( "password_door_goto", Map.password_trigger );
	OnTrigger( "input_disp_start", Map.password_enter );

	PlayerCount = OnTriggerRegion(AABB(-2000.875,2336.848,769.125,-1599.125,2784.873,875.125),Map.PlayerCount);

	Util.DisableGoal( ".*", true ); // all but routes

	Util.DisableGoal( "ROUTE_OverView_Ladder_Access" );

	SetAvailableMapGoals( TEAM.ALLIES, true, "PLANT_Service_Door" );
	SetAvailableMapGoals( TEAM.ALLIES, true, "CHECKPOINT_allied_flag" );
	SetAvailableMapGoals( TEAM.ALLIES, true, "SWITCH_Password_Door" );
	SetAvailableMapGoals( TEAM.ALLIES, true, "DEFEND_OverView_.*" );
	SetAvailableMapGoals( TEAM.ALLIES, true, "DEFEND_Password_Room_.*" );
	
//	Util.RemoveGoal( "SWITCH_Password_Door" );
	
	SetAvailableMapGoals( TEAM.AXIS, true, "DEFEND_OverView_.*" );
	SetAvailableMapGoals( TEAM.AXIS, true, "DEFEND_Password_Room_.*" );

	SetGoalPriority( "SWITCH_Password_Reset", 1.0 );

	// Max users per goal
	Util.SetMaxUsers( 1, "ATTACK_.*" );
	Util.SetMaxUsers( 1, "DEFEND_.*" );
	Util.SetMaxUsers( 1, "GRENADE_.*" );
	Util.SetMaxUsers( 1, "SNIPE_.*" );
	Util.SetMaxUsers( 1, "MOUNTMG42_.*" );
	Util.SetMaxUsers( 1, "MOBILEMG42_.*" );
	Util.SetMaxUsers( 1, "MOBILEMORTAR_.*" );
	Util.SetMaxUsers( 1, "AIRSTRIKE_.*" );
	Util.SetMaxUsers( 1, "CALLARTILLERY_.*" );

	MapRoutes =
	{
		CHECKPOINT_allied_flag = 
		{
			ROUTE_Allied_Spawn  = 
			{
				ROUTE_Main_Entrance  = 
				{
				},
				ROUTE_Side_Entrance  = 
				{
					ROUTE_Service_Door  = 
					{
					},
				},
			},
		},
		DEFEND_Password_Room_1 = 
		{
			ROUTE_Flag_Spawn  = 
			{
				ROUTE_East_Stairs  = 
				{
					ROUTE_East_Stairs_Exit  = 
					{
						ROUTE_PW_Room_Stairs  = 
						{
						},
					},
					ROUTE_West_Stairs_Exit  = 
					{
						ROUTE_PW_Room_Stairs  = 
						{
						},
					},
				},
				ROUTE_West_Stairs  = 
				{
					ROUTE_West_Stairs_Exit  = 
					{
						ROUTE_PW_Room_Stairs  = 
						{
						},
						ROUTE_Far_Road_Area  = 
						{
							ROUTE_Under_PW_Room  = 
							{
								ROUTE_PW_Room_Back_Door  = 
								{
								},
							},
						},
					},
					ROUTE_East_Stairs_Exit  = 
					{
						ROUTE_PW_Room_Stairs  = 
						{
						},
						ROUTE_Far_Road_Area  = 
						{
							ROUTE_Under_PW_Room  = 
							{
								ROUTE_PW_Room_Back_Door  = 
								{
								},
							},
						},
					},
				},
				ROUTE_Service_Door  = 
				{
					ROUTE_OverView_Ladder_Access  = 
					{
						ROUTE_OverView  = 
						{
							ROUTE_Side_Entrance  = 
							{
							},
						},
					},
				},
			},
			ROUTE_Axis_Spawn  = 
			{
				ROUTE_Axis_Tunnel  = 
				{
					ROUTE_Under_PW_Room  = 
					{
						ROUTE_PW_Room_Back_Door  = 
						{
						},
					},
					ROUTE_PW_Room_Stairs  = 
					{
					},
				},
				ROUTE_Axis_Ramp  = 
				{
					ROUTE_OverView  = 
					{
						ROUTE_PW_Room_Side_Door  = 
						{
						},
					},
				},
				ROUTE_PW_Room_Back_Door  = 
				{
				},
			},
		},
		CAPPOINT_Truck = 
		{
			ROUTE_EndoArm  = 
			{
				ROUTE_East_Stairs  = 
				{
				},
				ROUTE_Garage_Ramp  = 
				{
				},
				ROUTE_OverView_Ladder_Access  = 
				{
					ROUTE_Service_Door  = 
					{
						ROUTE_MG_Drop  = 
						{
						},
						ROUTE_Side_Entrance  = 
						{
						},
						ROUTE_MG_Exit  = 
						{
						},
					},
				},
			},
		},
	};

	Util.Routes(MapRoutes);


	Util.UpdateSwitchData();
	Util.MapDebugPrint( "Omni-bot map script for " + GetMapName() + " executed." );
};

global OnBotJoin = function( bot )
{
	// Uncomment for shootable breakables
	//~bot.TargetBreakableDist = 90.0;
	// Only set MaxViewDistance on maps with limited sight (e.g. fog)
	//~bot.MaxViewDistance = 2400;
};
