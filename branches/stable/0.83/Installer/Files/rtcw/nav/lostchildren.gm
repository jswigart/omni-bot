global Map =
{
	Debug = 1,
	bridgeBuilt = false,
	barrier1Destroyed = false,
	barrier2Destroyed = true,
	sideGateDestroyed = true,
	wallDestroyed = false,
	sideGrateDestroyed = false,
	bookTaken = false,
	bookAtBoat = false,
	alliedSpawn = 0,
	Old_city_wall_Dyno = 0,
	DispenseAmmoTime = 1,
	DontDispenseAmmo = true,
	PanzbBarrierBots = 0,
	PanzbBarrierFired = false, 
	ViewDistance = 10000,
	BoatPlayers = 0,

	Navigation =
	{
		l1 = { navigate = function(_this) { //ladder near street spawn
			for(j=0; j<5 && _this.Bot.GetPosition().z > 180; j+=1)
			{
				_this.AddAimRequest(Priority.High, "facing", Vector3(0.254, -0.012, -0.967));
				_this.Bot.HoldButton(BTN.CROUCH, 3.5);
				for(k=0; k<30 && !_this.Bot.MoveTowards(Vector3(875.87, 288.532, 332.125),7); k+=1)
				{
					sleep(0.1);
				}
				sleep(0.2);
				_this.AddAimRequest(Priority.High, "facing", Vector3(-0.254, -0.012, -0.967));
				yield();
				_this.Bot.HoldButton(BTN.FORWARD, 1);
				sleep(1);
			}
		}},
		l2 = { navigate = function(_this) { //ladder from boat to room
			_this.AddAimRequest(Priority.High, "facing", Vector3(0.036, -0.430, 0.902));
			_this.Bot.HoldButton(BTN.FORWARD, 2.5);
			sleep(2.5);
		}},
		grate = { //second boat access breakable
			EvalFunc = function(t){ 
				return !Map.sideGrateDestroyed;
			},
			navigate = function(_this) {
				_this.Bot.HoldButton(BTN.FORWARD, 3);
				_this.AddWeaponRequest(Priority.High, WEAPON.KNIFE);
				_this.BlockForWeaponChange(WEAPON.KNIFE);
				for(j=0; j<20; j+=1){
					tr = TraceLine(Vector3(-1471.776, 796.875, 170.125), Vector3(-1474.088, 835.312, 170.125), null, TRACE.SOLID, 0, true);
					if (tr.fraction == 1){
						Map.sideGrateDestroyed = true;
						break;
					}
					_this.AddAimRequest(Priority.High, "position", Vector3(-1471.4, 825, 128.1));
					_this.Bot.HoldButton(BTN.ATTACK1, 0.5);
					sleep(0.5);
				}
				_this.ReleaseWeaponRequest();
				_this.ReleaseAimRequest();
				sleep(3);
			}
		},
		bpanzbarrier =
		{
			navigate = function( _this )
			{
				// this is just using the barrier as they eval since its simple
				// others will need to eval other map vars
				if ( !Map.PanzbBarrierFired && Map.PanzbBarrierBots == 0 && _this.Bot.HasWeapon( WEAPON.PANZERFAUST ) ) 
				{
					Util.MapDebugPrint("Panzering Barrier");
					wpTable = Util.WpNameInfo( "bbarrierpanz" );
					Map.PanzbBarrierBots += 1;
					Map.PanzbBarrierFired = true; // Even if he doesnt make it, don't try doing it again because teammates will be there by then

					_this.Bot.HoldButton( BTN.SPRINT, 999 );
					if ( _this.Goto( wpTable.position ) == EVENT.PATH_SUCCESS ) {
						_this.Bot.ReleaseButton( BTN.SPRINT );
						if ( _this.Bot.IsWeaponCharged( WEAPON.PANZERFAUST, 0 ) ) {
							_this.AddAimRequest( Priority.High, "facing", wpTable.facing );
							_this.AddWeaponRequest( Priority.High, WEAPON.PANZERFAUST );
							_this.BlockForWeaponChange( WEAPON.PANZERFAUST );
							sleep( 0.3 ); // make sure its ready to fire
							_this.Bot.HoldButton( BTN.ATTACK1, 2 );
							sleep( 2 );
						}
					}
					Map.PanzbBarrierBots -= 1;
				}
				yield();
			},
		},
	},
	Airstrike =
	{
		boatas =
		{
			Enabled = true,
			Team = ( 1 << TEAM.AXIS ),
			Waypoint = "boatas",
		},
	},

	SetAvail = function()
	{
		b = Map.bridgeBuilt || Map.barrier1Destroyed || Map.wallDestroyed;
		w = Map.sideGateDestroyed || Map.wallDestroyed;
		t = Map.bookTaken && (w || Map.bookAtBoat);
		r = !Map.barrier1Destroyed && !Map.wallDestroyed;

		if (!Map.wallDestroyed){ SetAvailableMapGoals( TEAM.AXIS, b, "PLANT_Old_city_wall" ); }
		SetAvailableMapGoals( TEAM.AXIS, b, "PLANT_Allied_command_post" );
		SetAvailableMapGoals( TEAM.AXIS, b, "PLANT_Second_barrier" );
		SetAvailableMapGoals( TEAM.AXIS, b && (Map.wallDestroyed || Map.barrier2Destroyed), "PLANT_Second_boat_access" );
		SetAvailableMapGoals( TEAM.AXIS, b && !Map.wallDestroyed, "ATTACK_wall.*" );
		SetAvailableMapGoals( TEAM.AXIS, b && !t, "ATTACK_book.*" );
		SetAvailableMapGoals( TEAM.AXIS, !Map.bridgeBuilt && !Map.wallDestroyed, "ATTACK_bridge.*" );
		SetAvailableMapGoals( TEAM.AXIS, t && w, "ATTACK_boat.*" );
		SetAvailableMapGoals( TEAM.AXIS, b && w, "PLANT_Dock_Mg" );
		SetAvailableMapGoals( TEAM.AXIS, Map.bookTaken || Map.barrier2Destroyed && b, "FLAG_book1" );
		SetAvailableMapGoals( TEAM.AXIS, w || Map.bookAtBoat, "CAPPOINT_radio" );
		SetAvailableMapGoals( TEAM.AXIS, r, "AIRSTRIKE_barrier1_axis" );
		SetAvailableMapGoals( TEAM.AXIS, r, "ATTACK_east.*" );
		SetAvailableMapGoals( TEAM.AXIS, !t && Map.wallDestroyed, "MOUNTMG42_south" );

		SetAvailableMapGoals( TEAM.ALLIES, !t && !r && (Map.wallDestroyed || Map.barrier2Destroyed), "DEFEND_book.*" );
		SetAvailableMapGoals( TEAM.ALLIES, t, "DEFEND_boat_radio.*" );
		SetAvailableMapGoals( TEAM.ALLIES, t, "MOUNTMG42_Dock_Mg" );
		SetAvailableMapGoals( TEAM.ALLIES, !t && !r, "MOUNTMG42_south" );
		SetAvailableMapGoals( TEAM.ALLIES, t, "MOBILEMG42_boat.*" );
		SetAvailableMapGoals( TEAM.ALLIES, t && Map.wallDestroyed, "SNIPE_boat_wall.*" );
		SetAvailableMapGoals( TEAM.ALLIES, t && Map.wallDestroyed, "DEFEND_boat_wall.*" );
		SetAvailableMapGoals( TEAM.ALLIES, !t && Map.barrier1Destroyed && !Map.wallDestroyed, "DEFEND_wall.*" );
		SetAvailableMapGoals( TEAM.ALLIES, r, "AIRSTRIKE_barrier1_allied" );
		SetAvailableMapGoals( TEAM.ALLIES, !t && !Map.wallDestroyed, "DEFEND_east.*" );
		SetAvailableMapGoals( TEAM.ALLIES, r, "DEFEND_east5" );
		SetAvailableMapGoals( TEAM.ALLIES, r, "DEFEND_east6" );

		/*if(!Map.wallDestroyed)
		{
			if (t && (Map.bookAtBoat || RandInt(0,2)==0)){
				spawn=2; //dock
				Util.MapDebugPrint( "Allies spawning at dock" );
			}else{
				spawn=1; //street
				Util.MapDebugPrint( "Allies spawning at street" );
			}
			if (spawn != Map.alliedSpawn)
			{
				Map.alliedSpawn = spawn;
				foreach(bot in BotTable)
				{
					if (bot.GetTeam()==TEAM.ALLIES){
						bot.ChangeSpawnPoint(spawn);
					}
				}
			}
		}*/
	},

	Barrier1_Planted  = function( trigger )
	{
		SetAvailableMapGoals( TEAM.ALLIES, false, "DEFUSE_barrier_1.*" );
		
		Util.MapDebugPrint( "Barrier1_Planted " );
	},

	Barrier1_Destroyed  = function( trigger )
	{
		Map.barrier1Destroyed = true;
		Util.EnableGoal( "ROUTE_barrier1" );
		SetAvailableMapGoals( TEAM.AXIS, true, "ROUTE_axis_stairs" );
		Map.SetAvail();
		
		SetAvailableMapGoals( TEAM.AXIS, false, "AIRSTRIKE_barrier1_axis.*" );
			
		Util.MapDebugPrint( "Barrier1_Destroyed " );
	},

	Second_barrier_Planted = function( trigger )
	{
		Util.MapDebugPrint( "Second_barrier_Planted" );
	},

	Second_barrier_Destroyed = function( trigger )
	{
		Map.barrier2Destroyed = true;
		//Map.SetAvail();
		
		SetAvailableMapGoals( TEAM.AXIS, true, "FLAG.*" );
		SetAvailableMapGoals( TEAM.AXIS, true, "PLANT_door" );
		
		Util.EnableGoal( "CAPPOINT_radio" );
		Util.MapDebugPrint( "Second_barrier_Destroyed" );
	},

	Old_city_wall_Planted = function( trigger )
	{
		Map.Old_city_wall_Dyno += 1;
		SetAvailableMapGoals( TEAM.ALLIES, false, "DEFEND_east.*" );
		SetGoalPriority( "DEFEND_wall.*", 0.85, TEAM.ALLIES);
		Util.MapDebugPrint( "Old_city_wall_Planted" );
	},

	Old_city_wall_Defused = function( trigger )
	{
		Map.Old_city_wall_Dyno -= 1;
		if (Map.Old_city_wall_Dyno < 1)
		{
			SetGoalPriority( "DEFEND_wall.*", 0.5, TEAM.ALLIES);
			Map.SetAvail();
		}
		Util.MapDebugPrint( "Old_city_wall_Defused" );
	},

	Old_city_wall_Destroyed = function( trigger )
	{
		Map.wallDestroyed = true;
		Util.EnableGoal( "ROUTE_wall" );
		SetAvailableMapGoals( TEAM.AXIS, true, "ROUTE_axis_stairs" );
		Map.SetAvail();
		SetAvailableMapGoals( TEAM.AXIS, true, "MOUNTMG42_north" );
		SetAvailableMapGoals( TEAM.ALLIES, false, ".*_east.*" );
		SetAvailableMapGoals( TEAM.ALLIES, false, ".*MG42_barrier1" );

		if (Map.bookTaken)
		{
			Util.MapDebugPrint( "Allies spawning at Dock." );
			Util.ChangeSpawn( TEAM.ALLIES, 0 ); 
		}
		else
		{
			Util.ChangeSpawn( TEAM.ALLIES, 1 ); 
		}
		
		Util.MapDebugPrint( "Old_city_wall_Destroyed" );
	},

	book1_Taken = function( trigger )
	{
		Map.bookTaken = true;
		Map.SetAvail();
		
		SetAvailableMapGoals( TEAM.AXIS, false, "CALLARTILLERY_rBarrier.*" );
		SetAvailableMapGoals( TEAM.AXIS, false, "MOUNTMG42.*" );
		SetAvailableMapGoals( TEAM.AXIS, false, "ARTILLERY_S.*" );
		SetAvailableMapGoals( TEAM.AXIS, true, "ARTILLERY_S_rBoat.*" );
		SetAvailableMapGoals( TEAM.AXIS, true, "MOUNTMG42_boat.*" );
		SetAvailableMapGoals( TEAM.AXIS, true, "MOUNTMG42_sidewall.*" );
		SetAvailableMapGoals( TEAM.AXIS, true, "AIRSTRIKE_rBoat.*" );
		SetAvailableMapGoals( TEAM.AXIS, true, "ATTACK_boat.*" );
		
		if(Map.wallDestroyed)
		{
			Util.MapDebugPrint( "Allies spawning at Dock." );
			Util.ChangeSpawn( TEAM.ALLIES, 0 ); 
			Wp.SetWaypointFlag( "doorblock", "axis", true );
			
			SetAvailableMapGoals( TEAM.ALLIES, true, "AIRSTRIKE_bBoatWall.*" );
			SetAvailableMapGoals( TEAM.ALLIES, false, "DEFEND_.*" );
			SetAvailableMapGoals( TEAM.ALLIES, true, "DEFEND_bBoat.*" );
			SetAvailableMapGoals( TEAM.ALLIES, true, "DEFEND_boat_radio.*" );
			SetAvailableMapGoals( TEAM.ALLIES, true, "DEFEND_boat_wall.*" );
			SetAvailableMapGoals( TEAM.ALLIES, true, "MOUNTMG42_bboatspawn.*" );
		}
		Util.SetMaxUsersInProgress(32, "FLAG.*");
		Util.MapDebugPrint( "book1_Taken" );
	},

	book1_Returned = function( trigger )
	{
		Map.bookTaken = false;
		Map.bookAtBoat = false;
		Map.SetAvail();
		
		Util.ChangeSpawn( TEAM.ALLIES, 1 ); 		
		Wp.SetWaypointFlag( "doorblock", "axis", false );
		
		SetAvailableMapGoals( TEAM.ALLIES, false, "AIRSTRIKE_bBoat.*" );
		SetAvailableMapGoals( TEAM.ALLIES, false, "GRENADE_bBoat.*" );
		SetAvailableMapGoals( TEAM.ALLIES, false, "DEFEND_bBoat.*" );
		SetAvailableMapGoals( TEAM.ALLIES, false, "MOUNTMG42_bboatspawn.*" );
		
		if (Map.wallDestroyed)
		{
			foreach( id and bot in BotTable )
			{
				if ( bot.GetTeam() == TEAM.ALLIES ) {
					if ( Map.Suicide && bot.GetReinforceTime() < 8 ) {
						bot.ExecCommand( "kill" );
					}
				}
			}
		}
		Util.SetMaxUsersInProgress(5, "FLAG.*"); // Axis should continue attacking the boat
		Util.MapDebugPrint( "book1_Returned" );
	},
	
	flag_Axis_Captured = function( trigger )
	{
		if ( TestMap )
			{ return; }
		SetAvailableMapGoals( TEAM.AXIS, true, "PLANT_barrier_2" );
		SetAvailableMapGoals( TEAM.AXIS, true, "PLANT_wall" );
		SetAvailableMapGoals( TEAM.AXIS, true, "ATTACK_book.*" );
		SetAvailableMapGoals( TEAM.AXIS, false, "ATTACK_east.*" );
		SetAvailableMapGoals( TEAM.AXIS, true, "CALLARTILLERY_rBarrier.*" );
		SetAvailableMapGoals( TEAM.AXIS, true, "ARTILLERY_S_rBarrier.*" );
		
		SetAvailableMapGoals( TEAM.ALLIES, true, "ARTILLERY_S_bBarrier.*" );
		SetAvailableMapGoals( TEAM.ALLIES, false, "AIRSTRIKE_barrier1_allied.*" );
		SetAvailableMapGoals( TEAM.ALLIES, false, "GRENADE_bBarrier.*" );
		SetAvailableMapGoals( TEAM.ALLIES, false, "DEFEND_bFlag.*" );
		SetAvailableMapGoals( TEAM.ALLIES, false, "CALLARTILLERY_bFlag.*" );
		SetAvailableMapGoals( TEAM.ALLIES, false, "ARTILLERY_S_bFlag.*" );

		RTCWUtil.LimitToClass( "CHECKPOINT.*", TEAM.ALLIES, CLASS.SOLDIER );
		Util.SetMaxUsersInProgress(1, "CHECKPOINT.*");
		
		Util.MapDebugPrint( "flag_Axis_Captured" );
	},

	flag_Allies_Captured = function( trigger )
	{
		if ( TestMap )
			{ return; }
		
		Util.SetMaxUsersInProgress(5, "CHECKPOINT.*");
		Util.MapDebugPrint( "flag_Allies_Captured" );
	},
	DisableCombatMove =
	{
		Name = "DisableCombatMove",
		TriggerOnClass = CLASS.ANYPLAYER,
		OnEnter = function( ent )
		{
			b = Util.GetBotByName( GetEntName( ent ) );
			if ( b ) {
				b.DisableCombatMovement = true;
				b.DisableBotPush( true );
			}
		},
		OnExit = function( ent )
		{
			b = Util.GetBotByName( GetEntName( ent ) );
			if ( b ) {
				b.DisableCombatMovement = false;
				b.DisableBotPush( false );
			}
		},
	},
	BookAtBoat =
	{
		Name = "BookAtBoat",
		TriggerOnClass = CLASS.ANYPLAYER,
		OnEnter = function( ent )
		{
			if ( TestMap ) {
				return;
			}

			if ( GetEntTeam( ent ) == TEAM.AXIS ) {
				if ( GetEntFlags( ent, ENTFLAG.CARRYINGGOAL ) ) {
					Map.bookAtBoat = true;
					Util.MapDebugPrint( "bookAtBoat" );
				}
			}
		},
		OnExit = function( ent )
		{
			if ( TestMap ) {
				return;
			}
		},
	},
	DocsSide =
	{
		Name = "DocsSide",
		TriggerOnClass = CLASS.ANYPLAYER,
		OnEnter = function( ent )
		{
			if ( TestMap ) {
				return;
			}

			if ( GetEntTeam( ent ) == TEAM.AXIS ) {
				if ( GetEntFlags( ent, ENTFLAG.CARRYINGGOAL ) ) {
					RTCWUtil.OneBotSayTeam( TEAM.ALLIES, "Docs are at the balcony!" );
					SetAvailableMapGoals( TEAM.ALLIES, true, "AIRSTRIKE_bBoat.*" );
					SetAvailableMapGoals( TEAM.ALLIES, true, "GRENADE_bBoat.*" );
					b = Util.GetBotByName( GetEntName( ent ) );
					if ( b ) {
						b.SayTeam( "I'm going balcony!" );
					}
					Util.MapDebugPrint( "DocsSide" );
				}
			}
		},
		OnExit = function( ent )
		{
			if ( TestMap ) {
				return;
			}
		},
	},
	AxisOnBoat =
	{
		Name = "AxisOnBoat",
		TriggerOnClass = CLASS.ANYPLAYER,
		OnEnter = function( ent )
		{
			if ( TestMap ) {
				return;
			}
			if ( GetEntTeam( ent ) == TEAM.AXIS ) {
				Map.BoatPlayers += 1;
				Map.Airstrike.boatas.Enabled = false;
			}
		},
		OnExit = function( ent )
		{
			if ( TestMap ) {
				return;
			}
			if ( GetEntTeam( ent ) == TEAM.AXIS ) {
				Map.BoatPlayers -= 1;
				if ( Map.BoatPlayers == 0 ) {
					Map.Airstrike.boatas.Enabled = true;
				}
			}
		},
	},
};

global OnMapLoad = function()
{


	OnTriggerRegion(AABB(-888.000,-1013.000,-126.000,-766.000,-691.000,-52.000),RegionTrigger.DisableCombatMovement); // Barrier 2
	OnTriggerRegion(AABB(-760.000,881.000,161.000,-583.000,1136.000,253.000),RegionTrigger.DisableCombatMovement); // MG42 House
	OnTriggerRegion(AABB(-1084.459,2783.428,129.125,-755.022,3088.547,374.828),RegionTrigger.DisableCombatMovement); //boat
	OnTriggerRegion(AABB(1789.561,-588.340,321.125,2183.240,-394.550,461.125),RegionTrigger.DisableCombatMovement); //barrier1
	OnTriggerRegion(AABB(-563.977,-1152.875,-150.875,-68.010,-1038.042,-15.026),RegionTrigger.DisableCombatMovement);//barrier2
	OnTriggerRegion(AABB(576.594,562.691,274.778,631.592,1002.864,438.998),RegionTrigger.DisableCombatMovement); //MG42_north
	OnTriggerRegion(AABB(-151.902,88.242,284.077,248.810,164.591,417.687),RegionTrigger.DisableCombatMovement); //cables from street to center
	
	SpawnBoxes = OnTriggerRegion(AABB(2111.000,-591.000,321.000,2432.000,-447.000,459.000),Map.DisableCombatMove);
	SpawnBridge = OnTriggerRegion(AABB(1608.000,513.000,319.000,3132.000,1142.000,395.000),Map.DisableCombatMove);
	Wall = OnTriggerRegion(AABB(-512.000,1167.000,-126.000,-319.000,1209.000,-13.000),Map.BookAtBoat);
	MG42 = OnTriggerRegion(AABB(82.000,2047.000,33.000,120.000,2144.000,131.000),Map.BookAtBoat);
	SideWall = OnTriggerRegion(AABB(-1280.000,231.000,129.000,-1151.000,272.000,244.000),Map.BookAtBoat);
	DocsSide = OnTriggerRegion(AABB(-1536.000,639.000,129.000,-904.000,1200.000,203.000),Map.DocsSide);
	AxisOnBoat = OnTriggerRegion(AABB(-1199.000,1571.000,9.000,-575.000,2072.000,179.000),Map.AxisOnBoat);
	
	Util.AddUseWp( "PLANT_barrier_1", "barrier1_1" );
	Util.AddUseWp( "PLANT_barrier_2", "barrier2_1" );
	Util.AddUseWp( "PLANT_wall", "wall1" );
	
	OnTrigger( "Planted at the barrier #1.", Map.Barrier1_Planted ); //
	OnTrigger( "the barrier #1 Destroyed.", Map.Barrier1_Destroyed ); //
	OnTrigger( "Planted at barrier #2.", Map.Second_barrier_Planted ); //
	OnTrigger( "barrier #2 Destroyed.", Map.Second_barrier_Destroyed ); //
	OnTrigger( "Planted at The wall.", Map.Old_city_wall_Planted ); //
	OnTrigger( "Defused at Old city wall.", Map.Old_city_wall_Defused );
	OnTrigger( "The wall Destroyed.", Map.Old_city_wall_Destroyed );
	OnTrigger( "Axis have stolen Password book!", Map.book1_Taken ); //
	OnTrigger( "Flag returned Password book!", Map.book1_Returned ); //
	OnTrigger( "Axis capture the center flag!", Map.flag_Axis_Captured );
	OnTrigger( "Allies reclaim the center flag!", Map.flag_Allies_Captured );
	// Planted at the door.
	// the door Destroyed.
	// 
	// 

	Util.DisableGoal( ".*", true );
	Util.DisableGoal( "ROUTE_wall" );
	
	RTCWUtil.SetPrimaryGoals( 1.0 );
	SetGoalPriority( "CALL.*", 0.99 );
	SetGoalPriority( "ARTILLERY.*", 0.99 );
	SetGoalPriority( "AIRSTRIKE.*", 0.95 );
	SetGoalPriority( "ATTACK_east.*", 0.91 );
	SetGoalPriority( "MOUNGMG42_boat", 0.86 );
	SetGoalPriority( "MOUNGMG42_sidewall", 0.86 );
	SetGoalPriority( "PLANT_barrier_1", 0.93);
	
	Util.SetMaxUsersInProgress(1, "ATTACK_east.*");
	Util.SetMaxUsersInProgress(1, "DEFEND_bFlag.*");
	Util.EnableGoal( "CHECKPOINT.*" );
	
	SetMapGoalProperties( "ATTACK_.*", {mincamptime = 15, maxcamptime = 30} );
	SetMapGoalProperties( "DEFEND_.*", {mincamptime = 20, maxcamptime = 40} );
	SetMapGoalProperties( "PANZER_.*", {mincamptime = 30, maxcamptime = 60} );
	SetMapGoalProperties( "MOUNT_.*", {mincamptime = 60, maxcamptime = 90} );

	SetAvailableMapGoals( TEAM.ALLIES, true, "DEFEND_bFlag.*" );
	//SetAvailableMapGoals( TEAM.ALLIES, true, "CALLARTILLERY_bFlag.*" );
	//SetAvailableMapGoals( TEAM.ALLIES, true, "ARTILLERY_S_bFlag.*" );
	SetAvailableMapGoals( TEAM.ALLIES, true, "AIRSTRIKE_barrier1_allied.*" );
	SetAvailableMapGoals( TEAM.ALLIES, true, "GRENADE_bBarrier.*" );
		
	SetAvailableMapGoals( TEAM.AXIS, true, "AIRSTRIKE_barrier1_axis" );
	SetAvailableMapGoals( TEAM.AXIS, true, "ATTACK_east.*" );
	SetAvailableMapGoals( TEAM.AXIS, true, "PLANT_Barrier_1" );
	
	RTCWUtil.LimitToClass( "ATTACK_east.*", TEAM.AXIS, CLASS.LIEUTENANT, CLASS.SOLDIER );
	RTCWUtil.LimitToClass( "MOUNTMG42.*", TEAM.AXIS, CLASS.ENGINEER, CLASS.SOLDIER );
	RTCWUtil.LimitToClass( "GRENADE.*", TEAM.ALLIES, CLASS.ENGINEER, CLASS.SOLDIER );
	RTCWUtil.LimitToClass( "GRENADE_bBarrier1.*", TEAM.ALLIES, CLASS.ENGINEER );
	
	Wp.SetWaypointFlag( "doorblock", "axis", false );

	MapRoutes =
	{
		FLAG_Password_book = {
			ROUTE_street_spawn = {
				ROUTE_axis_stairs = { ROUTE_axis_cp = {}},
				ROUTE_center = {},
				ROUTE_center_west = {},
				ROUTE_center_south = {},
				ROUTE_center_east_down = {},
				ROUTE_center_north_east = {},
			},
			ROUTE_axis_spawn = {
				ROUTE_barrier1 = { ROUTE_street_spawn = {}},
				ROUTE_bridge = { ROUTE_street_spawn = {}},
				ROUTE_axis_stairs = { Weight=2 },
			}
		},
		CAPPOINT_radio = 
		{
			ROUTE_book = 
			{
				ROUTE_side_gate = 
				{
					ROUTE_boat_ramp = 
					{
						Weight = 2,
						ROUTE_boat_south_east = {},
					},
					ROUTE_boat_down = {ROUTE_boat_south_east = {},},
					ROUTE_boat_south_east = {},
				},
				ROUTE_center_east_down =
				{
					Weight = 2,
					ROUTE_center_north_down =
					{
						Weight = 2,
						ROUTE_wall = 
						{
							ROUTE_boat_down = {ROUTE_boat_south_east = {},},
							ROUTE_boat_south_east = {},
						},
					},
					ROUTE_allied_cp =
					{
						ROUTE_boat_down = {ROUTE_boat_south_east = {},},
						ROUTE_boat_south_east = {},
					},
				},
			}
		},
		PLANT_wall = {
			ROUTE_street_spawn = {
				ROUTE_center_north_east = {},
				ROUTE_center_north_down = {},
				ROUTE_center_west = {},
				ROUTE_center_east_down = {},
			},
			ROUTE_axis_spawn = {
				ROUTE_barrier1 = { ROUTE_street_spawn = {}},
				ROUTE_axis_stairs = { ROUTE_axis_cp = {}},
				ROUTE_bridge = {
					ROUTE_center_north_east = {},
					ROUTE_center_north_down = {},
				},
			}
		},
		ATTACK_boat1 = 
		{
			ROUTE_street_spawn = 
			{
				ROUTE_center_north_east =
				{
					ROUTE_wall = 
					{
						ROUTE_boat_south = {},
						ROUTE_boat_down = {},
					},
				},
				ROUTE_wall = 
				{
					ROUTE_boat_south = {},
					ROUTE_boat_down = {},
				},
				ROUTE_allied_cp = 
				{
					Weight = 2,
					ROUTE_boat_south = {},
					ROUTE_boat_down = {},
				},
				ROUTE_side_gate = 
				{
					Weight = 2,
					ROUTE_boat_south = {},
					ROUTE_boat_down = {},
				
				},
			}
		},
		DEFEND_book1 = 
		{
			ROUTE_dock_spawn = 
			{
				ROUTE_boat_south = {},
				ROUTE_boat_down = { Weight=2 },
			}
		},
		CHECKPOINT_flag = 
		{
			ROUTE_rspawn = 
			{
				ROUTE_barrier1 = {},
				ROUTE_bridge = {},
			},
			ROUTE_dock_spawn =
			{
				ROUTE_allied_cp = {},
			},
			ROUTE_bspawnmid =
			{
				ROUTE_alley =
				{
					ROUTE_axis_cp =
					{
						ROUTE_axis_stairs = {},
					},
				},
			},
		},
	};
	MapRoutes.PLANT_barrier_2 = MapRoutes.FLAG_Password_book;
	MapRoutes.ATTACK_book1 = MapRoutes.FLAG_book1;
	MapRoutes.ATTACK_book2 = MapRoutes.ATTACK_book1;
	MapRoutes.ATTACK_book3 = MapRoutes.ATTACK_book1;
	MapRoutes.ATTACK_wall1 = MapRoutes.ATTACK_book1;
	MapRoutes.ATTACK_wall2 = MapRoutes.ATTACK_book1;
	MapRoutes.ATTACK_boat2 = MapRoutes.ATTACK_boat1;
	MapRoutes.ATTACK_boat3 = MapRoutes.ATTACK_boat1;
	MapRoutes.ATTACK_boat4 = MapRoutes.ATTACK_boat1;
	MapRoutes.ATTACK_boat5 = MapRoutes.ATTACK_boat1;
	MapRoutes.DEFEND_book2 = MapRoutes.DEFEND_book1;
	MapRoutes.DEFEND_book3 = MapRoutes.DEFEND_book1;
	MapRoutes.DEFEND_book4 = MapRoutes.DEFEND_book1;
	MapRoutes.DEFEND_book5 = MapRoutes.DEFEND_book1;
	MapRoutes.DEFEND_book6 = MapRoutes.DEFEND_book1;
	MapRoutes.DEFEND_book7 = MapRoutes.DEFEND_book1;
	MapRoutes.DEFEND_book8 = MapRoutes.DEFEND_book1;
	MapRoutes.DEFEND_book9 = MapRoutes.DEFEND_book1;
	Util.Routes(MapRoutes);
	
	yield();yield();
	RTCWUtil.KillEntities( {118,119,135,136,137,138,139,143,144,145,146,174,175} );

	Util.MapDebugPrint( "Omni-bot map script for " + GetMapName() + " executed." );
};
global OnBotJoin = function( bot )
{
		
	RTCWUtil.SelectSoldierWeapons( TEAM.AXIS, bot, WEAPON.PANZERFAUST, WEAPON.VENOM );
	RTCWUtil.SelectSoldierWeapons( TEAM.ALLIES, bot, WEAPON.PANZERFAUST, WEAPON.VENOM );
	RTCWUtil.NoSnipe( bot );

	//default spawn
	bot.ChangeSpawnPoint( 2 );
};