global Map =
{
	Debug = 1,
	DoorDown = 0,
	PassComplete = 0,
	PartsTaken = 0,
	PassDoorOpen = 0,
	PlayersAtPass = 0,
	digitCount = 1,
	PanzbFlagBots = 0,
	PanzbFlagFired = false,
	PanzrFlagBots = 0,
	PanzrFlagFired = false,
	DispenseAmmoTime = 1,
	DontDispenseAmmo = false,

	Switches =
	{
		garage_door =
		{
			Enabled = true,
			Priority = 0,
			WaypointName = "switch_2",
			Timeout = 2000,
		},
	},
	
	Airstrike =
	{
		btransmit1 =
		{
			Enabled = true,
			Team = ( 1 << TEAM.ALLIES ),
			Waypoint = "bastransmit1",
		},
	},
	Navigation =
	{
		bpanzflag =
		{
			navigate = function( _this )
			{
				// this is just using the barrier as they eval since its simple
				// others will need to eval other map vars
				if ( !Map.PanzbFlagFired && Map.PanzbFlagBots == 0 && _this.Bot.HasWeapon( WEAPON.PANZERFAUST ) ) {
					Util.MapDebugPrint("Panzering Flag");
					wpTable = Util.WpNameInfo( "bPanzFlag" );
					Map.PanzbFlagBots += 1;
					Map.PanzbFlagFired = true; // Even if he doesnt make it, don't try doing it again because teammates will be there by then

					_this.Bot.HoldButton( BTN.SPRINT, 999 );
					if ( _this.Goto( wpTable.position ) == EVENT.PATH_SUCCESS ) {
						_this.Bot.ReleaseButton( BTN.SPRINT );
						if ( _this.Bot.IsWeaponCharged( WEAPON.PANZERFAUST, 0 ) ) {
							_this.AddAimRequest( Priority.High, "facing", wpTable.facing );
							_this.AddWeaponRequest( Priority.High, WEAPON.PANZERFAUST );
							_this.BlockForWeaponChange( WEAPON.PANZERFAUST );
							sleep( 0.3 ); // make sure its ready to fire
							sleep( 2 ); // Wait for axis to arrive
							_this.Bot.HoldButton( BTN.ATTACK1, 2 );
							sleep( 2 );
						}
					}
					Map.PanzbFlagBots -= 1;
				}
				yield();
			},
		},
		rpanzflag =
		{
			navigate = function( _this )
			{
				// this is just using the barrier as they eval since its simple
				// others will need to eval other map vars
				if ( !Map.PanzrFlagFired && Map.PanzrFlagBots == 0 && _this.Bot.HasWeapon( WEAPON.PANZERFAUST ) ) {
					Util.MapDebugPrint("Axis Panzering Flag");
					wpTable = Util.WpNameInfo( "rPanzFlag" );
					Map.PanzrFlagBots += 1;
					Map.PanzrFlagFired = true; // Even if he doesnt make it, don't try doing it again because teammates will be there by then

					_this.Bot.HoldButton( BTN.SPRINT, 999 );
					if ( _this.Goto( wpTable.position ) == EVENT.PATH_SUCCESS ) {
						_this.Bot.ReleaseButton( BTN.SPRINT );
						if ( _this.Bot.IsWeaponCharged( WEAPON.PANZERFAUST, 0 ) ) {
							_this.AddAimRequest( Priority.High, "facing", wpTable.facing );
							_this.AddWeaponRequest( Priority.High, WEAPON.PANZERFAUST );
							_this.BlockForWeaponChange( WEAPON.PANZERFAUST );
							sleep( 0.3 ); // make sure its ready to fire
							//sleep( 2 ); // Wait for axis to arrive
							_this.Bot.HoldButton( BTN.ATTACK1, 2 );
							sleep( 2 );
						}
					}
					Map.PanzrFlagBots -= 1;
				}
				yield();
			},
		},
	},

	AlliesAtPass =
	{
		Name = "AlliesAtPass",
		TriggerOnClass = CLASS.ANYPLAYER,

		OnEnter = function(ent)
		{
			if( GetEntTeam(ent) == TEAM.ALLIES )
			{
				Map.PlayersAtPass += 1;
				Util.MapDebugPrint("Allied players near password: " + Map.PlayersAtPass);
				Map.ReadPassword();
			}
		},
		OnExit = function(ent)
		{
			if( GetEntTeam(ent) == TEAM.ALLIES )
			{
				Map.PlayersAtPass -= 1;
				Util.MapDebugPrint("Allied players near password: " + Map.PlayersAtPass);
			}
		},
	},

	Service_Door_Planted = function( trigger )
	{	
		//SetAvailableMapGoals( TEAM.AXIS, false, "DEFUSE.*" );
		
		Util.MapDebugPrint( "Service_Door_Planted" );
	},
	Service_Door_Destroyed = function( trigger )
	{
		Util.EnableGoal( "ROUTE_OverView_Ladder_Access" );
		Util.EnableGoal( "ROUTE_service_shaft" );
		
		SetAvailableMapGoals( TEAM.AXIS, false, "DEFEND_rFlag.*" );
		SetAvailableMapGoals( TEAM.AXIS, false, "DEFEND_rEngService.*" );
		RTCWUtil.LimitToClass( "CHECKPOINT.*", TEAM.AXIS, CLASS.SOLDIER );
		
		if (!Map.PassComplete)
		{
			Map.Defend_Office();
		}
		
		Util.MapDebugPrint( "Service_Door_Destroyed" );
	},

	SetNumSwitch = function()
	{
		SetAvailableMapGoals( TEAM.ALLIES, false, "SWITCH_num.*");
		if (Map.password && Map.digitCount < 5 && Map.PassComplete == 0)
		{
			SetAvailableMapGoals( TEAM.ALLIES, true, "SWITCH_num" + Map.password[Map.digitCount]);
		}
		Util.MapDebugPrint( "SetNumSwitch" );
	},

	// works fine in rtcw
	ReadPassword = function()
	{
		if (Map.PassDoorOpen != 2 || Map.PlayersAtPass == 0 || Map.password){ return; }

		Map.password = {};
		for(i=1; i<=4; i+=1)
		{
			v = GetEntFacing(GetEntityByName("t_disp" + i));
			x=v.x; z=v.z;
			if(x==1){ n=1; }
			else if(x==-1){ n=5; }
			else if(z==1){ n=3; }
			else if(z==-1){ n=7; }
			else if(x>0){
				if(z>0){ n=2; } else { n=8; }
			}else{
				if(z>0){ n=4; } else { n=6; }
			}
			Map.password[i] = n;
		}
		Util.MapDebugPrint( "Password is " + Map.password[1] + Map.password[2] + Map.password[3] + Map.password[4] );
		
		RTCWUtil.OneBotSayTeam( TEAM.ALLIES, "Password: " + Map.password[1] + Map.password[2] + Map.password[3] + Map.password[4]  );
		RTCWUtil.OneBotSayTeam( TEAM.AXIS, "Allies have the password!" );

		Map.SetNumSwitch();

		SetAvailableMapGoals( TEAM.ALLIES, false, "ATTACK_password.*" );
		SetAvailableMapGoals( TEAM.ALLIES, false, "PANZER_bPassword.*" );
		SetAvailableMapGoals( TEAM.ALLIES, true, "DEFEND_Endoarm_Room_.*" );
		SetAvailableMapGoals( TEAM.ALLIES, true, "PANZER_bEndoarm.*" );

		SetAvailableMapGoals( TEAM.AXIS, false, "DEFEND_Password_Room_.*" );
		SetAvailableMapGoals( TEAM.AXIS, false, "AIRSTRIKE_rPassword.*" );
		SetAvailableMapGoals( TEAM.AXIS, false, "CALLARTILLERY_S_rPassword.*" );
		SetAvailableMapGoals( TEAM.AXIS, true, "DEFEND_Endoarm_Room_.*" );
		SetAvailableMapGoals( TEAM.AXIS, false, "CHECKPOINT_allied_flag" );
		SetAvailableMapGoals( TEAM.AXIS, true, "DEFEND_rAbort.*" );
		SetAvailableMapGoals( TEAM.AXIS, true, "AIRSTRIKE_rEndoarm.*" );
		SetAvailableMapGoals( TEAM.AXIS, false, "DEFEND_OverView_.*" );
		
		Util.SetMaxUsersInProgress(1, "SWITCH_Password_Door");
	},

	Password_Entered = function( trigger )
	{
		SetAvailableMapGoals( TEAM.AXIS, true, "SWITCH_Password_Reset" );
		SetAvailableMapGoals( TEAM.AXIS, false, "SWITCH_Password_Door" );

		Util.MapDebugPrint( "Password_Entered" );
	},
	
	Defend_Office = function()
	{
		RTCWUtil.OneBotSayTeam( TEAM.AXIS, "Defend the Office!");
		SetAvailableMapGoals( TEAM.AXIS, true, "DEFEND_Password_Room_.*" );
		SetAvailableMapGoals( TEAM.AXIS, true, "DEFEND_OverView_.*" );
		SetAvailableMapGoals( TEAM.AXIS, true, "ARTILLERY_S_rPassword.*" );
		SetAvailableMapGoals( TEAM.AXIS, true, "CALLARTILLERY_rPassword.*" );
		SetAvailableMapGoals( TEAM.AXIS, true, "AIRSTRIKE_rPassword.*" );
	},

	SetPassDoor = function()
	{
		if (Map.PassDoorOpen)
		{
			Util.LimitToTeam(TEAM.AXIS, "SWITCH_Password_Door");
			if(!Map.password)
			{
				Util.SetMaxUsersInProgress(5, "SWITCH_Password_Door");
				SetAvailableMapGoals( TEAM.ALLIES, true, "ATTACK_password.*" );
			}
		}else{
			SetAvailableMapGoals( TEAM.AXIS, false, "SWITCH_Password_Door" );
			if(!Map.password)
			{
				SetAvailableMapGoals( TEAM.ALLIES, true, "SWITCH_Password_Door" );
				SetAvailableMapGoals( TEAM.ALLIES, true, "ATTACK_bPassword.*" );
				SetAvailableMapGoals( TEAM.ALLIES, false, "ATTACK_password.*" );
				Util.SetMaxUsersInProgress(32, "SWITCH_Password_Door");
				
			}
		}
	},

	Password_Reset = function( trigger )
	{
		Map.password = null;
		Map.digitCount = 1;
		SetAvailableMapGoals( TEAM.AXIS, false, "SWITCH_Password_Reset" );
		Map.SetPassDoor();

		SetAvailableMapGoals( TEAM.ALLIES, false, "DEFEND_Endoarm_Room_.*" );

		SetAvailableMapGoals( TEAM.AXIS, true, "DEFEND_Password_Room_.*" );
		SetAvailableMapGoals( TEAM.AXIS, false, "DEFEND_rFlag.*" );
		SetAvailableMapGoals( TEAM.AXIS, false, "DEFEND_Endoarm_Room_.*" );

		Map.ReadPassword();

		Util.MapDebugPrint( "Password_Reset" );
	},

	Password_Sucessful = function( trigger )
	{
		Map.PassComplete = 1;

		Util.DisableGoal("SWITCH_Password_Door");
		SetAvailableMapGoals( TEAM.AXIS, false, "SWITCH_Password_Reset" );
		SetAvailableMapGoals( TEAM.AXIS, false, "DEFEND_Password_Room_.*" );
		SetAvailableMapGoals( TEAM.AXIS, false, "CHECKPOINT.*" );
		SetAvailableMapGoals( TEAM.AXIS, false, "DEFEND_rAbort.*" );
		SetAvailableMapGoals( TEAM.AXIS, false, "DEFEND_rEng.*" );

		SetAvailableMapGoals( TEAM.ALLIES, false, "ATTACK_password.*" );
		SetAvailableMapGoals( TEAM.ALLIES, false, "ATTACK_bPassword.*" );
		SetAvailableMapGoals( TEAM.ALLIES, false, "DEFEND_Endoarm_Room_.*" );
		SetAvailableMapGoals( TEAM.ALLIES, true, "FLAG_Endoarm" );
		SetAvailableMapGoals( TEAM.ALLIES, true, "CAPPOINT_Truck" );

		Util.MapDebugPrint( "Password_Sucessful" );
	},

	Endoarm_Taken = function( trigger )
	{
		SetAvailableMapGoals( TEAM.AXIS, false, "DEFEND_Endoarm_Room_.*" );
		SetAvailableMapGoals( TEAM.AXIS, false, "DEFEND_OverView_.*" );
		SetAvailableMapGoals( TEAM.AXIS, false, "AIRSTRIKE_rPassword.*" );
		SetAvailableMapGoals( TEAM.AXIS, false, "CHECKPOINT.*" );
		SetAvailableMapGoals( TEAM.AXIS, false, "DEFEND_rAbort.*" );
		SetAvailableMapGoals( TEAM.AXIS, false, "DEFEND_rEng.*" );
		SetAvailableMapGoals( TEAM.AXIS, true, "DEFEND_rTruck.*" );
		SetAvailableMapGoals( TEAM.AXIS, true, "CALLARTILLERY_rTruck.*" );
		SetAvailableMapGoals( TEAM.AXIS, true, "ARTILLERY_S_rTruck.*" );

		SetAvailableMapGoals( TEAM.ALLIES, true, "ATTACK_truck.*" );
		SetAvailableMapGoals( TEAM.ALLIES, true, "CALLARTILLERY_bTruck.*" );
		SetAvailableMapGoals( TEAM.ALLIES, true, "ARTILLERY_S_bTruck.*" );
		SetAvailableMapGoals( TEAM.ALLIES, true, "MOUNTMG42_Garage.*" );

		Map.PartsTaken = 1;
		Util.MapDebugPrint( "Endoarm_Taken" );
	},

	Endoarm_Returned = function( trigger )
	{
		SetAvailableMapGoals( TEAM.AXIS, true, "DEFEND_Endoarm_Room_.*" );
		SetAvailableMapGoals( TEAM.AXIS, true, "CHECKPOINT.*" );
		SetAvailableMapGoals( TEAM.AXIS, false, "DEFEND_OverView_.*" );
		SetAvailableMapGoals( TEAM.AXIS, false, "DEFEND_rTruck.*" );
		SetAvailableMapGoals( TEAM.AXIS, false, "CALLARTILLERY_rTruck.*" );
		SetAvailableMapGoals( TEAM.AXIS, false, "ARTILLERY_S_rTruck.*" );

		SetAvailableMapGoals( TEAM.ALLIES, false, "ATTACK_truck.*" );
		SetAvailableMapGoals( TEAM.ALLIES, false, "CALLARTILLERY_bTruck.*" );
		SetAvailableMapGoals( TEAM.ALLIES, false, "ARTILLERY_S_bTruck.*" );
		SetAvailableMapGoals( TEAM.ALLIES, false, "MOUNTMG42_Garage.*" );

		/*if(Map.DoorDown){
			SetAvailableMapGoals( TEAM.AXIS, true, "SWITCH_Garage_Door" );
		}*/
		Map.PartsTaken = 0;
		Util.MapDebugPrint( "Endoarm_Returned" );
	},

	Endoarm_Secured = function( trigger )
	{
		ETUtil.WinningChat( TEAM.ALLIES );
		ETUtil.LosingChat( TEAM.AXIS );
		Util.MapDebugPrint( "Endoarm_Secured" );
	},

	allied_flag_Axis_Captured = function( trigger )
	{
		Util.SetMaxUsersInProgress(6, "CHECKPOINT_allied_flag");
		Util.MapDebugPrint( "allied_flag_Axis_Captured" );
	},

	allied_flag_Allies_Captured = function( trigger )
	{
		Util.SetMaxUsersInProgress(1, "CHECKPOINT_allied_flag");
		Map.DontDispenseAmmo = true;
		
		SetAvailableMapGoals( TEAM.ALLIES, true, "ARTILLERY_S_bPassword.*" );
			
		Util.MapDebugPrint( "allied_flag_Allies_Captured" );
	},


	door_trigger = function( trigger )
	{
	
		vel = ToVector(trigger.Action);
		if ( vel.z > 0 )
			{
			Map.DoorDown = 0;
			Map.Switches.garage_door.Enabled = true;
			SetAvailableMapGoals( TEAM.AXIS, false, "SWITCH_Garage_Door" );
			Util.MapDebugPrint( "door_closed" );
			}
		else if ( vel.z < 0 )
			{
			Map.DoorDown = 1;
			Map.Switches.garage_door.Enabled = false;
			if ( Map.PartsTaken == 0 )
			{
				SetAvailableMapGoals( TEAM.AXIS, true, "SWITCH_Garage_Door" );
			}
			Util.MapDebugPrint( "door_open" );
			}
	},

	password_trigger = function( trigger )
	{
		if ( Map.PassComplete == 1 )
			{ return; }

		vel = ToVector(trigger.Action);
		// vel.y can be zero if the button is pressed twice
		if ( vel.y < 0 )
		{
			Map.PassDoorOpen = 0;
			Map.SetPassDoor();
			Util.MapDebugPrint( "Pass_door_closed" );
		}
		else if ( vel.y > 0 )
		{
			Util.MapDebugPrint( "Pass_door_opening" );
			Map.PassDoorOpen = 1;
			Map.SetPassDoor();
			sleep(6); // Allow time for door to open
			if (Map.PassDoorOpen == 1) {
				Map.PassDoorOpen = 2;
				Map.ReadPassword();
			}
		}
		Util.MapDebugPrint( "password_trigger" );
	},

	password_enter = function( trigger )
	{
		Util.MapDebugPrint( "password_enter1" );
		if (ToVector(trigger.Action).z == -135000)
		{
			Util.MapDebugPrint( "Wrong password" );
			Map.digitCount = 1;
		}
		else
		{
			if (Map.digitCount<5) {
				Util.MapDebugPrint( "Password " + Map.digitCount + ". digit entered");
			}
			Map.digitCount += 1;
		}
		Map.SetNumSwitch();
		Util.MapDebugPrint( "password_enter" );
	},

	password_door_button_start = function( trigger )
	{
		Util.DisableGoal("SWITCH_Password_Door");
		Util.MapDebugPrint( "password_door_button_start" );
	},
	
	password_compare = function (num)
	{
		print ("^1---------");
		print ( Map.password[Map.digitCount]);
		print (num);
		if ( Map.password[Map.digitCount] == num)
		{
			if (Map.digitCount<5) {
				Util.MapDebugPrint( "Password " + Map.digitCount + ". digit entered");
			}
			RTCWUtil.OneBotSayTeam( TEAM.AXIS, "Allies have entered " + Map.digitCount + " numbers!" );
			RTCWUtil.OneBotSayTeam( TEAM.ALLIES, "We have entered " + Map.digitCount + " numbers! Password: " + Map.password[1] + Map.password[2] + Map.password[3] + Map.password[4] );
			Map.digitCount += 1;
			Util.MapDebugPrint( "correct digit" );
		}
		else
		{
			Util.MapDebugPrint( "wrong" );
			Map.digitCount = 1;
		}
		Map.SetNumSwitch();
		Util.MapDebugPrint( "password_compare" );
	},
	
	button1 = function( trigger )
	{
		Map.password_compare (1);
		Util.MapDebugPrint( "button1" );
	},
	button2 = function( trigger )
	{
		Map.password_compare (2);
		Util.MapDebugPrint( "button2" );
	},
	button3 = function( trigger )
	{
		Map.password_compare (3);
		Util.MapDebugPrint( "button3" );
	},
	button4 = function( trigger )
	{
		Map.password_compare (4);
		Util.MapDebugPrint( "button4" );
	},
	button5 = function( trigger )
	{
		Map.password_compare (5);
		Util.MapDebugPrint( "button5" );
	},
	button6 = function( trigger )
	{
		Map.password_compare (6);
		Util.MapDebugPrint( "button6" );
	},
	button7 = function( trigger )
	{
		Map.password_compare (7);
		Util.MapDebugPrint( "button7" );
	},
	button8 = function( trigger )
	{
		Map.password_compare (8);
		Util.MapDebugPrint( "button8" );
	},
	
	DisableCombatMove =
	{
		Name = "DisableCombatMove",
		TriggerOnClass = CLASS.ANYPLAYER,
		OnEnter = function( ent )
		{
			b = Util.GetBotByName( GetEntName( ent ) );
			if ( b ) {
				b.DisableCombatMovement = true;
				b.DisableBotPush( true );
			}
		},
		OnExit = function( ent )
		{
			b = Util.GetBotByName( GetEntName( ent ) );
			if ( b ) {
				b.DisableCombatMovement = false;
				b.DisableBotPush( false );
			}
		},
	},
};

global OnMapLoad = function()
{
	Sewer = OnTriggerRegion( AABB( -608.000,1503.000,225.000,-95.000,2016.000,327.000 ), Map.DisableCombatMove );
	Abort = OnTriggerRegion( AABB( -544.000,1987.000,769.000,-159.000,2336.000,878.000 ), Map.DisableCombatMove );
	Password = OnTriggerRegion(AABB(-2004.000,2423.000,769.000,-1719.000,2784.000,875.000),Map.AlliesAtPass);

	OnTrigger( "Planted at Service Door.", Map.Service_Door_Planted );
	OnTrigger( "Allies breach the Service Door!", Map.Service_Door_Destroyed );
	OnTrigger( "Process started with valid password!", Map.Password_Entered );
	OnTrigger( "Process aborted...", Map.Password_Reset );
	OnTrigger( "Process finished!", Map.Password_Sucessful );
	OnTrigger( "Allies have stolen the Endoarm!", Map.Endoarm_Taken );
	OnTrigger( "Flag returned Endoarm!", Map.Endoarm_Returned );
	OnTrigger( "Allies escaped with the Endoarm!", Map.Endoarm_Secured );
	OnTrigger( "Allies capture the Service Halls!", Map.allied_flag_Allies_Captured );
	OnTrigger( "Axis reclaims the Service Halls!", Map.allied_flag_Axis_Captured );
	OnTrigger( "lift_switch_mover_goto", Map.door_trigger ); // martin - fixed for rtcw version
	OnTrigger( "password_door_goto", Map.password_trigger ); 
	OnTrigger( "password_door_manager", Map.password_door_button_start);
	
	// Buttons
	OnTrigger( "button1", Map.button1 );
	OnTrigger( "button2", Map.button2 );
	OnTrigger( "button3", Map.button3 );
	OnTrigger( "button4", Map.button4 );
	OnTrigger( "button5", Map.button5 );
	OnTrigger( "button6", Map.button6 );
	OnTrigger( "button7", Map.button7 );
	OnTrigger( "button8", Map.button8 );

	SetMapGoalProperties( "ATTACK_.*", {mincamptime = 15, maxcamptime = 30} );
	SetMapGoalProperties( "DEFEND_.*", {mincamptime = 20, maxcamptime = 40} );
	SetMapGoalProperties( "PANZER_.*", {mincamptime = 60, maxcamptime = 90} );
	SetMapGoalProperties( "MOUNT.*", {mincamptime = 999, maxcamptime = 999} );
	SetMapGoalProperties( "DEFEND_rAbort.*", {mincamptime = 999, maxcamptime = 999} );
	SetMapGoalProperties( "DEFEND_rEngService.*", {mincamptime = 999, maxcamptime = 999} );

	Util.DisableGoal( ".*", true ); // all but routes
	RTCWUtil.SetPrimaryGoals( 1.0 );

	Util.DisableGoal( "ROUTE_OverView_Ladder_Access" );
	Util.DisableGoal( "ROUTE_service_shaft" );

	SetAvailableMapGoals( TEAM.ALLIES, true, "PLANT_Service_Door" );
	SetAvailableMapGoals( TEAM.ALLIES, true, "CHECKPOINT_allied_flag" );
	SetAvailableMapGoals( TEAM.ALLIES, true, "SWITCH_Password_Door" );
	SetAvailableMapGoals( TEAM.ALLIES, true, "ATTACK_bPassword.*" );
	SetAvailableMapGoals( TEAM.ALLIES, true, "PANZER_bPassword.*" );

	SetAvailableMapGoals( TEAM.AXIS, true, "CHECKPOINT_allied_flag" );
	//SetAvailableMapGoals( TEAM.AXIS, true, "DEFEND_OverView_.*" );
	//SetAvailableMapGoals( TEAM.AXIS, true, "DEFEND_Password_Room_.*" );
	SetAvailableMapGoals( TEAM.AXIS, true, "DEFEND_rFlag.*" );
	SetAvailableMapGoals( TEAM.AXIS, true, "DEFEND_rEngService.*" );

	SetGoalPriority( "SWITCH.*", 0.85 );
	SetGoalPriority( "SWITCH_Password_Reset", 1.0 );
	SetGoalPriority( "CALL.*", 0.99 );
	SetGoalPriority( "ARTILLERY.*", 0.99 );
	SetGoalPriority( "AIRSTRIKE.*", 0.95 );
	SetGoalPriority( "DEFEND_rAbort.*", 0.99 );
	SetGoalPriority( "DEFEND_rEngService.*", 0.91 );
	SetGoalPriority( "ATTACK_password.*", 0.7 );
	SetGoalPriority( "PANZER.*", 0.91 );
	
	RTCWUtil.LimitToClass( "DEFEND_rAbort.*", TEAM.AXIS, CLASS.ENGINEER );
	RTCWUtil.LimitToClass( "DEFEND_rEngService.*", TEAM.AXIS, CLASS.ENGINEER );

	Util.SetMaxUsersInProgress( 1, "PANZER.*" );

	Util.SetMaxUsersInProgress( 32, "SWITCH_Password_Reset" );

	SetMapGoalProperties( "DEFEND_.*", {mincamptime=10, maxcamptime=30} );

	Util.UpdateSwitchData();
	InitializeRoutes();
	
	yield();yield();
	RTCWUtil.KillEntities( {229,230,231,232,233,234,129,216} );

	Util.MapDebugPrint( "Omni-bot map script for " + GetMapName() + " executed." );
};

global InitializeRoutes = function()
{
	MapRoutes =
	{
		CHECKPOINT_allied_flag =
		{
			ROUTE_Allied_Spawn = {
				ROUTE_Main_Entrance = {},
				ROUTE_Side_Entrance = {
					ROUTE_Service_Door = {},
				},
			},
			ROUTE_Axis_Spawn =
			{
				ROUTE_Garage_Ramp =
				{
					ROUTE_Tunnel = {ROUTE_Main_Entrance = {},},
				},
			},
		},
		SWITCH_Password_Door =
		{
			ROUTE_Allied_Spawn = 
			{
				ROUTE_Flag_Spawn = {},
				ROUTE_Service_Door = {},
			},
			ROUTE_Flag_Spawn = 
			{
				ROUTE_East_Stairs = 
				{
					Weight = 2,
					ROUTE_East_Stairs_Exit = {},
					ROUTE_West_Stairs_Exit = {},
				},
				ROUTE_West_Stairs = 
				{
					ROUTE_East_Stairs_Exit = 
					{
						ROUTE_PW_Room_Stairs = {},
						ROUTE_Far_Road_Area = 
						{
							ROUTE_Under_PW_Room = 
							{
								ROUTE_PW_Room_Back_Door = {},
							},
						},
					},
					ROUTE_West_Stairs_Exit = 
					{
						ROUTE_PW_Room_Stairs = {},
						ROUTE_Far_Road_Area = 
						{
							ROUTE_Under_PW_Room = 
							{
								ROUTE_PW_Room_Back_Door = {},
							},
						},
					},
					
				},
				ROUTE_Service_Door = 
				{
					Weight = 2,
					ROUTE_OverView_Ladder_Access = 
					{
						ROUTE_OverView = {},
					},
				},
			},
			ROUTE_Axis_Spawn =
			{
				ROUTE_Axis_Tunnel = 
				{
					ROUTE_Under_PW_Room = 
					{
						ROUTE_PW_Room_Back_Door = {},
					},
					ROUTE_PW_Room_Stairs = {},
				},
				ROUTE_Axis_Ramp = 
				{
					ROUTE_OverView = 
					{
						ROUTE_PW_Room_Side_Door = {},
					},
				},
				ROUTE_PW_Room_Back_Door = {},
			},
		},
		FLAG_Endoarm = 
		{
			ROUTE_Allied_Spawn = 
			{
				ROUTE_Flag_Spawn = {},
				ROUTE_Service_Door = {},
			},
			ROUTE_Flag_Spawn = 
			{
				ROUTE_West_Stairs = 
				{
					ROUTE_West_Stairs_Exit = 
					{
						ROUTE_stairs_exit = {},
						ROUTE_west_ladder = { Weight=2, },
					},
					ROUTE_East_Stairs_Exit = 
					{
						ROUTE_stairs_exit = {},
						ROUTE_west_ladder = {},
					},
				},
				ROUTE_East_Stairs = 
				{
					Weight = 2,
					ROUTE_West_Stairs_Exit = 
					{
						ROUTE_stairs_exit = {},
						ROUTE_west_ladder = { Weight=2, },
					},
					ROUTE_East_Stairs_Exit = 
					{
						ROUTE_stairs_exit = {},
						ROUTE_west_ladder = {},
					},
				},
				ROUTE_Service_Door = 
				{ 
					Weight=2,
					ROUTE_OverView_Ladder_Access = 
					{
						ROUTE_OverView = {},
					},
					ROUTE_service_shaft = {},
				},
			},
		},
		CAPPOINT_Truck =
		{
			ROUTE_EndoArm = {
				ROUTE_East_Stairs = {},
				ROUTE_Garage_Ramp = {},
				ROUTE_OverView_Ladder_Access = {
					ROUTE_Service_Door = {
						ROUTE_MG_Drop = {},
						ROUTE_Side_Entrance = {},
						ROUTE_MG_Exit = {},
					},
				},
			},
		},
	};
	MapRoutes.SWITCH_Password_Door.ROUTE_Flag_Spawn.ROUTE_East_Stairs.ROUTE_East_Stairs_Exit = MapRoutes.SWITCH_Password_Door.ROUTE_Flag_Spawn.ROUTE_West_Stairs.ROUTE_East_Stairs_Exit;
	MapRoutes.SWITCH_Password_Door.ROUTE_Flag_Spawn.ROUTE_East_Stairs.ROUTE_West_Stairs_Exit = MapRoutes.SWITCH_Password_Door.ROUTE_Flag_Spawn.ROUTE_West_Stairs.ROUTE_West_Stairs_Exit;
	MapRoutes["ATTACK_password.*"] = MapRoutes.SWITCH_Password_Door;
	MapRoutes["ATTACK_bPassword.*"] = MapRoutes.SWITCH_Password_Door;
	MapRoutes["DEFEND_Password_Room_.*"] = MapRoutes.SWITCH_Password_Door;
	MapRoutes.CALLARTILLERY_rPassword1 = MapRoutes.SWITCH_Password_Door;
	MapRoutes.AIRSTRIKE_rPassword1 = MapRoutes.SWITCH_Password_Door;
	MapRoutes["DEFEND_Endoarm_Room_.*"] = MapRoutes.FLAG_Endoarm;
	Util.Routes(MapRoutes);
};
global OnBotJoin = function( bot )
{
		
	RTCWUtil.SelectSoldierWeapons( TEAM.AXIS, bot, WEAPON.PANZERFAUST, WEAPON.VENOM );
	RTCWUtil.SelectSoldierWeapons( TEAM.ALLIES, bot, WEAPON.PANZERFAUST, WEAPON.VENOM );
	RTCWUtil.NoSnipe( bot );

	//default spawn
	bot.ChangeSpawnPoint( 0 );
};