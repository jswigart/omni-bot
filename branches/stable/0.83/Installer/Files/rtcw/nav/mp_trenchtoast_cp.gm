global Map =
{
	Quiet = true,
	DispenseAmmoTime = 1,
	DontDispenseAmmo = true,

	cp1 = "CHECKPOINT_checkpoint1", // allies 1
	cp2 = "CHECKPOINT_checkpoint2", // allies 2
	cp3 = "CHECKPOINT_checkpoint3", // allies 3
	cp4 = "CHECKPOINT_checkpoint4", // axis 3
	cp5 = "CHECKPOINT_checkpoint5", // axis 2
	cp6 = "CHECKPOINT_checkpoint6", // axis 1
	Checkpoint_void = "CHECKPOINT_void",
	Checkpoint_void_1 = "CHECKPOINT_void_1",
	Explode_barrier1 = "EXPLODE_barrier1",
	Explode_barrier2 = "EXPLODE_barrier2",
	bPanzers = 0,
	rPanzers = 0,


	c1status = 0,
	c2status = 0,
	c3status = 0,
	c4status = 0,
	c5status = 0,
	c6staturs = 0,

	// spawn flags
	axis_cp = 0,
	allies_cp = 0,

	thirtysecond = false,
	BarrierOne = false,
	BarrierTwo = false,

	Roles =
	{
		AXIS =
		{
			DEFENDER =
			{
				spawnpt = 1,
				numbots = 3,
				crucialClass = CLASS.SOLDIER,
			},
		},

		ALLIES =
		{
			DEFENDER =
			{
				spawnpt = 2,
				numbots = 3,
				crucialClass = CLASS.SOLDIER,
			},
		},
	},

	Navigation =
	{
		// both tower ladders use this
		ladders =
		{
			navigate = function( _this )
			{
				_this.Bot.HoldButton( BTN.FORWARD, 4 );
				sleep( 4 );
			},
		},
	},

	checkpoint1_Axis_Captured = function( trigger )
	{
		if ( TestMap ) {
			return;
		}

		Map.c1status = 1;
		Map.eval_cps();
	},

	checkpoint1_Allies_Captured = function( trigger )
	{
		if ( TestMap ) {
			return;
		}

		Map.c1status = 2;
		Map.eval_cps();
	},

	checkpoint2_Axis_Captured = function( trigger )
	{
		if ( TestMap ) {
			return;
		}

		Map.c2status = 1;
		Map.eval_cps();
	},

	checkpoint2_Allies_Captured = function( trigger )
	{
		if ( TestMap ) {
			return;
		}

		Map.c2status = 2;
		Map.eval_cps();
	},

	checkpoint3_Axis_Captured = function( trigger )
	{
		if ( TestMap ) {
			return;
		}

		Map.c3status = 1;
		Map.eval_cps();
	},

	checkpoint3_Allies_Captured = function( trigger )
	{
		if ( TestMap ) {
			return;
		}

		Map.c3status = 2;
		Map.eval_cps();
		Map.firstSpawnArty();   // Turn off firstspawnarty
	},

	checkpoint4_Axis_Captured = function( trigger )
	{
		if ( TestMap ) {
			return;
		}

		Map.c4status = 1;
		Map.eval_cps();
		Map.firstSpawnArty();   // Turn off firstspawnarty
	},

	checkpoint4_Allies_Captured = function( trigger )
	{
		if ( TestMap ) {
			return;
		}

		Map.c4status = 2;
		Map.eval_cps();
	},

	checkpoint5_Axis_Captured = function( trigger )
	{
		if ( TestMap ) {
			return;
		}

		Map.c5status = 1;
		Map.eval_cps();
	},

	checkpoint5_Allies_Captured = function( trigger )
	{
		if ( TestMap ) {
			return;
		}

		Map.c5status = 2;
		Map.eval_cps();
	},

	checkpoint6_Axis_Captured = function( trigger )
	{
		if ( TestMap ) {
			return;
		}

		Map.c6status = 1;
		Map.eval_cps();
	},

	checkpoint6_Allies_Captured = function( trigger )
	{
		if ( TestMap ) {
			return;
		}

		Map.c6status = 2;
		Map.eval_cps();
	},

	eval_cps = function()
	{
		if ( TestMap ) {
			return;
		}

		//if a team has captured all rear cp's for the first time, open up the rest
		if ( Map.c6status == 1 && Map.c5status == 1 && Map.c4status == 1 ) {
			SetAvailableMapGoals( TEAM.AXIS, true, Map.cp1 );
			SetAvailableMapGoals( TEAM.AXIS, true, Map.cp2 );
			SetAvailableMapGoals( TEAM.AXIS, true, Map.cp3 );
		}

		if ( Map.c3status == 2 && Map.c2status == 2 && Map.c1status == 2 ) {
			SetAvailableMapGoals( TEAM.ALLIES, true, Map.cp4 );
			SetAvailableMapGoals( TEAM.ALLIES, true, Map.cp5 );
			SetAvailableMapGoals( TEAM.ALLIES, true, Map.cp6 );
		}
	},

	void_1_Axis_Captured = function( trigger )  // Axis capture own Spawflag
	{
		if ( TestMap ) {
			return;
		}

		Map.axis_cp = 1;
		SetAvailableMapGoals( TEAM.AXIS, true, "MOUNTMG42_t456" );
		SetAvailableMapGoals( TEAM.AXIS, true, "MOUNTMG42_t454" );
		SetAvailableMapGoals( TEAM.AXIS, true, "MOUNTMG42_rCentral" );
	},

	void_1_Allies_Neutralize = function( trigger )  // Allies reclaim axis flag
	{
		if ( TestMap ) {
			return;
		}

		Map.axis_cp = 0;
		SetAvailableMapGoals( TEAM.AXIS, false, "MOUNTMG42_t456" );
		SetAvailableMapGoals( TEAM.AXIS, false, "MOUNTMG42_t454" );
		SetAvailableMapGoals( TEAM.AXIS, false, "MOUNTMG42_rCentral" );
	},

	void_Axis_Neutralize = function( trigger )  // Axis reclaim allies flag
	{
		if ( TestMap ) {
			return;
		}

		Map.allies_cp = 0;
		SetAvailableMapGoals( TEAM.ALLIES, false, "MOUNTMG42_t451" );
		SetAvailableMapGoals( TEAM.ALLIES, false, "MOUNTMG42_t364" );
		SetAvailableMapGoals( TEAM.ALLIES, false, "MOUNTMG42_bCentral" );
	},

	void_Allies_Captured = function( trigger )  // Allies capture own Spawnflag
	{
		if ( TestMap ) {
			return;
		}

		Map.allies_cp = 2;
		SetAvailableMapGoals( TEAM.ALLIES, true, "MOUNTMG42_t451" );
		SetAvailableMapGoals( TEAM.ALLIES, true, "MOUNTMG42_t364" );
		SetAvailableMapGoals( TEAM.ALLIES, true, "MOUNTMG42_bCentral" );
	},

	thirty_second = function( trigger )
	{
		if ( TestMap ) {
			return;
		}

		Map.thirtysecond = true;

		//better get as many flags as possible now
		SetGoalPriority( "CHECKPOINT.*", 1.0, TEAM.AXIS, CLASS.SOLDIER );
		SetGoalPriority( "CHECKPOINT.*", 1.0, TEAM.ALLIES, CLASS.SOLDIER );
		Util.DisableGoal( "MOUNT.*" );
		Util.DisableGoal( "CALL.*" );
		Util.DisableGoal( "CAMP.*" );
		Util.DisableGoal( "AIRSTRIKE.*" );
		Util.DisableGoal( "SNIPE.*" );
	},

	barrier1 = function( trigger )
	{
		if ( TestMap ) {
			return;
		}

		Map.BarrierOne = true;
	},

	barrier2 = function( trigger )
	{
		if ( TestMap ) {
			return;
		}

		Map.BarrierTwo = true;
	},

	firstSpawnArty = function()
	{
		if ( TestMap ) {
			return;
		}

		SetAvailableMapGoals( TEAM.AXIS, false, "CALLARTILLERY_rFirstspawn" );
		SetAvailableMapGoals( TEAM.AXIS, false, "ARTILLERY_S_rFirstspawn_.*" );
		SetAvailableMapGoals( TEAM.ALLIES, false, "CALLARTILLERY_bFirstspawn" );
		SetAvailableMapGoals( TEAM.ALLIES, false, "ARTILLERY_S_bFirstspawn_.*" );
		SetAvailableMapGoals( TEAM.ALLIES, true, "ARTILLERY_S_bMid.*" );
		SetAvailableMapGoals( TEAM.ALLIES, true, "CALLARTILLERY_bMid.*" );
		SetAvailableMapGoals( TEAM.ALLIES, true, "AIRSTRIKE_bMid.*" );
		SetAvailableMapGoals( TEAM.AXIS, true, "ARTILLERY_S_rMid.*" );
		SetAvailableMapGoals( TEAM.AXIS, true, "CALLARTILLERY_rMid.*" );
		SetAvailableMapGoals( TEAM.AXIS, true, "AIRSTRIKE_rMid.*" );
	},
	Pillbox =
	{
		Name = "Pillbox",
		TriggerOnClass = CLASS.ANYPLAYER,
		OnEnter = function( ent )
		{
			b = Util.GetBotByName( GetEntName( ent ) );
			if ( b ) {
				b.DisableCombatMovement = true;
			}
		},
		OnExit = function( ent )
		{
			b = Util.GetBotByName( GetEntName( ent ) );
			if ( b ) {
				b.DisableCombatMovement = false;
			}
		},
	},
	
};

global OnMapLoad = function()
{
	if ( TestMapOn ) {
		Util.AutoTestMap();
	}
	AlliesPillbox = OnTriggerRegion( AABB( 5599.000,9439.000,321.000,6016.000,9760.000,395.000 ), Map.Pillbox );
	AxisPillbox = OnTriggerRegion( AABB( 3775.000,11743.000,321.000,4192.000,12064.000,395.000 ), Map.Pillbox );

	OnTrigger( "Axis takes the Southern Flag!", Map.checkpoint1_Axis_Captured );
	OnTrigger( "Allies take the Southern Flag!", Map.checkpoint1_Allies_Captured );
	OnTrigger( "Axis takes the Southwest Flag!", Map.checkpoint2_Axis_Captured );
	OnTrigger( "Allies take the Southwest Flag!", Map.checkpoint2_Allies_Captured );
	OnTrigger( "Axis takes the South Clearing Flag!", Map.checkpoint3_Axis_Captured );
	OnTrigger( "Allies take the South Clearing Flag!", Map.checkpoint3_Allies_Captured );
	OnTrigger( "Axis takes the North Clearing Flag!", Map.checkpoint4_Axis_Captured );
	OnTrigger( "Allies take the North Clearing Flag!", Map.checkpoint4_Allies_Captured );
	OnTrigger( "Axis takes the Northeast Flag!", Map.checkpoint5_Axis_Captured );
	OnTrigger( "Allies take the Northeast Flag!", Map.checkpoint5_Allies_Captured );
	OnTrigger( "Axis takes the Northern Flag!", Map.checkpoint6_Axis_Captured );
	OnTrigger( "Allies take the Northern Flag!", Map.checkpoint6_Allies_Captured );
	OnTrigger( "axis_capture_void", Map.void_1_Axis_Captured );
	OnTrigger( "allies_neutralized_void", Map.void_1_Allies_Neutralize );
	OnTrigger( "allies_capture_void", Map.void_Allies_Captured );
	OnTrigger( "axis_neutralized_void", Map.void_Axis_Neutralize );
	OnTrigger( "Explode_200 Exploded", Map.barrier2 ); // allies
	OnTrigger( "Explode_203 Exploded", Map.barrier1 );  // axis
	OnTrigger( "thirty second warning.", Map.thirty_second );

	Util.SetMaxUsersInProgress( 2, "CHECKPOINT.*" );
	Util.DisableGoal( ".*", true ); // all but routes
	RTCWUtil.SetPrimaryGoals( 1.0 );

	SetMapGoalProperties( "SNIPE_.*", {mincamptime = 45, maxcamptime = 60} );
	SetMapGoalProperties( "DEFEND_.*", {mincamptime = 30, maxcamptime = 60} );
	SetMapGoalProperties( "MOUNTMG42_.*", {mincamptime = 45, maxcamptime = 60} );

	SetGoalPriority( "CALL.*", 1.0 );
	SetGoalPriority( "ARTILLERY.*", 1.0 );
	SetGoalPriority( "CAMP_.*", 0.95 );
	SetGoalPriority( "AIRSTRIKE.*", 0.99 );
	SetGoalPriority( "GRENADE_Barricade.*", 0.65 );
	SetGoalPriority( "MOUNT.*", 0.91 );
	
	//priority should be based on closest available checkpoint
	SetGoalPriority( "CHECKPOINT_checkpoint5", 1.0, TEAM.AXIS );
	SetGoalPriority( "CHECKPOINT_checkpoint6", 0.99, TEAM.AXIS );
	SetGoalPriority( "CHECKPOINT_checkpoint4", 0.98, TEAM.AXIS );
	SetGoalPriority( "CHECKPOINT_checkpoint2", 1.0, TEAM.ALLIES );
	SetGoalPriority( "CHECKPOINT_checkpoint1", 0.99, TEAM.ALLIES );
	SetGoalPriority( "CHECKPOINT_checkpoint3", 0.98, TEAM.ALLIES );

	Util.SetMaxUsersInProgress( 1, "MOUNT.*" );
	Util.SetMaxUsersInProgress( 3, "CHECKPOINT.*" );

	SetAvailableMapGoals( TEAM.AXIS, true, "SNIPE_rSnipe.*" );
	SetAvailableMapGoals( TEAM.AXIS, true, Map.cp6 );
	SetAvailableMapGoals( TEAM.AXIS, true, Map.cp5 );
	SetAvailableMapGoals( TEAM.AXIS, true, Map.cp4 );
	SetAvailableMapGoals( TEAM.AXIS, true, Map.Checkpoint_void_1 );     // Axis spawn flag
	SetAvailableMapGoals( TEAM.AXIS, true, "CAMP_rRear.*" );
	SetAvailableMapGoals( TEAM.AXIS, true, "GRENADE_Barricade1" );

	SetAvailableMapGoals( TEAM.ALLIES, true, "SNIPE_bSnipe.*" );
	SetAvailableMapGoals( TEAM.ALLIES, true, Map.cp3 );
	SetAvailableMapGoals( TEAM.ALLIES, true, Map.cp2 );
	SetAvailableMapGoals( TEAM.ALLIES, true, Map.cp1 );
	SetAvailableMapGoals( TEAM.ALLIES, true, Map.Checkpoint_void );     // Allies spawn flag
	SetAvailableMapGoals( TEAM.ALLIES, true, "CAMP_bRear.*" );
	SetAvailableMapGoals( TEAM.ALLIES, true, "GRENADE_Barricade2" );

	SetAvailableMapGoals( TEAM.AXIS, true, "CALLARTILLERY_rFirstspawn" );
	SetAvailableMapGoals( TEAM.AXIS, true, "ARTILLERY_S_rFirstspawn_.*" );
	SetAvailableMapGoals( TEAM.ALLIES, true, "CALLARTILLERY_bFirstspawn" );
	SetAvailableMapGoals( TEAM.ALLIES, true, "ARTILLERY_S_bFirstspawn_.*" );

	//concentrate on sniping until 30 seconds left
	RTCWUtil.ExcludeClass( "CHECKPOINT.*", TEAM.AXIS, CLASS.SOLDIER );
	RTCWUtil.ExcludeClass( "CHECKPOINT.*", TEAM.ALLIES, CLASS.SOLDIER );
	RTCWUtil.LimitToClass( "MOUNT.*", TEAM.ALLIES, CLASS.SOLDIER );
	RTCWUtil.LimitToClass( "MOUNT.*", TEAM.AXIS, CLASS.SOLDIER );

	MapRoutes =
	{
		CHECKPOINT_checkpoint1 =
		{
			ROUTE_rSpawn =
			{
				ROUTE_west = {},
				ROUTE_east = {},
				ROUTE_rCentral = {},
			},
		},

		CHECKPOINT_checkpoint5 =
		{
			ROUTE_bSpawn =
			{
				ROUTE_west = {},
				ROUTE_east = {},
				ROUTE_bCentral = {},
			},
		},
	};

	MapRoutes.CHECKPOINT_checkpoint2 = MapRoutes.CHECKPOINT_checkpoint1;
	MapRoutes.CHECKPOINT_checkpoint6 = MapRoutes.CHECKPOINT_checkpoint5;

	Util.Routes( MapRoutes );
	print( "OnMapLoad" );
};

global OnBotJoin = function( bot )
{
	bot.TargetBreakableDist = 80.0;
	bot.MaxViewDistance = 2500;

	RTCWUtil.SelectWeapon( bot, WEAPON.MAUSER, true );    // True means there is fog
};

