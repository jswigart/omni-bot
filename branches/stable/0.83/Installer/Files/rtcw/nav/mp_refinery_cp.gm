global Map =
{
	Debug = 0, // please set to zero before distributing your script
	ShowMovers = false,
	DontDispenseAmmo = true,

	Roles =
	{
		AXIS =
		{

			DEFENDER =
			{
				numbots = 3,
			},
		},

		ALLIES =
		{
			AllBots = true,
			DEFENDER =
			{
				numbots = 3,
			},
		},
	},
	
	barracks_Axis_Captured = function( trigger )
	{
		if ( TestMap )
			{ return; }

		Util.MapDebugPrint( "barracks_Axis_Captured" );
	},

	barracks_Allies_Captured = function( trigger )
	{
		if ( TestMap )
			{ return; }

		Util.MapDebugPrint( "barracks_Allies_Captured" );
	},

	fuel_Axis_Captured = function( trigger )
	{
		if ( TestMap )
			{ return; }

		Util.MapDebugPrint( "fuel_Axis_Captured" );
	},

	fuel_Allies_Captured = function( trigger )
	{
		if ( TestMap )
			{ return; }

		Util.MapDebugPrint( "fuel_Allies_Captured" );
	},

	loading_Axis_Captured = function( trigger )
	{
		if ( TestMap )
			{ return; }

		Util.MapDebugPrint( "loading_Axis_Captured" );
	},

	loading_Allies_Captured = function( trigger )
	{
		if ( TestMap )
			{ return; }

		Util.MapDebugPrint( "loading_Allies_Captured" );
	},

	power_Axis_Captured = function( trigger )
	{
		if ( TestMap )
			{ return; }

		Util.MapDebugPrint( "power_Axis_Captured" );
	},

	power_Allies_Captured = function( trigger )
	{
		if ( TestMap )
			{ return; }

		Util.MapDebugPrint( "power_Allies_Captured" );
	},

	refineries_Axis_Captured = function( trigger )
	{
		if ( TestMap )
			{ return; }

		Util.MapDebugPrint( "refineries_Axis_Captured" );
	},

	refineries_Allies_Captured = function( trigger )
	{
		if ( TestMap )
			{ return; }

		Util.MapDebugPrint( "refineries_Allies_Captured" );
	},

	warehouse_Axis_Captured = function( trigger )
	{
		if ( TestMap )
			{ return; }

		Util.MapDebugPrint( "warehouse_Axis_Captured" );
	},

	warehouse_Allies_Captured = function( trigger )
	{
		if ( TestMap )
			{ return; }

		Util.MapDebugPrint( "warehouse_Allies_Captured" );
	},
	
	KillWarehouse = function ()
	{
		if ( TestMap )
		{ return; }
		
		RTCWUtil.KillEntities({73,96,472});
	},
	KillNESpawn = function ()
	{
		if ( TestMap )
		{ return; }
		
		RTCWUtil.KillEntities({89,90});
	},
	KillSWSpawn = function ()
	{
		if ( TestMap )
		{ return; }
		
		RTCWUtil.KillEntities({452,453});
	},
	KillSESpawn = function ()
	{
		if ( TestMap )
		{ return; }
		
		RTCWUtil.KillEntities({558,559});
	},
	KillAxisSpawn = function ()
	{
		if ( TestMap )
		{ return; }
		
		RTCWUtil.KillEntities({450,464,465});
	},

};

global OnMapLoad = function()
{
	if ( TestMapOn )
		{ Util.AutoTestMap(); }

	// Register callback functions
	OnTrigger( "MISSING_STRING", Map.barracks_Axis_Captured );
	OnTrigger( "MISSING_STRING", Map.barracks_Allies_Captured );
	OnTrigger( "MISSING_STRING", Map.fuel_Axis_Captured );
	OnTrigger( "MISSING_STRING", Map.fuel_Allies_Captured );
	OnTrigger( "MISSING_STRING", Map.loading_Axis_Captured );
	OnTrigger( "MISSING_STRING", Map.loading_Allies_Captured );
	OnTrigger( "MISSING_STRING", Map.power_Axis_Captured );
	OnTrigger( "MISSING_STRING", Map.power_Allies_Captured );
	OnTrigger( "MISSING_STRING", Map.refineries_Axis_Captured );
	OnTrigger( "MISSING_STRING", Map.refineries_Allies_Captured );
	OnTrigger( "MISSING_STRING", Map.warehouse_Axis_Captured );
	OnTrigger( "MISSING_STRING", Map.warehouse_Allies_Captured );
	OnTrigger( "73_Opened", Map.KillWarehouse );
	OnTrigger( "89_Opened", Map.KillNESpawn );
	OnTrigger( "hausfrontdoor_Opened", Map.KillSWSpawn);
	OnTrigger( "559_Opened", Map.KillSESpawn );
	OnTrigger( "450_Opening", Map.KillAxisSpawn );
	/*OnTrigger( "472_Opened", Map.KillEntity(472) );
	OnTrigger( "99_Opened", Map.KillEntity(99) );
	OnTrigger( "98_Opened", Map.KillEntity(98) );
	OnTrigger( "545_Opened", Map.KillEntity(545) );
	OnTrigger( "544_Opened", Map.KillEntity(544) );*/

	Util.SetMaxUsersInProgress( 3, "CHECKPOINT.*" );

	Util.DisableGoal( ".*", true );
	Util.EnableGoal( "CHECKPOINT.*" );
	Util.DisableGoal( "CHECKPOINT_power", true );
	RTCWUtil.SetPrimaryGoals( 1.0 );
	
	SetMapGoalProperties( "ATTACK_.*", {mincamptime = 15, maxcamptime = 30} );
	SetMapGoalProperties( "DEFEND_.*", {mincamptime = 20, maxcamptime = 40} );
	SetMapGoalProperties( "CAMP_.*", {mincamptime = 15, maxcamptime = 25} );
	SetMapGoalProperties( "PANZER_.*", {mincamptime = 30, maxcamptime = 60} );
	SetMapGoalProperties( "SNIPE_.*", {mincamptime = 60, maxcamptime = 90} );
	
	//priority should be based on closest available checkpoint
	SetGoalPriority( "CHECKPOINT_loading", 1.0, TEAM.AXIS );
	SetGoalPriority( "CHECKPOINT_fuel", 0.95, TEAM.AXIS );
	SetGoalPriority( "CHECKPOINT_power", 0.92, TEAM.AXIS );
	SetGoalPriority( "CHECKPOINT_barracks", 1.0, TEAM.ALLIES );
	SetGoalPriority( "CHECKPOINT_warehouse", 0.95, TEAM.ALLIES );
	SetGoalPriority( "CHECKPOINT_refineries", 0.92, TEAM.ALLIES );
	
	SetGoalPriority( "AIRSTRIKE_rSpawnkill.*", 0.93 );
	SetGoalPriority( "DEFEND_rLT.*", 0.91 );
	SetGoalPriority( "DEFEND_bLT.*", 0.91 );
	SetGoalPriority( "CAMP_.*", 1.0 );
	SetGoalPriority( "AIRSTRIKE_bSpawnkill.*", 0.93 );
	SetGoalPriority( "SNIPE_bSnipe.*", 0.93 );
	SetGoalPriority( "AIRSTRIKE_rSpawnkill.*", 0.93 );
	SetGoalPriority( "SNIPE_rSnipe.*", 0.93 );
	
	RTCWUtil.LimitToClass( "DEFEND_rLT.*", TEAM.AXIS, CLASS.LIEUTENANT );
	RTCWUtil.LimitToClass( "DEFEND_bLT.*", TEAM.ALLIES, CLASS.LIEUTENANT );
	
	SetAvailableMapGoals( TEAM.AXIS, true, "AIRSTRIKE_rSpawnkill.*" );
	SetAvailableMapGoals( TEAM.AXIS, true, "DEFEND_rLT.*" );
	SetAvailableMapGoals( TEAM.AXIS, true, "SNIPE_rSnipe.*" );
	SetAvailableMapGoals( TEAM.AXIS, true, "CAMP_rFuel.*" );
	
	SetAvailableMapGoals( TEAM.ALLIES, true, "ARTILLERY_S_bSpawnkill.*" );
	SetAvailableMapGoals( TEAM.ALLIES, true, "AIRSTRIKE_bSpawnkill.*" );
	SetAvailableMapGoals( TEAM.ALLIES, true, "DEFEND_bLT.*" );
	SetAvailableMapGoals( TEAM.ALLIES, true, "SNIPE_bSnipe.*" );
	SetAvailableMapGoals( TEAM.ALLIES, true, "CAMP_bWH.*" );
	
	MapRoutes =
	{
		CHECKPOINT_warehouse =
		{
			ROUTE_rspawn =
			{
				ROUTE_fuelnw = 
				{
					ROUTE_whn = {},
				},
				ROUTE_sewer = {},
				ROUTE_roadfuelne =
				{
					ROUTE_whe = {},
				},
			},
			ROUTE_bspawn =
			{
				ROUTE_roadcrane = {},
				ROUTE_whs = {},
			},
		},
		CHECKPOINT_barracks =
		{
			ROUTE_rspawn =
			{
				ROUTE_fuelnw = 
				{
					ROUTE_whn = 
					{
						ROUTE_whs = {},
						ROUTE_whe = {},
					},
				},
				ROUTE_sewer = 
				{
					ROUTE_whs = {},
					ROUTE_roadcrane = {},
				},
				ROUTE_roadfuelne =
				{
					ROUTE_railway = {},
					ROIUTE_roadfuelse = {},
				},
			},
		},
		CHECKPOINT_refineries =
		{
			ROUTE_rspawn =
			{
				ROUTE_fuelnw = 
				{
					ROIUTE_roadfuelse = {},
				},
				ROUTE_sewer = {},
				ROUTE_roadfuelne =
				{
					ROUTE_railway = {},
					ROIUTE_roadfuelse = {},
				},
			},
			ROUTE_bspawn =
			{
				ROUTE_roadcrane = {},
			},
		},
		CHECKPOINT_fuel =
		{
			ROUTE_rspawn =
			{
				ROUTE_fuelnw = {},
				ROUTE_roadfuelne = {},
			},
			ROUTE_bspawn =
			{
				ROUTE_roadcrane = 
				{
					ROUTE_roadfuelse = {},
					ROUTE_railway = {},
				},
				ROUTE_whs = 
				{
					ROUTE_whn = {},
					ROUTE_whe = 
					{
						ROUTE_roadfuelse = {},
					},
				},
			},
		},
		CHECKPOINT_loading =
		{
			ROUTE_bspawn =
			{
				ROUTE_roadcrane = 
				{
					ROUTE_roadfuelse = {},
					ROUTE_railway = {},
					ROUTE_sewer = {},
				},
				ROUTE_whs = 
				{
					ROUTE_whn = 
					{
						ROUTE_fueltrain1 =
						{
							ROUTE_fueltrain2 = {},
						},
					},
					ROUTE_whe = 
					{
						ROUTE_roadfuelse = {},
					},
				},
			},
		},
	};
	MapRoutes.DEFEND_bLT1 = MapRoutes.CHECKPOINT_fuel;
	MapRoutes.DEFEND_bLT2 = MapRoutes.CHECKPOINT_fuel;
	MapRoutes.DEFEND_bLT3 = MapRoutes.CHECKPOINT_fuel;
	MapRoutes.DEFEND_bLT4 = MapRoutes.CHECKPOINT_fuel;
	MapRoutes.AIRSTRIKE_bSpawnkill1 = MapRoutes.CHECKPOINT_fuel;
	MapRoutes.AIRSTRIKE_bSpawnkill2 = MapRoutes.CHECKPOINT_fuel;
	MapRoutes.DEFEND_rLT1 = MapRoutes.CHECKPOINT_warehouse;
	MapRoutes.DEFEND_rLT2 = MapRoutes.CHECKPOINT_warehouse;
	MapRoutes.DEFEND_rLT3 = MapRoutes.CHECKPOINT_warehouse;
	MapRoutes.DEFEND_rLT4 = MapRoutes.CHECKPOINT_warehouse;
	MapRoutes.AIRSTRIKE_rSpawnkill1 = MapRoutes.CHECKPOINT_warehouse;
	MapRoutes.AIRSTRIKE_rSpawnkill2 = MapRoutes.CHECKPOINT_warehouse;
	
	Util.Routes(MapRoutes);

	yield();yield();
	// There are no plant goals for these...and both teams need it anyway. Safe to ALWAYS kill
	RTCWUtil.KillEntities({106,98,99,544,545,603,77});

	Util.MapDebugPrint( "Omni-bot map script for " + GetMapName() + " executed." );
};

global OnBotJoin = function( bot )
{
	//RTCWUtil.NoSnipe( bot );
	// Uncomment for shootable breakables
	//~bot.TargetBreakableDist = 90.0;
	// Only set MaxViewDistance on maps with limited sight (e.g. fog)
	//~bot.MaxViewDistance = 2400;
};