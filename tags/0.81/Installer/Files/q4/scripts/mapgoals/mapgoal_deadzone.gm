this.GoalType = "DEADZONE";
this.Version = 1;
this.DefaultPriority = 1.0;
this.CreateOnLoad = false;

//////////////////////////////////////////////////////////////////////////
this.Schema = Schema();
this.Schema.PatrolPoints = Validate.TableOf("vector3").Default({});
//////////////////////////////////////////////////////////////////////////

this.UpgradeVersion = function(Props)
{
	// version 0 is string,string key/values from the old waypoint format
	if(Props.Version==0)
	{
		// Version 1 Schema, upgrade from waypoint format
		Props.Version = 1;
	}
	else if(Props.Version == this.Version)
	{
		this.Schema.Check(Props);
		
		if ( Props.PatrolPoints )
		{
			this.PatrolPoints = Props.PatrolPoints;
		}
		else
		{
			this.PatrolPoints = table();
		}		
	}
};

//////////////////////////////////////////////////////////////////////////

this.Render = function()
{
	topOffset = Vector3(0,0,64);
	goalBasePos = this.GetPosition();
	goalPos = goalBasePos + topOffset;

	while(this.RenderGoal == true)
	{
		this.RenderDefault();

		if(this.IsDisabled())
		{
			DrawLine(goalPos,goalBasePos,COLOR.RED,2);
		}
		else
		{
			DrawLine(goalPos,goalBasePos,COLOR.GREEN,2);
		}

		sleep(2);
		
		if ( this.PatrolPoints )
		{
			foreach ( id and spot in this.PatrolPoints )
			{
				base = GroundPoint(spot);

				DrawLine(base,base+topOffset,COLOR.BLUE,2);
				DrawText3d(base+topOffset, this.GetName() + " Patrol " + ToString(id), COLOR.WHITE,2,textDrawRadius);
			}
		}		
	}
};

//////////////////////////////////////////////////////////////////////////

this.SaveToTable = function(SaveTable)
{
	// save the goal specific properties
	SaveTable.PatrolPoints = this.PatrolPoints;
};

//////////////////////////////////////////////////////////////////////////

this.Help = function()
{
	print(this.GoalType,"goal, version",this.Version);
	print("Optional:");
	print("		patrol - point in the deadzone area the bot should patrol");
};

//////////////////////////////////////////////////////////////////////////

this.SetProperty = function(property, value)
{
	proplower = property.Lower(0);
	switch(proplower)
	{
		case "patrol":
		{
			if ( value == "clearall" || value == "clear" )
			{
				tableClear(this.PatrolPoints);
			}
			else
			{
				i = ToInt(value);
				if ( typeId(i) == 1)
				{
					// make em add sequentially
					n = tableCount(this.PatrolPoints);
					if ( i < 0 || i > n )
					{
						i = n;
					}

					this.PatrolPoints[ i ] = GetLocalPosition();
					print("Patrol point",i,"added");
				}
				else
				{
					print(this.GoalType, ": Invalid patrol index, expecting int");
				}
			}		
		}
		default:
		{
			print(this.GoalType, ": Invalid property:", property);
			return;
		}
	}

	// null the debug text so it will be rebuilt
	//this.ExtraDebugText = null;
};
