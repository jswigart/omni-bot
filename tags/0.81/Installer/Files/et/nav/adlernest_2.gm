global Map =
{
	Switches =
	{
		BlastDoorSwitch1 =
		{
			WaypointName = "Blast Door Switch 1",
			LimitTeam = 0, // disabled initially.
			LimitClass = (1<<CLASS.ENGINEER),
		},

		BlastDoorSwitch2 =
		{
			WaypointName = "Blast Door Switch 2",
			LimitTeam = 0, // disabled initially.
			LimitClass = (1<<CLASS.ENGINEER),
		},
	},

	Ammo_Cabinet_hutammocab = "AMMOCAB_hutammocab",
	Health_Cabinet_huthpcab = "HEALTHCAB_huthpcab",
	Build_allied_radio_built = "BUILD_Allied_CP",
	Destroy_allied_radio_built = "PLANT_Allied_CP",
	Destroy_doorcontrols = "PLANT_Door_controls",
	Mount_77 = "MOUNTMG42_77",
	Repair_77 = "REPAIRMG42_77",
	Flag_documents = "FLAG_documents",
	Cappoint_399 = "CAPPOINT_399",

	//Status' for conditionals
	BlastDoorStatus = 0, //closed
	DocStatus = 0, //home

	allied_radio_built_Built = function( trigger )
	{
		if ( TestMap )
			{ return; }

		Util.MapDebugPrint( "allied_radio_built_Built" );
	},

	doorcontrols_Destroyed = function( trigger )
	{
		if ( TestMap )
			{ return; }

		if ( Map.DocStatus == 1 && Map.BlastDoorStatus == 0 )
		{
			Map.Switches.BlastDoorSwitch1.LimitTeam = (1<<TEAM.ALLIES);
			Map.Switches.BlastDoorSwitch2.LimitTeam = (1<<TEAM.ALLIES);
		}

		//shift the action
		if ( Map.DocStatus == 0 )
		{
			SetAvailableMapGoals( TEAM.AXIS, true, "DEFEND_Doc_Defense_.*" );
		}
		SetAvailableMapGoals( TEAM.ALLIES, true, Map.Build_allied_radio_built );
		SetAvailableMapGoals( TEAM.ALLIES, true, Map.Flag_documents );
		SetAvailableMapGoals( TEAM.AXIS, false, "DEFEND_Controls_Defense_.*" );
		SetAvailableMapGoals( TEAM.ALLIES, false, "ATTACK_Controls_Attack_.*" );

		//Util.ResetGoals();

		Util.MapDebugPrint( "doorcontrols_Destroyed" );
	},

	allied_radio_built_Destroyed = function( trigger )
	{
		if ( TestMap )
			{ return; }

		Util.MapDebugPrint( "allied_radio_built_Destroyed" );
	},

	Documents_Stolen = function( trigger )
	{
		if ( TestMap )
			{ return; }

		Map.DocStatus = 1;

		//shift the action
		if ( Map.BlastDoorStatus == 1 )
		{
			Map.Switches.BlastDoorSwitch1.LimitTeam = (1<<TEAM.AXIS);
			Map.Switches.BlastDoorSwitch2.LimitTeam = (1<<TEAM.AXIS);
		}
		else
		{
			Map.Switches.BlastDoorSwitch1.LimitTeam = (1<<TEAM.ALLIES);
			Map.Switches.BlastDoorSwitch2.LimitTeam = (1<<TEAM.ALLIES);
		}

		SetAvailableMapGoals( TEAM.AXIS, true, "DEFEND_Deliver_Defense_.*" );
		SetAvailableMapGoals( TEAM.ALLIES, true, "ATTACK_Deliver_Attack_.*" );
		SetAvailableMapGoals( TEAM.ALLIES, false, "ATTACK_Doc_Attack_.*" );
		SetAvailableMapGoals( TEAM.AXIS, false, "DEFEND_Doc_Defense_.*" );

		//Util.ResetGoals();

		Util.MapDebugPrint( "Documents_Stolen" );
	},

	Documents_Returned = function ( trigger )
	{
		if ( TestMap )
			{ return; }

		Map.DocStatus = 0;

		//shift back to docs
		SetAvailableMapGoals( TEAM.AXIS, true, "DEFEND_Doc_Defense_.*" );
		SetAvailableMapGoals( TEAM.ALLIES, true, "ATTACK_Doc_Attack_.*" );
		SetAvailableMapGoals( TEAM.AXIS, false, "DEFEND_Deliver_Defense_.*" );
		SetAvailableMapGoals( TEAM.ALLIES, false, "ATTACK_Deliver_Attack_.*" );

		//forget about the switches
		Map.Switches.BlastDoorSwitch1.LimitTeam = 0;
		Map.Switches.BlastDoorSwitch2.LimitTeam = 0;

		//Util.ResetGoals();

		Util.MapDebugPrint( "Documents_Returned" );
	},

	Documents_Transmitted = function( trigger )
	{
		if ( TestMap )
			{ return; }

		Util.MapDebugPrint( "Documents_Transmitted" );
	},

	Blast_Doors_Open = function( trigger )
	{
		if ( TestMap )
			{ return; }

		Map.BlastDoorStatus = 1;

		if ( Map.DocStatus == 1 )
		{
			Map.Switches.BlastDoorSwitch1.LimitTeam = (1<<TEAM.AXIS);
			Map.Switches.BlastDoorSwitch2.LimitTeam = (1<<TEAM.AXIS);
		}
		Util.EnableGoal( "ROUTE_blastdoor" );

		Util.MapDebugPrint( "Blast_Doors_Open" );
	},

	Blast_Doors_Closed = function( trigger )
	{
		if ( TestMap )
			{ return; }

		Map.BlastDoorStatus = 0;

		if ( Map.DocStatus == 1 )
		{
			Map.Switches.BlastDoorSwitch1.LimitTeam = (1<<TEAM.ALLIES);
			Map.Switches.BlastDoorSwitch2.LimitTeam = (1<<TEAM.ALLIES);
		}
		Util.DisableGoal( "ROUTE_blastdoor" );

		Util.MapDebugPrint( "Blast_Doors_Closed" );
	},

};

global OnMapLoad = function()
{
	if ( TestMapOn )
		{ Util.AutoTestMap(); }

	OnTrigger( "Allied Command Post constructed. Charge speed increased!", Map.allied_radio_built_Built );
	OnTrigger( "Axis team has destroyed the Allied Command Post!", Map.allied_radio_built_Destroyed );
	OnTrigger( "The Doors are opening!!", Map.doorcontrols_Destroyed );
	OnTrigger( "Allies have stolen the documents!", Map.Documents_Stolen );
	//OnTrigger( "Axis have returned the documents!", Map.Documents_Returned );
	OnTrigger( "Flag returned documents!", Map.Documents_Returned );
	OnTrigger( "Allied team has transmitted the documents!", Map.Documents_Transmitted );
	OnTrigger( "Main blast door opening!", Map.Blast_Doors_Open );
	OnTrigger( "Main blast door closing!", Map.Blast_Doors_Closed );

	//~SetAvailableMapGoals( TEAM.ALLIES, false, ".*" );
	//~SetAvailableMapGoals( TEAM.AXIS, false, ".*" );

	SetAvailableMapGoals( TEAM.ALLIES, true, "ATTACK_Controls_Attack_.*" );
	SetAvailableMapGoals( TEAM.ALLIES, false, "ATTACK_Doc_Attack_.*" );
	SetAvailableMapGoals( TEAM.ALLIES, false, "ATTACK_Deliver_Attack_.*" );
	SetAvailableMapGoals( TEAM.ALLIES, false, "DEFEND_.*" );
	SetAvailableMapGoals( TEAM.ALLIES, false, Map.Ammo_Cabinet_hutammocab );
	SetAvailableMapGoals( TEAM.ALLIES, false, Map.Health_Cabinet_huthpcab );
	SetAvailableMapGoals( TEAM.ALLIES, false, Map.Flag_documents );
	SetAvailableMapGoals( TEAM.ALLIES, false, Map.Build_allied_radio_built );
	SetAvailableMapGoals( TEAM.ALLIES, false, Map.Mount_77 );
	SetAvailableMapGoals( TEAM.ALLIES, false, Map.Repair_77 );

	SetAvailableMapGoals( TEAM.AXIS, true, "DEFEND_Controls_Defense_.*" );
	SetAvailableMapGoals( TEAM.AXIS, false, "DEFEND_Doc_Defense_.*" );
	SetAvailableMapGoals( TEAM.AXIS, false, "DEFEND_Deliver_Defense_.*" );
	SetAvailableMapGoals( TEAM.AXIS, false, "ATTACK_.*" );
	SetAvailableMapGoals( TEAM.AXIS, false, Map.Ammo_Cabinet_hutammocab );
	SetAvailableMapGoals( TEAM.AXIS, false, Map.Health_Cabinet_huthpcab );
	SetAvailableMapGoals( TEAM.AXIS, false, Map.Mount_77 );
	SetAvailableMapGoals( TEAM.AXIS, false, Map.Repair_77 );
	SetAvailableMapGoals( TEAM.AXIS, false, Map.Destroy_doorcontrols );

	SetMapGoalProperties( "ATTACK_.*", {mincamptime=15, maxcamptime=30});
	SetMapGoalProperties( "DEFEND_.*", {mincamptime=15, maxcamptime=30});

	Util.DisableGoal( "ROUTE_blastdoor" );

	if ( ETUtil.CountTeam(TEAM.AXIS) < 8 )
		{ Util.SetMaxUsersInProgress( 1, "DEFEND_.*" ); }
	else
		{ Util.SetMaxUsersInProgress( 2, "DEFEND_.*" ); }

	if ( ETUtil.CountTeam(TEAM.ALLIES) < 8 )
		{ Util.SetMaxUsersInProgress( 1, "ATTACK_.*" ); }
	else
		{ Util.SetMaxUsersInProgress( 2, "ATTACK_.*" ); }

	Util.SetMaxUsersInProgress( 15, "MAP_FLAG_.*" );


	Util.UpdateSwitchData();

	//Default Status'

	Map.BlastDoorStatus = 0; //closed
	Map.DocStatus = 0; //home

	//set up some routing

	MapRoutes =
	{
		PLANT_Door_controls =
		{
			ROUTE_AllySpawn =
			{
				ROUTE_allyspawnright =
				{
					ROUTE_hatch = { Weight = 2, },
				},
				ROUTE_allyspawnleft =
				{
					ROUTE_midhill = {},
					ROUTE_sidehill = {},
				},
			},
		},
		ATTACK_Controls_Attack_1 =
		{
			ROUTE_AllySpawn =
			{
				ROUTE_allyspawnright =
				{
					ROUTE_hatch = {},
				},
				ROUTE_allyspawnleft =
				{
					ROUTE_midhill = {},
					ROUTE_sidehill = {},
				},
			},
		},
		DEFEND_Doc_Defense_1 =
		{
			ROUTE_AxisSpawn =
			{
				ROUTE_window =
				{
					Weight = 2,
					ROUTE_docroom = {},
				},
				ROUTE_neardoor = { Weight = 2, },
				ROUTE_fardoor = {},
			},
		},
		CAPPOINT_399 =
		{
			ROUTE_docgrab =
			{
				ROUTE_docrunspawn =
				{
					ROUTE_blastdoor = {},
				},
				ROUTE_docruncp = {},
			},
		},
		FLAG_documents =
		{
			ROUTE_CpSpawn =
			{
				ROUTE_bridge = { Weight = 2, },
				ROUTE_door =
				{
					ROUTE_southstairs = {},
					ROUTE_northstairs = {},
				},
			},
			ROUTE_AllySpawn =
			{
				ROUTE_door =
				{
					Weight = 3,
					ROUTE_bridge = {},
					ROUTE_southstairs = {},
					ROUTE_northstairs = {},
				},
				ROUTE_sidehill =
				{
					ROUTE_spawnroute =
					{
						ROUTE_window = {},
					},
				},
			},
		},
		ATTACK_Deliver_Attack_1 =
		{
			ROUTE_CpSpawn =
			{
				ROUTE_docrunspawn = {},
				ROUTE_door =
				{
					ROUTE_breach = {},
				},
			},
			ROUTE_AllySpawn =
			{
				ROUTE_breach = {},
				ROUTE_blastdoor = {},
			},
		},
	};

	//copy some routes
	MapRoutes.ATTACK_Controls_Attack_2 = MapRoutes.ATTACK_Controls_Attack_1;
	MapRoutes.ATTACK_Controls_Attack_3 = MapRoutes.ATTACK_Controls_Attack_1;
	MapRoutes.ATTACK_Controls_Attack_4 = MapRoutes.ATTACK_Controls_Attack_1;
	MapRoutes.ATTACK_Controls_Attack_5 = MapRoutes.ATTACK_Controls_Attack_1;
	MapRoutes.ATTACK_Controls_Attack_6 = MapRoutes.ATTACK_Controls_Attack_1;
	MapRoutes.ATTACK_Controls_Attack_7 = MapRoutes.ATTACK_Controls_Attack_1;
	MapRoutes.DEFEND_Doc_Defense_2 = MapRoutes.DEFEND_Doc_Defense_1;
	MapRoutes.DEFEND_Doc_Defense_3 = MapRoutes.DEFEND_Doc_Defense_1;
	MapRoutes.DEFEND_Doc_Defense_4 = MapRoutes.DEFEND_Doc_Defense_1;
	MapRoutes.DEFEND_Doc_Defense_5 = MapRoutes.DEFEND_Doc_Defense_1;
	MapRoutes.DEFEND_Doc_Defense_6 = MapRoutes.DEFEND_Doc_Defense_1;
	MapRoutes.DEFEND_Doc_Defense_7 = MapRoutes.DEFEND_Doc_Defense_1;
	MapRoutes.ATTACK_Doc_Attack_1 = MapRoutes.FLAG_documents;
	MapRoutes.ATTACK_Doc_Attack_2 = MapRoutes.FLAG_documents;
	MapRoutes.ATTACK_Doc_Attack_3 = MapRoutes.FLAG_documents;
	MapRoutes.ATTACK_Doc_Attack_4 = MapRoutes.FLAG_documents;
	MapRoutes.ATTACK_Doc_Attack_5 = MapRoutes.FLAG_documents;
	MapRoutes.ATTACK_Deliver_Attack_2 = MapRoutes.ATTACK_Deliver_Attack_1;
	MapRoutes.ATTACK_Deliver_Attack_3 = MapRoutes.ATTACK_Deliver_Attack_1;
	MapRoutes.ATTACK_Deliver_Attack_4 = MapRoutes.ATTACK_Deliver_Attack_1;
	MapRoutes.ATTACK_Deliver_Attack_5 = MapRoutes.ATTACK_Deliver_Attack_1;
	MapRoutes.ATTACK_Deliver_Attack_6 = MapRoutes.ATTACK_Deliver_Attack_1;
	MapRoutes.ATTACK_Deliver_Attack_7 = MapRoutes.ATTACK_Deliver_Attack_1;

	Util.Routes(MapRoutes);

	Util.MapDebugPrint( "OnMapLoad" );
};

global OnBotJoin = function( bot )
{
	bot.TargetBreakableDist = 150.0;
};

/*
Attack / Defend Goal Naming conventions (Groups)

Controls
DEFEND_Controls_Defense_#
ATTACK_Controls_Attack_#

Documents
DEFEND_Doc_Defense_#
ATTACK_Doc_Attack_#

Deliver
DEFEND_Deliver_Defense_#
ATTACK_Deliver_Attack_#

*/
