// This script contains functionality to provide dodging while in combat

// These parameters are required
this.Name = "CombatMovement";       // The name of the goal.
this.Parent = "LowLevel";       // The name of the parent. This setting determines where in the state tree the goal will reside in.

// These parameters are optional
this.LimitToTargetClass( CLASS.ANYPLAYER ); //only valid if targeting a client (player)
this.Difficulty = 3;  // 0 - off, 1 - easy, 2 - medium, 3 - hard, 4 - random

this.Difficulty = ConfigGet( "CombatMovement","moveskill", this.Difficulty );

this.Initialize = function()
{
	// Internal variables
	this.DelayBetweenCalls = 0.4;

	// if a moveskill is not previously defined in the profile, assign one
	if ( this.Bot.moveskill == null )
	{
		if ( this.Difficulty == 4 ) {
			r = RandInt(0, 3);
			this.Bot.moveskill = r;
		}
		else {
			this.Bot.moveskill = this.Difficulty;
		}
	}

	this.Bot.hadtarget = false;

	Util.MapDebugPrint(this.Name + " Initialized", true);
};

this.GetPriority = function()
{
	while(1)
	{
		if (this.Bot.moveskill < 1 || this.Bot.moveskill > 3 )
			{ block(0); }

		tEnt = this.Bot.GetTarget();
		tDist = 9999; // init in case GetTargetInfo doesn't return anything

		if( tEnt && !GetEntFlags(tEnt, ENTFLAG.INJURED) && this.ShouldCombatMovement() )
		{
			this.Bot.ResetStuckTime();
			ti = this.Bot.GetTargetInfo(tEnt);
			if ( ti && ti.Distance )
			{
				tDist = ti.Distance;
			}

			this.Priority = 0.1;

			if (tEnt != this.Bot.LastTarget)
			{
				this.Bot.LastTarget = tEnt;
				sleep(this.Bot.ReactionTime);
			}

			if (this.Bot.moveskill == 1)
				{ this.easy(tDist); }
			else if (this.Bot.moveskill == 2)
				{ this.medium(tDist); }
			else if (this.Bot.moveskill == 3)
				{ this.hard(tDist); }
			else
			{
				//shouldn't get here
				this.Priority = 0;
				block(0);
			}
		}

		sleep(this.DelayBetweenCalls);
	}
};

this.ShouldCombatMovement = function()
{
	if ( this.Bot.DisableCombatMovement ) {
		return false;
	}

	if ( !this.EntFlagCheck() ) {
		return false;
	}

	if ( !this.WeaponCheck() ) {
		return false;
	}

	if ( !this.PowerUpCheck() ) {
		return false;
	}

	if ( this.Bot.GetHighLevelGoalName() == "ReviveTeammate" ) {
		return false;
	}

	//add more if needed...

	return true;
};

this.PowerUpCheck = function()
{
	if ( GetEntPowerups( this.Bot.GetGameEntity(), POWERUP.INVINCIBLE ) ) {
		return false;
	}

	return true;
};

this.WeaponCheck = function()
{
	w = this.Bot.GetCurrentWeapon();

	if ( w == WEAPON.PANZERFAUST  ||
		 w == WEAPON.VENOM   ||
		 w == WEAPON.FLAMETHROWER   ||
		 w == WEAPON.MAUSER ||
		 w == WEAPON.SNIPERRIFLE ||
		 w == WEAPON.ALLY_GRENADE ||
		 w == WEAPON.AXIS_GRENADE ||
		 w == WEAPON.BINOCULARS ) {
		return false;
	}

	return true;
};

this.EntFlagCheck = function()
{
	if ( this.Bot.HasAnyEntityFlag( ENTFLAG.MNT_MG42,ENTFLAG.ZOOMING,ENTFLAG.INWATER,ENTFLAG.ON_LADDER ) ) {
		return false;
	}

	return true;
};

this.hard = function( dist )
{
	rf = RandFloat( this.DelayBetweenCalls - 0.2, this.DelayBetweenCalls );
	if ( dist <= 1000 ) {
		r = RandInt( 0,10 );
		if ( r < 4 ) {
			this.Bot.HoldButton( BTN.SPRINT, rf );
			if ( RandInt( 0,1 ) < 1 ) {
				this.Bot.HoldButton( BTN.STRAFE_R, rf * 0.5f );
				sleep( rf * 0.5 );
				this.Bot.HoldButton( BTN.STRAFE_L, rf * 0.5f );
			} else
			{
				this.Bot.HoldButton( BTN.STRAFE_L, rf * 0.5f );
				sleep( rf * 0.5 );
				this.Bot.HoldButton( BTN.STRAFE_R, rf * 0.5f );
			}
		} else if ( r < 8 )   {
			if ( RandInt( 0,1 ) < 1 ) {
				this.Bot.HoldButton( BTN.STRAFE_R, rf );
			} else
			{ this.Bot.HoldButton( BTN.STRAFE_L, rf ); }
		} else if ( r < 9 )    {
			if ( !this.Bot.DontCombatCrouch ) {
				this.Bot.HoldButton( BTN.CROUCH, this.DelayBetweenCalls + 0.2f );
			}
		}
	} else if ( dist <= 1600 )   {
		if ( !this.Bot.DontCombatCrouch ) {
			this.Bot.HoldButton( BTN.CROUCH, this.DelayBetweenCalls + 0.2f );
		}

		if ( RandInt( 0,1 ) < 1 ) {
			this.Bot.HoldButton( BTN.STRAFE_R, rf );
		} else
		{ this.Bot.HoldButton( BTN.STRAFE_L, rf ); }
	} else if ( dist <= 3000 )   {
		if ( !this.Bot.DontCombatCrouch ) {
			this.Bot.HoldButton( BTN.CROUCH, this.DelayBetweenCalls + 0.2f );
		}
	} else
	{
		sleep( this.DelayBetweenCalls + 0.2f );
	}
};

this.medium = function( dist )
{
	rf = RandFloat( this.DelayBetweenCalls - 0.2, this.DelayBetweenCalls );
	if ( dist <= 500 ) {
		r = RandInt( 0,10 );
		if ( r < 3 ) {
			if ( RandInt( 0,1 ) < 1 ) {
				this.Bot.HoldButton( BTN.STRAFE_R, rf );
			} else
			{ this.Bot.HoldButton( BTN.STRAFE_L, rf ); }
		} else if ( r < 8 )   {
			if ( RandInt( 0,1 ) < 1 ) {
				this.Bot.HoldButton( BTN.STRAFE_R, rf );
			} else
			{ this.Bot.HoldButton( BTN.STRAFE_L, rf ); }
		} else if ( r < 9 )   {
			if ( !this.Bot.DontCombatCrouch ) {
				this.Bot.HoldButton( BTN.CROUCH, this.DelayBetweenCalls + 0.2f );
			}
		}
	} else if ( dist <= 800 )   {
		if ( RandInt( 0,1 ) < 1 ) {
			this.Bot.HoldButton( BTN.STRAFE_R, rf );
		} else
		{ this.Bot.HoldButton( BTN.STRAFE_L, rf ); }
	} else if ( dist <= 1500 )   {
		if ( !this.Bot.DontCombatCrouch ) {
			this.Bot.HoldButton( BTN.CROUCH, this.DelayBetweenCalls + 0.2f );
		}
	} else
	{
		sleep( this.DelayBetweenCalls + 0.2f );
	}
};

this.easy = function( dist )
{
	rf = RandFloat( this.DelayBetweenCalls - 0.2, this.DelayBetweenCalls );
	if ( dist <= 250 ) {
		r = RandInt( 0,10 );
		if ( r < 5 ) {
			if ( RandInt( 0,1 ) < 1 ) {
				this.Bot.HoldButton( BTN.STRAFE_R, rf );
			} else
			{ this.Bot.HoldButton( BTN.STRAFE_L, rf ); }
		} else if ( r < 7 )   {
			if ( !this.Bot.DontCombatCrouch ) {
				this.Bot.HoldButton( BTN.CROUCH, this.DelayBetweenCalls + 0.2f );
			}
		}
	} else if ( dist <= 400 )   {
		if ( RandInt( 0,1 ) < 1 ) {
			this.Bot.HoldButton( BTN.STRAFE_R, rf );
		} else
		{ this.Bot.HoldButton( BTN.STRAFE_L, rf ); }
	} else if ( dist <= 800 )   {
		if ( !this.Bot.DontCombatCrouch ) {
			this.Bot.HoldButton( BTN.CROUCH, this.DelayBetweenCalls + 0.2f );
		}
	} else
	{
		sleep( this.DelayBetweenCalls + 0.2f );
	}
};

