// generated by Fast Light User Interface Designer (fluid) version 1.0107

#include "PrecompCommon.h"
#include "FLTK_DebugWindow.h"
#ifdef DEBUG_WINDOW_SUPPORT
#include "DebugWindowCallbacks.h"
#include <FL/Fl_Text_Buffer.H>

Fl_Double_Window *m_MainWindow=(Fl_Double_Window *)0;

Fl_Group *m_ScriptConsole=(Fl_Group *)0;

Fl_Browser *m_ScriptConsoleOutput=(Fl_Browser *)0;

Fl_Input *m_ScriptConsoleInput=(Fl_Input *)0;

static void cb_m_ScriptConsoleInput(Fl_Input* o, void*) {
  if(Fl::event_key() == FL_KP + '8')
		ScriptConsoleCallbacks::OnScriptInputCycleHistory(false);
	else if(Fl::event_key() == FL_KP + '2')
		ScriptConsoleCallbacks::OnScriptInputCycleHistory(true);
	{
		if(Fl::event_key() == FL_Enter)
		{
			if(!Fl::get_key(FL_Shift_L) && !Fl::get_key(FL_Shift_R) && !Fl::event_state(FL_SCROLL_LOCK)) 
			{
				ScriptConsoleCallbacks::OnScriptInputEntered(o->value());
				o->value("");
				return;
			}
		}
		ScriptConsoleCallbacks::OnScriptInputChanged(o->value());
	};
}

Fl_Browser *m_AutoCompleteBox=(Fl_Browser *)0;

static void cb_m_AutoCompleteBox(Fl_Browser* o, void*) {
  Fl_Browser *b = static_cast<Fl_Browser*>(o);
ScriptConsoleCallbacks::OnAutoCompleteSelectionChanged(b->text(b->value()));
}

Fl_Group *m_LogConsole=(Fl_Group *)0;

Fl_Browser *m_LogConsoleOutput=(Fl_Browser *)0;

Fl_Group *m_PlayerTabs=(Fl_Group *)0;

BehaviorTree *m_StateTree=(BehaviorTree *)0;

BehaviorTreeInfo *m_StateInfoTree=(BehaviorTreeInfo *)0;

MapViewport *m_MapViewport=(MapViewport *)0;

Fl_Check_Button *m_DrawWaypoints=(Fl_Check_Button *)0;

Fl_Check_Button *m_DrawRadius=(Fl_Check_Button *)0;

Fl_Check_Button *m_DrawPaths=(Fl_Check_Button *)0;

Fl_Check_Button *m_DrawPlayers=(Fl_Check_Button *)0;

Fl_Check_Button *m_DrawEntities=(Fl_Check_Button *)0;

Fl_Check_Button *m_DrawGoals=(Fl_Check_Button *)0;

Fl_Check_Button *m_DrawBotPaths=(Fl_Check_Button *)0;

Fl_Check_Button *m_DrawInfo=(Fl_Check_Button *)0;

Fl_Browser *m_CurrentPlayers=(Fl_Browser *)0;

static void cb_m_CurrentPlayers(Fl_Browser* o, long) {
  Fl_Browser *b = static_cast<Fl_Browser*>(o);
ScriptConsoleCallbacks::OnPlayerSelectionChanged((int)b->data(b->value()));
}

ProfilerGroup *m_ProfileRenderSurface=(ProfilerGroup *)0;

static Fl_Button *m_ScriptConsoleButton=(Fl_Button *)0;

static void cb_m_ScriptConsoleButton(Fl_Button*, void*) {
  if(m_ScriptConsole->visible())
		  m_ScriptConsole->hide();
	  else
		  m_ScriptConsole->show();
}

static Fl_Button *m_LogButton=(Fl_Button *)0;

static void cb_m_LogButton(Fl_Button*, void*) {
  if(m_LogConsole->visible())
		  m_LogConsole->hide();
	  else
		  m_LogConsole->show();
}

static Fl_Button *m_ProfilerButton=(Fl_Button *)0;

static void cb_m_ProfilerButton(Fl_Button*, void*) {
  if(m_ProfileRenderSurface->visible())
		  m_ProfileRenderSurface->hide();
	  else
		  m_ProfileRenderSurface->show();
}

static Fl_Button *m_PlayersButton=(Fl_Button *)0;

static void cb_m_PlayersButton(Fl_Button*, void*) {
  if(m_PlayerTabs->visible())
{
	m_CurrentPlayers->hide();
	m_PlayerTabs->hide();
}
else
{
	m_CurrentPlayers->show();
	m_PlayerTabs->show();
};
}

Fl_Double_Window* MakeOmnibotDebugWindow() {
  Fl_Double_Window* w;
  { Fl_Double_Window* o = m_MainWindow = new Fl_Double_Window(800, 600, "Omni-bot Debug Window");
    w = o;
    { Fl_Group* o = m_ScriptConsole = new Fl_Group(0, 0, 800, 370, "Script Console");
      o->color((Fl_Color)55);
      o->selection_color((Fl_Color)55);
      o->labeltype(FL_NO_LABEL);
      o->labelcolor((Fl_Color)55);
      o->align(FL_ALIGN_TOP|FL_ALIGN_INSIDE);
      o->when(FL_WHEN_NEVER);
      o->hide();
      { Fl_Browser* o = m_ScriptConsoleOutput = new Fl_Browser(0, 0, 590, 310);
        o->box(FL_ENGRAVED_BOX);
        o->color((Fl_Color)34);
        o->selection_color((Fl_Color)55);
        o->labelsize(12);
        o->labelcolor((Fl_Color)55);
        o->textsize(12);
        o->textcolor(55);
      }
      { Fl_Input* o = m_ScriptConsoleInput = new Fl_Input(0, 310, 800, 60, "Input");
        o->type(4);
        o->box(FL_ENGRAVED_BOX);
        o->color((Fl_Color)55);
        o->labeltype(FL_NO_LABEL);
        o->labelsize(12);
        o->textsize(12);
        o->callback((Fl_Callback*)cb_m_ScriptConsoleInput);
        o->align(FL_ALIGN_BOTTOM|FL_ALIGN_INSIDE);
        o->when(FL_WHEN_CHANGED);
      }
      { Fl_Browser* o = m_AutoCompleteBox = new Fl_Browser(590, 0, 210, 310, "Autocomplete");
        o->type(1);
        o->box(FL_ENGRAVED_BOX);
        o->color((Fl_Color)34);
        o->selection_color((Fl_Color)34);
        o->labeltype(FL_NO_LABEL);
        o->labelsize(12);
        o->labelcolor((Fl_Color)17);
        o->textsize(12);
        o->textcolor(55);
        o->callback((Fl_Callback*)cb_m_AutoCompleteBox);
        o->align(FL_ALIGN_TOP);
      }
      o->end();
    }
    { Fl_Group* o = m_LogConsole = new Fl_Group(0, 0, 800, 580, "Log Console");
      o->labeltype(FL_NO_LABEL);
      o->align(FL_ALIGN_TOP|FL_ALIGN_INSIDE);
      o->when(FL_WHEN_NEVER);
      o->hide();
      { Fl_Browser* o = m_LogConsoleOutput = new Fl_Browser(0, 0, 800, 580);
        o->box(FL_ENGRAVED_BOX);
        o->color((Fl_Color)34);
        o->labelsize(12);
        o->textsize(12);
      }
      o->end();
    }
    { Fl_Group* o = m_PlayerTabs = new Fl_Group(0, 20, 645, 550, "BotName");
      o->color((Fl_Color)40);
      { Fl_Tabs* o = new Fl_Tabs(0, 20, 640, 545);
        { Fl_Group* o = new Fl_Group(0, 45, 640, 520, "Players");
          { BehaviorTree* o = m_StateTree = new BehaviorTree(5, 60, 330, 500, "Behaviour Tree");
            o->box(FL_DOWN_FRAME);
            o->color(FL_BACKGROUND_COLOR);
            o->selection_color(FL_BACKGROUND_COLOR);
            o->labeltype(FL_NORMAL_LABEL);
            o->labelfont(0);
            o->labelsize(14);
            o->labelcolor(FL_FOREGROUND_COLOR);
            o->align(FL_ALIGN_TOP);
            o->when(FL_WHEN_RELEASE);
            o->end();
          }
          { BehaviorTreeInfo* o = m_StateInfoTree = new BehaviorTreeInfo(335, 60, 300, 500, "Behaviour Info");
            o->box(FL_DOWN_FRAME);
            o->color(FL_BACKGROUND_COLOR);
            o->selection_color(FL_BACKGROUND_COLOR);
            o->labeltype(FL_NORMAL_LABEL);
            o->labelfont(0);
            o->labelsize(14);
            o->labelcolor(FL_FOREGROUND_COLOR);
            o->align(FL_ALIGN_TOP);
            o->when(FL_WHEN_RELEASE);
            o->end();
          }
          o->end();
        }
        { Fl_Group* o = new Fl_Group(0, 45, 640, 520, "Map");
          o->hide();
          { MapViewport* o = m_MapViewport = new MapViewport(5, 50, 630, 490);
            o->box(FL_NO_BOX);
            o->color(FL_BACKGROUND_COLOR);
            o->selection_color(FL_BACKGROUND_COLOR);
            o->labeltype(FL_NORMAL_LABEL);
            o->labelfont(0);
            o->labelsize(14);
            o->labelcolor(FL_FOREGROUND_COLOR);
            o->align(FL_ALIGN_TOP);
            o->when(FL_WHEN_RELEASE);
            o->end();
          }
          { Fl_Check_Button* o = m_DrawWaypoints = new Fl_Check_Button(5, 542, 95, 15, "Waypoints");
            o->down_box(FL_DOWN_BOX);
            o->value(1);
          }
          { Fl_Check_Button* o = m_DrawRadius = new Fl_Check_Button(106, 542, 72, 15, "Radius");
            o->down_box(FL_DOWN_BOX);
            o->value(1);
          }
          { Fl_Check_Button* o = m_DrawPaths = new Fl_Check_Button(185, 542, 60, 15, "Paths");
            o->down_box(FL_DOWN_BOX);
            o->value(1);
          }
          { Fl_Check_Button* o = m_DrawPlayers = new Fl_Check_Button(252, 542, 70, 15, "Players");
            o->down_box(FL_DOWN_BOX);
            o->value(1);
          }
          { Fl_Check_Button* o = m_DrawEntities = new Fl_Check_Button(329, 542, 70, 15, "Entities");
            o->down_box(FL_DOWN_BOX);
            o->value(1);
          }
          { Fl_Check_Button* o = m_DrawGoals = new Fl_Check_Button(406, 542, 70, 15, "Goals");
            o->down_box(FL_DOWN_BOX);
          }
          { Fl_Check_Button* o = m_DrawBotPaths = new Fl_Check_Button(483, 542, 85, 15, "Bot Paths");
            o->down_box(FL_DOWN_BOX);
          }
          { Fl_Check_Button* o = m_DrawInfo = new Fl_Check_Button(575, 542, 53, 15, "Info");
            o->down_box(FL_DOWN_BOX);
            o->value(1);
          }
          o->end();
        }
        o->end();
      }
      o->end();
    }
    { Fl_Browser* o = m_CurrentPlayers = new Fl_Browser(645, 20, 155, 550, "Current Players");
      o->type(1);
      o->callback((Fl_Callback*)cb_m_CurrentPlayers);
      o->align(FL_ALIGN_TOP);
      o->when(3);
    }
    { ProfilerGroup* o = m_ProfileRenderSurface = new ProfilerGroup(170, 370, 450, 230, "Profiler");
      o->box(FL_ENGRAVED_BOX);
      o->color(FL_GRAY0);
      o->selection_color(FL_BACKGROUND_COLOR);
      o->labeltype(FL_NO_LABEL);
      o->labelfont(0);
      o->labelsize(12);
      o->labelcolor(FL_FOREGROUND_COLOR);
      o->align(FL_ALIGN_TOP|FL_ALIGN_INSIDE);
      o->when(FL_WHEN_RELEASE);
      o->hide();
      o->end();
      Fl_Group::current()->resizable(o);
    }
    { Fl_Button* o = m_ScriptConsoleButton = new Fl_Button(731, 580, 68, 20, "Console");
      o->shortcut(0x60);
      o->labeltype(FL_ENGRAVED_LABEL);
      o->callback((Fl_Callback*)cb_m_ScriptConsoleButton);
    }
    { Fl_Button* o = m_LogButton = new Fl_Button(590, 580, 68, 20, "Log");
      o->shortcut(0x6c);
      o->labeltype(FL_ENGRAVED_LABEL);
      o->callback((Fl_Callback*)cb_m_LogButton);
    }
    { Fl_Button* o = m_ProfilerButton = new Fl_Button(660, 580, 68, 20, "Profiler");
      o->shortcut(0x70);
      o->labeltype(FL_ENGRAVED_LABEL);
      o->callback((Fl_Callback*)cb_m_ProfilerButton);
    }
    { Fl_Button* o = m_PlayersButton = new Fl_Button(520, 580, 68, 20, "Game");
      o->shortcut(0x6c);
      o->labeltype(FL_ENGRAVED_LABEL);
      o->callback((Fl_Callback*)cb_m_PlayersButton);
    }
    o->end();
  }
  return w;
}
#endif
