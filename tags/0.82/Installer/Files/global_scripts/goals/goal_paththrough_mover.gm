// This script contains functionality to trigger any available movers as set up in the global map table.

// These parameters are required
this.Name = "RideMover_PT";		// The name of the goal.
this.Parent = "LowLevel";		// PathThrough states must be low level or they will not be used.

this.OnPathThrough = function(data)
{

	mover = Map.RideMovers[data];
	if(mover)
	{
		this.CurrentMover = data;
		return true;
	}

	this.CurrentMover = null;
	return false;
};

this.Enter = function()
{
	this.mover = Map.RideMovers[this.CurrentMover];
	this.HighLevelGoal = this.Bot.GetHighLevelGoalName();

	wpinfo = Util.WpNameInfo(this.mover.startwp);
	this.Pos = wpinfo.position;
	this.Facing = wpinfo.facing * 1024;

	this.Bot.DisableCombatMovement = true;
};

this.Exit = function()
{
	this.Bot.DisableCombatMovement = false;
};

this.Update = function()
{
	this.Goto(this.Bot.GetPosition());
	
	while ( this.mover.board(this) != true )
	{
		//stand in place ...
		this.Bot.MoveTowards(this.Bot.GetPosition());
		yield();
	}

	if ( !this.Pos || this.Goto(this.Pos) == EVENT.PATH_FAILED )
	{
		this.Finished();
	}

	while ( this.mover.leave(this) != true )
	{
		this.RidePosition = this.GetVehicleRidePosition();
		this.Bot.MoveTowards(this.RidePosition);
		if ( this.mover.stance )
			{ this.Bot.PressButton(this.mover.stance); }
		yield();
	}

	// exitwp is dynamic, so don't use cached table
	wpinfo = Util.WpNameInfo(Map.RideMovers[this.CurrentMover].exitwp);

	if ( !wpinfo.position || this.Goto(wpinfo.position) == EVENT.PATH_FAILED )
	{
		this.Finished();
	}

	// Finish the state.
	this.Finished();
};

this.GetVehicleRidePosition = function()
{
	moverGoal = GetGoal(this.mover.movergoal);

	if ( moverGoal )
	{
		absPos = GetEntityWorldSpace(moverGoal.GetEntity(),this.mover.rideposition);
		return absPos;
	}
	else
	{
		print( "RideMover_PT: this.GetVehicleRidePosition: Invalid GoalName!" );
		this.Finished();
	}
};
