// This script contains functionality to trigger any available switches as set up in the global map table.

// These parameters are required
this.Name = "SWITCH";		// The name of the goal.
this.Parent = "HighLevel";		// The name of the parent. This setting determines where in the state tree the goal will reside in.
this.SkipGetPriorityWhenActive = true;

this.Initialize = function()
{
	this.Bot.QueryGoalsTable = table();
};

this.Enter = function()
{
	if(!this.MarkInProgress(this.MapGoal)) {
		this.BlackboardDelay(5, this.MapGoal);
		this.Finished();
	}
};

this.GetPriority = function()
{
	while(1)
	{
		count = this.QueryGoals(this.Bot.QueryGoalsTable,0x93e05f71 /* SWITCH */);
		if ( count > 0 )
		{
			foreach ( id and goal in this.Bot.QueryGoalsTable )
			{
				this.MapGoal = goal;
				this.Priority = goal.GetGoalPriority(this.Bot);
				break;
			}
		}

		tableClear(this.Bot.QueryGoalsTable);

		sleep(2);
	}
};

this.Update = function()
{
	if ( this.RouteTo(this.MapGoal) == EVENT.PATH_SUCCESS )
	{
		if(!this.MarkInUse(this.MapGoal)) {
			this.BlackboardDelay(5, this.MapGoal);
			this.Finished();
		}

		if ( (!this.MapGoal.AimPosition || this.MapGoal.AimPosition.IsZero()) && !this.MapGoal.Facing.IsZero() )
		{
			this.AddAimRequest(Priority.High, "facing", this.MapGoal.Facing);
		}
		else if ( this.MapGoal.AimPosition && !this.MapGoal.AimPosition.IsZero() )
		{
			this.AddAimRequest(Priority.High, "position", this.MapGoal.AimPosition);
		}

		timeout = 0;
		while( timeout < this.MapGoal.Timeout && this.MapGoal.IsAvailable(this.Bot.GetTeam()) )
		{
			timeout += 250;

			switch(this.MapGoal.Stance)
			{
				case "crouch":
				{
					this.Bot.HoldButton(BTN.CROUCH, 0.5);
				}
				case "prone":
				{
					this.Bot.HoldButton(BTN.PRONE, 0.5);
				}
			}

			if ( this.MapGoal.Use )
			{
				this.Bot.PressButton(BTN.USE);
			}

			sleep(0.25);
		}
		
		if ( timeout >= this.MapGoal.Timeout ) {
			this.BlackboardDelay(5, this.MapGoal);
		}
	}
	else
	{
		this.BlackboardDelay(5, this.MapGoal);
		Util.ScriptDebugPrint(this.MapGoal.GetName(), "pathfailed");
	}

	this.Finished();
};

