//==========================================================================================
//
//	pirates_b1.gm
//
//	Who  	When		What
//------------------------------------------------------------------------------------------
//	^4Tardis	24 May 2011	Initial Script
//
//==========================================================================================
//

global Map =
{
	Debug = 0, // please set to zero before distributing your script
	ShowMovers = false,

	Main_Entrance_Dyno = 0,
	Side_Entrance_Dyno = 0,
	Axis_Command_Post_Dyno = 0,
	Allied_Command_Post_Dyno = 0,
	
	Talk = true, //set Talk to false if you don't want the bots to cheer after winning game:
	
	Navigation =
	{
		wait =
		{
			navigate = function(_this)
			{
				_this.Bot.HoldButton(BTN.BACKWARD, 0.5);
				sleep(1);
			},
		},
	},

	// /bot waypoint_setproperty paththrough Navigation_PT:wait
	
	Roles =
	{
		AXIS = // Team
		{
			AllBots = false, // each bot is considered for a role
			DEFENDER = // the DEFENDER role
			{
				spawnpt = 1,			// users of this role will choose spawnpt 1
				numbots = 5,			// maximum of 5 bots
			},
		},
		ALLIES =
		{
			AllBots = false, // default: every other bot
			ATTACKER =
			{
				spawnpt = 3,
				numbots = 4,
				crucialClass = CLASS.ENGINEER,	// first bot
			},
		},
	},
	
	Allied_Command_Post_Built = function( trigger )
	{
		if ( TestMap )
			{ return; }
		SetAvailableMapGoals( TEAM.AXIS, true, "PLANT_Command_Post" );
		Util.MapDebugPrint( "Allied_Command_Post_Built" );
	},

	Allied_Command_Post_Planted = function( trigger )
	{
		if ( TestMap )
			{ return; }

		Map.Allied_Command_Post_Dyno += 1;
		Util.MapDebugPrint( "Allied_Command_Post_Planted" );
	},

	Allied_Command_Post_Defused = function( trigger )
	{
		if ( TestMap )
			{ return; }

		Map.Allied_Command_Post_Dyno -= 1;
		Util.MapDebugPrint( "Allied_Command_Post_Defused" );
	},

	Allied_Command_Post_Destroyed = function( trigger )
	{
		if ( TestMap )
			{ return; }
			
		Util.MapDebugPrint( "Allied_Command_Post_Destroyed" );
	},
	
	Axis_Command_Post_Built = function( trigger )
	{
		if ( TestMap )
			{ return; }
			
		SetAvailableMapGoals( TEAM.ALLIES, true, "PLANT_Command_Post" );
		Util.MapDebugPrint( "Axis_Command_Post_Built" );
	},

	Axis_Command_Post_Planted = function( trigger )
	{
		if ( TestMap )
			{ return; }

		Map.Axis_Command_Post_Dyno += 1;
		Util.MapDebugPrint( "Axis_Command_Post_Planted" );
	},

	Axis_Command_Post_Defused = function( trigger )
	{
		if ( TestMap )
			{ return; }

		Map.Axis_Command_Post_Dyno -= 1;
		Util.MapDebugPrint( "Axis_Command_Post_Defused" );
	},

	Axis_Command_Post_Destroyed = function( trigger )
	{
		if ( TestMap )
			{ return; }
		Util.MapDebugPrint( "Axis_Command_Post_Destroyed" );
	},
	
	Main_Entrance_Planted = function( trigger )
	{
		if ( TestMap )
			{ return; }

		Map.Main_Entrance_Dyno += 1;
		Util.MapDebugPrint( "Main_Entrance_Planted" );
	},

	Side_Entrance_Planted = function( trigger )
	{
		if ( TestMap )
			{ return; }

		Map.Side_Entrance_Dyno += 1;
		Util.MapDebugPrint( "Side_Entrance_Planted" );
	},


	Main_Entrance_Defused = function( trigger )
	{
		if ( TestMap )
			{ return; }

		Map.Main_Entrance_Dyno -= 1;
		Util.MapDebugPrint( "Main_Entrance_Defused" );
	},

	Side_Entrance_Defused = function( trigger )
	{
		if ( TestMap )
			{ return; }

		Map.Side_Entrance_Dyno -= 1;
		Util.MapDebugPrint( "Side_Entrance_Defused" );
	},

	Main_Entrance_Destroyed = function( trigger )
	{
		if ( TestMap )
			{ return; }

		Map.Main_Entrance_Dyno = 0;
		
	SetAvailableMapGoals( TEAM.AXIS, false, "CHECKPOINT.*" );
	SetAvailableMapGoals( TEAM.AXIS, false, "DEFEND_main.*" );
	SetAvailableMapGoals( TEAM.AXIS, false, "DEFEND_side.*" );
	SetAvailableMapGoals( TEAM.AXIS, false, "AMMOCAB.*" );
	SetAvailableMapGoals( TEAM.AXIS, false, "HEALTHCAB.*" );
	SetAvailableMapGoals( TEAM.AXIS, false, "MOUNTMG42.*" );
	SetAvailableMapGoals( TEAM.AXIS, false, "REPAIRMG42.*" );
	SetGoalPriority( "DEFUSE_Side_Entrance.*", 0.0, TEAM.AXIS, CLASS.ENGINEER, true);
	SetAvailableMapGoals( TEAM.ALLIES, false, "GRENADE_main" );
	SetAvailableMapGoals( TEAM.ALLIES, false, "CHECKPOINT.*" );

	SetAvailableMapGoals( TEAM.AXIS, true, "DEFEND_gold.*" );
	SetAvailableMapGoals( TEAM.AXIS, true, "CAMP_drop.*" );	
	SetAvailableMapGoals( TEAM.AXIS, true, "FLAG.*" );
	SetAvailableMapGoals( TEAM.AXIS, true, "MOBILEMG42_drop" );
	SetAvailableMapGoals( TEAM.ALLIES, true, "FLAG.*" );
	SetAvailableMapGoals( TEAM.ALLIES, true, "CAPPOINT_gold" );
	
		Util.MapDebugPrint( "Main_Entrance_Destroyed" );
	},

	Side_Entrance_Destroyed = function( trigger )
	{
		if ( TestMap )
			{ return; }

		Map.Side_Entrance_Dyno = 0;
	
	SetAvailableMapGoals( TEAM.AXIS, false, "CHECKPOINT.*" );
	SetAvailableMapGoals( TEAM.AXIS, false, "DEFEND_main.*" );
	SetAvailableMapGoals( TEAM.AXIS, false, "DEFEND_side.*" );
	SetAvailableMapGoals( TEAM.AXIS, false, "AMMOCAB.*" );
	SetAvailableMapGoals( TEAM.AXIS, false, "HEALTHCAB.*" );
	SetAvailableMapGoals( TEAM.AXIS, false, "MOUNTMG42.*" );
	SetAvailableMapGoals( TEAM.AXIS, false, "REPAIRMG42.*" );
	SetGoalPriority( "DEFUSE_Main_Entrance.*", 0.0, TEAM.AXIS, CLASS.ENGINEER, true);
	SetAvailableMapGoals( TEAM.ALLIES, false, "GRENADE_main" );
	SetAvailableMapGoals( TEAM.ALLIES, false, "CHECKPOINT.*" );
	
	SetAvailableMapGoals( TEAM.AXIS, true, "DEFEND_gold.*" );
	SetAvailableMapGoals( TEAM.AXIS, true, "CAMP_drop.*" );
	SetAvailableMapGoals( TEAM.AXIS, true, "FLAG.*" );
	SetAvailableMapGoals( TEAM.AXIS, true, "MOBILEMG42_drop" );
	SetAvailableMapGoals( TEAM.ALLIES, true, "FLAG.*" );
	SetAvailableMapGoals( TEAM.ALLIES, true, "CAPPOINT_gold" );
	
		Util.MapDebugPrint( "Side_Entrance_Destroyed" );
	},

	goldcrate1_Taken = function( trigger )
	{
		if ( TestMap )
			{ return; }

		Util.MapDebugPrint( "goldcrate1_Taken" );
	},

	goldcrate2_Taken = function( trigger )
	{
		if ( TestMap )
			{ return; }

		Util.MapDebugPrint( "goldcrate2_Taken" );
	},

	goldcrate1_Returned = function( trigger )
	{
		if ( TestMap )
			{ return; }

		Util.MapDebugPrint( "goldcrate1_Returned" );
	},

	goldcrate2_Returned = function( trigger )
	{
		if ( TestMap )
			{ return; }

		Util.MapDebugPrint( "goldcrate2_Returned" );
	},

	goldcrate1_Secured = function( trigger )
	{
		if ( TestMap )
			{ return; }

		Util.MapDebugPrint( "goldcrate1_Secured" );
	},

	goldcrate2_Secured = function( trigger )
	{
		if ( TestMap )
			{ return; }

		Util.MapDebugPrint( "goldcrate2_Secured" );
	},

	flag_Axis_Captured = function( trigger )
	{
		if ( TestMap )
			{ return; }

		Util.MapDebugPrint( "flag_Axis_Captured" );
	},

	flag_Allies_Captured = function( trigger )
	{
		if ( TestMap )
			{ return; }

		Util.MapDebugPrint( "flag_Allies_Captured" );
	},
	
	AlliedWin = function( trigger )
	{
		if ( TestMap )
			{ return; }
//Game Over
		if ( Map.Talk && MAP_TALK )
		{
			ETUtil.WinningChat( TEAM.ALLIES );
			ETUtil.LosingChat( TEAM.AXIS );
		}
		
		Util.MapDebugPrint( "Allies have Won!" );
	},

};

global OnMapLoad = function()
{
	if ( TestMapOn )
		{ Util.AutoTestMap(); }

	// Register callback functions
	OnTrigger( "Planted at the Main Entrance.", Map.Main_Entrance_Planted );
	OnTrigger( "Planted at the Side Entrance.", Map.Side_Entrance_Planted );
	OnTrigger( "Defused at the Main Entrance.", Map.Main_Entrance_Defused );
	OnTrigger( "Defused at the Side Entrance.", Map.Side_Entrance_Defused );
	OnTrigger( "Allies have breached the Main Entrance and secured the Old City!", Map.Main_Entrance_Destroyed );
	OnTrigger( "Allies have breached the Side Entrance and secured the Old City!", Map.Side_Entrance_Destroyed );
	OnTrigger( "Allies have stolen The Gold Crate!", Map.goldcrate1_Taken );
	OnTrigger( "Allies have stolen The Gold Crate!", Map.goldcrate2_Taken );
	OnTrigger( "Axis have returned The Gold Crate!", Map.goldcrate1_Returned );
	OnTrigger( "Axis have returned The Gold Crate!", Map.goldcrate2_Returned );
	OnTrigger( "Allied team has secured the first Gold Crate!", Map.goldcrate1_Secured );
	OnTrigger( "Allied team has secured the second Gold Crate!", Map.goldcrate2_Secured );
	OnTrigger( "Axis reclaim the Old City!", Map.flag_Axis_Captured );
	OnTrigger( "Allies capture the Old City!", Map.flag_Allies_Captured );
	OnTrigger( "Allied team secured both Gold Crates!", Map.AlliedWin );

	Util.DisableGoal( ".*", true ); // all but routes
	
	SetAvailableMapGoals( TEAM.AXIS, true, "DEFEND_main.*" );
	SetAvailableMapGoals( TEAM.AXIS, true, "DEFEND_side.*" );
	SetAvailableMapGoals( TEAM.AXIS, true, "AMMOCAB.*" );
	SetAvailableMapGoals( TEAM.AXIS, true, "HEALTHCAB.*" );
	//SetAvailableMapGoals( TEAM.AXIS, true, "MOUNTMG42.*" );
	//SetAvailableMapGoals( TEAM.AXIS, true, "REPAIRMG42.*" );
	SetAvailableMapGoals( TEAM.AXIS, true, "CHECKPOINT.*" );
	SetAvailableMapGoals( TEAM.ALLIES, true, "GRENADE_main" );
	SetAvailableMapGoals( TEAM.ALLIES, true, "PLANT_Main_Entrance" );
	SetAvailableMapGoals( TEAM.ALLIES, true, "PLANT_Side_Entrance" );
	SetAvailableMapGoals( TEAM.ALLIES, true, "AMMOCAB.*" );
	SetAvailableMapGoals( TEAM.ALLIES, true, "HEALTHCAB.*" );
	SetAvailableMapGoals( TEAM.ALLIES, true, "CHECKPOINT.*" );
	
	//~SetAvailableMapGoals( TEAM.ALLIES, true, "ATTACK_.*" );

	// Max users per goal
	Util.SetMaxUsers( 1, "ATTACK_.*" );
	Util.SetMaxUsers( 1, "DEFEND_.*" );
	Util.SetMaxUsers( 1, "GRENADE_.*" );
	Util.SetMaxUsers( 1, "SNIPE_.*" );
	Util.SetMaxUsers( 1, "MOUNTMG42_.*" );
	Util.SetMaxUsers( 1, "MOBILEMG42_.*" );
	Util.SetMaxUsers( 1, "MOBILEMORTAR_.*" );
	Util.SetMaxUsers( 1, "AIRSTRIKE_.*" );
	Util.SetMaxUsers( 1, "CALLARTILLERY_.*" );
	Util.SetMaxUsers( 2, "CHECKPOINT.*" );
	Util.SetMaxUsers( 1, "CAMP_.*" );
	Util.SetMaxUsers( 1, "PLANT_.*" );
	
	// Camp times
	SetMapGoalProperties( "MOUNTMG42_.*", {MinCampTime=15, MaxCampTime=90} );
	SetMapGoalProperties( "MOBILEMG42_.*", {MinCampTime=10, MaxCampTime=60} );
	
	Util.AddUseWp("PLANT_Main_Entrance", "main1");
	Util.AddUseWp("PLANT_Main_Entrance", "main2");
	Util.AddUseWp("PLANT_Main_Entrance", "main3");
	Util.AddUseWp("PLANT_Side_Entrance", "side");
	Util.AddUseWp("PLANT_Side_Entrance", "side1");
	Util.AddUseWp("PLANT_Side_Entrance", "side2");

	Util.MapDebugPrint( "Omni-bot map script for " + GetMapName() + " executed." );
};

global OnBotJoin = function( bot )
{
	// Uncomment for shootable breakables
	bot.TargetBreakableDist = 90.0;
	// Only set MaxViewDistance on maps with limited sight (e.g. fog)
	bot.MaxViewDistance = 2400;
};
