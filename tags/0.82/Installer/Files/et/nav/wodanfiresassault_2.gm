global Map =
{
	Quiet = true,

	Airstrike =
	{
		bridge =
		{
			Enabled = false,
			Team = (1<<TEAM.AXIS),
			Facing = Vector3(-0.774,-0.000,0.631),
			NoPause = true,
		},
	},
	
	Navigation =
	{
		towerjump =
		{
			navigate = function(_this)
			{
				_this.Bot.PressButton(BTN.JUMP);
				_this.Bot.HoldButton(BTN.STRAFE_R, 2);
				sleep(2);
			},			
		},
	},	

	Checkpoint_oldcityflag = "CHECKPOINT_oldcityflag",
	Flag_allied_gold = "FLAG_allied_gold",
	Cappoint_Transmitter = "CAPPOINT_Transmitter",
	Plant_Door = "PLANT_Bunker_Door",
	Plant_Wall = "PLANT_Seawall",
	Mount_mg42_1 = "MOUNTMG42_mg42_1",
	Mount_892 = "MOUNTMG42_892",
	Mount_uppermg = "MOUNTMG42_uppermg",
	Mount_t364 = "MOUNTMG42_t364",
	Mount_416 = "MOUNTMG42_416",
	Repair_mg42_1 = "REPAIRMG42_mg42_1",
	Repair_892 = "REPAIRMG42_892",
	Repair_uppermg = "REPAIRMG42_uppermg",
	Repair_t364 = "REPAIRMG42_t364",
	Repair_416 = "REPAIRMG42_416",
	Build_Allied_Command_Post = "BUILD_Allied_Command_Post",
	Plant_Allied_Command_Post = "PLANT_Allied_Command_Post",
	Build_Axis_Command_Post = "BUILD_Axis_Command_Post",
	Plant_Axis_Command_Post = "PLANT_Axis_Command_Post",
	Plant_Stairwell_Door = "PLANT_Stairwell_Door",
	
	DontDispenseAmmo = true,
	
	//set status' for conditionals
	FlagStatus = 0, //0 nobody, 1 axis, 2 allies
	DocStatus = false, //home
	DoorStatus = false, //intact
	WallStatus = false, //intact
	WarRoomShift = false,
	StairwellStatus = false, //intact

      //tables to hold current AS goals	
	AxisASTable = {},
	AlliesASTable = {},

	//tables to copy to current AS goal tables
	AxisASWall ={ "red_as1_p1", "red_as2_p1", "red_as3_p1", },
	AlliesASWall = { "blue_as1_p1", "blue_as2_p1", "blue_as3_p1", },

	BackStairsTrigger =
	{
		Name = "BackStairsTrigger",
		TriggerOnClass = CLASS.ANYPLAYER,
		OnEnter = function(ent)
		{
			if( GetEntTeam(ent) == TEAM.ALLIES )
			{ 
				Map.WarRoomShift = true;

				if ( !Map.DocStatus )
				{
					SetAvailableMapGoals( TEAM.AXIS, false, "DEFEND_.*" );
					SetAvailableMapGoals( TEAM.AXIS, true, "DEFEND_rWar.*" );
				}
				else if ( Map.DocStatus )
				{
					if ( GetEntFlags( ent, ENTFLAG.CARRYINGGOAL ) )
					{
						Map.WarRoomShift = false;
						SetAvailableMapGoals( TEAM.AXIS, false, "DEFEND_.*" );
						SetAvailableMapGoals( TEAM.AXIS, true, "DEFEND_rUpper.*" );						
					}
				}
			}
		},
		OnExit = function(ent)
		{
		},
	},
	
	BeachTrigger =
	{
		Name = "BeachTrigger",
		TriggerOnClass = CLASS.ANYPLAYER,
		OnEnter = function(ent)
		{
			if( GetEntTeam(ent) == TEAM.ALLIES )
			{ 
				if ( GetEntFlags( ent, ENTFLAG.CARRYINGGOAL ) )
				{
					// shift to the beach for transmit
					SetAvailableMapGoals( TEAM.AXIS, false, "DEFEND_.*" );
					SetAvailableMapGoals( TEAM.ALLIES, false, "ATTACK_.*" );
					SetAvailableMapGoals( TEAM.AXIS, true, "DEFEND_rTransmit.*" );
					SetAvailableMapGoals( TEAM.ALLIES, true, "ATTACK_bTransmit.*" );
					Util.EnableGoal("MOUNTMG42_transMg");
				}
			}
		},
		OnExit = function(ent)
		{
		},
	},	
	
	TowerTrigger = 
	{
		Name = "TowerTrigger",
		TriggerOnClass = CLASS.ANYPLAYER,
		OnEnter = function(ent)
		{
			if ( TestMap )
				{ return; }	
				
			if( GetEntTeam(ent) == TEAM.ALLIES )   
			{ 
				SetAvailableMapGoals( TEAM.ALLIES, false, "ARTILLERY_S_bTower.*" );
			}
		},
		OnExit = function(ent)
		{
			if ( TestMap )
				{ return; }
			if (Map.DocStatus == true)   //Docs are stolen
				   { return; }
			if (Map.FlagStatus == 1)	//Axis still own flag
				{ return; } 
			if( GetEntTeam(ent) == TEAM.ALLIES )   
			{ 
				SetAvailableMapGoals( TEAM.ALLIES, true, "ARTILLERY_S_bTower.*" );
			}
		},	
	},	

	Seawall_Destroyed = function( trigger )
	{
		if ( TestMap )
			{ return; }

		Map.DoorStatus = true;

		if ( !Map.DocStatus )
			{ Map.eval_beach_shift(); }
		Map.DontDispenseAmmo = false;
	},

	Bunker_Door_Destroyed = function( trigger )
	{
		if ( TestMap )
			{ return; }

		Map.WallStatus = true;

		if ( !Map.DocStatus )
			{ Map.eval_beach_shift(); }
		Map.DontDispenseAmmo = false;
	},

	eval_beach_shift = function()
	{
		if ( Map.WallStatus && Map.DoorStatus ) //both destroyed
		{
			SetAvailableMapGoals( TEAM.AXIS, true, "DEFEND_rUpper.*" );
			SetAvailableMapGoals( TEAM.AXIS, true, "DEFEND_rAlt.*" );
			SetAvailableMapGoals( TEAM.AXIS, true, "PANZER_rUpper.*" );
			SetAvailableMapGoals( TEAM.AXIS, true, "VENOM_rUpper.*" );
			SetAvailableMapGoals( TEAM.AXIS, true, "FLAME_rUpper.*" );
			SetAvailableMapGoals( TEAM.AXIS, true, "PLANT_Allies_Command_Post" );
			
			SetAvailableMapGoals( TEAM.ALLIES, true, "PLANT_Axis_Command_Post" );
			SetAvailableMapGoals( TEAM.ALLIES, true, "BUILD_Allied_Command_Post" );
			SetAvailableMapGoals( TEAM.ALLIES, true, "PLANT_Stairwell_Door" );

			SetAvailableMapGoals( TEAM.AXIS, false, "SNIPE_rBeach.*" );
			SetAvailableMapGoals( TEAM.ALLIES, false, "SNIPE_bBeach.*" );
			SetAvailableMapGoals( TEAM.AXIS, false, "DEFEND_rWall.*" );
			SetAvailableMapGoals( TEAM.AXIS, false, "DEFEND_rDoor.*" );
			SetAvailableMapGoals( TEAM.AXIS, false, Map.Mount_416);
			SetAvailableMapGoals( TEAM.AXIS, false, Map.Mount_892);
			SetAvailableMapGoals( TEAM.AXIS, false, Map.Mount_mg42_1);
			
			//only axis soldiers should try and grab flag
			if( !Map.StairwellStatus )
			{
				ETUtil.LimitToClass( Map.Checkpoint_oldcityflag, TEAM.AXIS, CLASS.SOLDIER );
			}
			
			Util.SetMaxUsersInProgress( 1, "CHECKPOINT.*" );

			//no more a/s here
			Map.AxisASTable = {};
			Map.AlliesASTable = {};
		}
		else if ( Map.WallStatus && !Map.DoorStatus ) //wall destroyed, door intact
		{
			SetAvailableMapGoals( TEAM.AXIS, true, "DEFEND_rWall.*" );
			SetAvailableMapGoals( TEAM.AXIS, true, Map.Mount_416);

			//shift a/s focus
			Map.AxisASTable = { "red_as1_p1", "red_as3_p1", };
			Map.AlliesASTable = { "blue_as3_p1", };
		}
		else if ( !Map.WallStatus && Map.DoorStatus ) //door destroyed, wall intact
		{
			SetAvailableMapGoals( TEAM.AXIS, true, "DEFEND_rDoor.*" );
			SetAvailableMapGoals( TEAM.AXIS, true, Map.Mount_892);
			SetAvailableMapGoals( TEAM.AXIS, true, Map.Mount_mg42_1);

			//shift a/s focus`
			Map.AxisASTable = { "red_as2_p1", };
			Map.AlliesASTable = { "blue_as1_p1", "blue_as2_p1", };
		}

		//set these if either has been destroyed
		if (!Map.StairwellStatus)
		{
			Util.EnableGoal( Map.Checkpoint_oldcityflag );
		}
		
		SetAvailableMapGoals( TEAM.AXIS, false, Map.Mount_uppermg);
		SetAvailableMapGoals( TEAM.AXIS, false, Map.Mount_t364);
		SetAvailableMapGoals( TEAM.AXIS, false, "DEFEND_rBeach.*" );
		SetAvailableMapGoals( TEAM.ALLIES, false, "ATTACK_bBeach.*" );
		
		Wp.SetWaypointFlag( "ladder", "closed", false );	// Open up the ladder
	},

 	Allies_Capture_Flag = function( trigger )
 	{
		if ( TestMap )
			{ return; }

		Map.FlagStatus = 2;

		//did humans wall boost?
		if ( Map.DoorStatus || Map.WallStatus )
		{
			Map.AlliesASTable = {}; 
		}
		
		Map.EvalArty();
		
		if(Map.DocStatus == false)
		{
			Map.AxisASTable = {"rTrenchAS_1", "rTrenchAS_2",};
		}
		Map.Airstrike.bridge.Enabled = true;
		SetGoalPriority( "CALL.*", 0.6 );
		SetGoalPriority( "ARTILLLERY.*", 0.6 );
		
		if (!Map.StairwellStatus)
		{
			SetAvailableMapGoals( TEAM.ALLIES, true, "ATTACK_bStairwell.*" );
		}

		Util.SetMaxUsersInProgress( 1, "CHECKPOINT.*" );	// Martin - 1 axis at a time go for it
		Wp.SetWaypointFlag( "pt_nav_towerjump", "closed", false );	// Open up the towerjump
 	},

 	Axis_Capture_Flag = function( trigger )
 	{
		if ( TestMap )
			{ return; }

		Map.FlagStatus = 1;
		Map.AxisASTable = {};
		Map.EvalArty();
		
		Map.Airstrike.bridge.Enabled = false;
		SetGoalPriority( "CALL.*", 1.2 );
		SetGoalPriority( "ARTILLLERY.*", 1.2 );
		
		Util.SetMaxUsersInProgress( 3, "CHECKPOINT.*" );	// Martin - But let 3 allies go for it.
 	},

 	documents_stolen = function( trigger )
 	{
		if ( TestMap )
			{ return; }

		if (!Map.DocStatus)
		{
			Map.DocStatus = true;
			
			Map.EvalArty();	//Martin - Lets stop spamming sooner
			
			// make sure they fully shift even if only one dyno goal is destroyed
			SetAvailableMapGoals( TEAM.AXIS, false, "SNIPE_rBeach.*" );
			SetAvailableMapGoals( TEAM.ALLIES, false, "SNIPE_bBeach.*" );
			SetAvailableMapGoals( TEAM.AXIS, false, Map.Mount_416);
			SetAvailableMapGoals( TEAM.AXIS, false, Map.Mount_892);
			SetAvailableMapGoals( TEAM.AXIS, false, Map.Mount_mg42_1);

			Util.DisableGoal(Map.Build_Allied_Command_Post);
			Util.DisableGoal(Map.Plant_Allied_Command_Post);
			Util.DisableGoal(Map.Build_Axis_Command_Post);
			Util.DisableGoal(Map.Plant_Axis_Command_Post);		

			SetAvailableMapGoals( TEAM.ALLIES, true, "ATTACK_bStairwell.*" );
			
			if (!Map.StairwellStatus)
			{
				SetAvailableMapGoals( TEAM.AXIS, false, Map.Checkpoint_oldcityflag );
			}
			
			SetAvailableMapGoals( TEAM.AXIS, false, "DEFEND.*" );
			SetAvailableMapGoals( TEAM.AXIS, true, "DEFEND_rWar.*" ); //make sure
			Map.AxisASTable = {};
			
			timeout = 0;
			while ( timeout <= 4 && Map.DocStatus == true )
			{
				timeout += 1;
				sleep(1);
			}
			
			if (Map.DocStatus == true)
			{
				SetAvailableMapGoals( TEAM.AXIS, false, "DEFEND_rWar.*" );
				SetAvailableMapGoals( TEAM.AXIS, true, "DEFEND_rUpper.*" );
			}
		}
		
 	},

	EvalArty = function()
	{		
		if ( !Map.DocStatus && Map.FlagStatus ==1 )
		{
			//SetAvailableMapGoals( TEAM.AXIS, true, "CALLARTILLERY_ubase_spot_axis_[2]" );		
			SetAvailableMapGoals( TEAM.AXIS, true, "ARTILLERY_S_rBeach.*" );
		}
		
		if ( (!Map.WallStatus || !Map.DoorStatus) && !Map.DocStatus && Map.FlagStatus == 1)
		{ 
			SetAvailableMapGoals( TEAM.ALLIES, true, "ARTILLERY_S_bBeach.*" );	
			SetAvailableMapGoals( TEAM.AXIS, false, "ARTILLERY_S_rFlag.*" );
		}

		if ( !Map.DocStatus && Map.FlagStatus == 2)
		{
			SetAvailableMapGoals( TEAM.ALLIES, true, "ARTILLERY_S_bTower.*" );
			//SetAvailableMapGoals( TEAM.ALLIES, true, "CALLARTILLERY_trenches_spot_allies" );	//Martin - This should be paththrough		
			//SetAvailableMapGoals( TEAM.ALLIES, false, "CALLARTILLERY_spot_beach_[12345678]");
			SetAvailableMapGoals( TEAM.ALLIES, false, "ARTILLERY_S_bBeach.*" );		
			//SetAvailableMapGoals( TEAM.AXIS, true, "CALLARTILLERY_ubase_spot_axis_[2]" );	
			SetAvailableMapGoals( TEAM.AXIS, true, "ARTILLERY_S_rFlag.*" );
			SetAvailableMapGoals( TEAM.AXIS, false, "ARTILLERY_S_rBeach.*" );
		}

		if ( Map.DocStatus )
		{
			//Util.DisableGoal( "CALLARTILLERY.*" );
			Util.DisableGoal( "ARTILLERY.*" );
		}	
	},
	
 	documents_returned = function( trigger )
 	{
		if ( TestMap )
			{ return; }

		Map.DocStatus = false;

		SetAvailableMapGoals( TEAM.AXIS, true, "DEFEND_rUpper.*");
		SetAvailableMapGoals( TEAM.AXIS, true, "DEFEND_rAlt.*" );
		SetAvailableMapGoals( TEAM.ALLIES, false, "ATTACK_bTransmit.*" );
		SetAvailableMapGoals( TEAM.AXIS, false, "DEFEND_rTransmit.*" );
		Util.DisableGoal("MOUNTMG42_transMg");
		
		Util.EnableGoal(Map.Build_Allied_Command_Post);
		Util.EnableGoal(Map.Plant_Allied_Command_Post);
		Util.EnableGoal(Map.Build_Axis_Command_Post);
		Util.EnableGoal(Map.Plant_Axis_Command_Post);	

		//set these back to default ( changed in the stairs triggers )
		SetGoalPriority( "DEFEND_rTransmit.*", 0.5 );
		if(Map.FlagStatus == 2)
		{
			Map.AxisASTable = {"rTrenchAS_1","rTrenchAS_2",};
		}
			
		Map.EvalArty();		
 	},

 	documents_secured = function( trigger )
 	{
		if ( TestMap )
			{ return; }
 	},

	door_planted = function( trigger )
	{
		if ( TestMap )
			{ return; }
		SetAvailableMapGoals( TEAM.AXIS, false, "DEFUSE_Seawall.*" );
	},
	
	door_defused = function( trigger )
	{
		if ( TestMap )
			{ return; }
	},

	breach_planted = function( trigger )
	{
		if ( TestMap )
			{ return; }
		SetAvailableMapGoals( TEAM.AXIS, false, "DEFUSE_Bunker_Door.*" );
	},
	
	breach_defused = function( trigger )
	{
		if ( TestMap )
			{ return; }
	},

	two_minute = function( trigger )
	{
		if ( TestMap )
			{ return; }

		SetAvailableMapGoals( TEAM.AXIS, true, Map.Flag_allied_gold );
	},
	
	Stairwell_Planted = function(trigger)
	{
		if ( TestMap )
			{ return; }
		
		// don't worry about defuse if the docs are taken
		if(Map.DocStatus)
		{
			Util.DisableGoal("DEFUSE_Stairwell_Door.*");
		}
	},
	
	Stairwell_Defused = function(trigger)
	{
		if ( TestMap )
			{ return; }
		
		
	},

	Stairwell_Destroyed = function(trigger)
	{
		if ( TestMap )
			{ return; }
			
		Map.StairwellStatus = true;
		Util.DisableGoal("DEFUSE_Stairwell_Door.*"); 
		Util.EnableGoal("ROUTE_back_stairs.*");
		
		SetAvailableMapGoals( TEAM.ALLIES, false, "ATTACK_bStairwell.*" );
		SetAvailableMapGoals( TEAM.ALLIES, true, Map.Flag_allied_gold );
		
		// flag gets removed when stairwell door is gone
		Util.DisableGoal("CHECKPOINT_oldcityflag");
		Util.RemoveGoal("CHECKPOINT_oldcityflag");
	},	
};

global OnMapLoad = function()
{
	Util.SetGoalPosition( 1489, 1142, 621, "PLANT_Seawall" );
	
	Util.AddUseWp("PLANT_Bunker_Door", "door1");
	Util.AddUseWp("PLANT_Bunker_Door", "door2");
	Util.AddUseWp("PLANT_Seawall", "breach1");
	Util.AddUseWp("PLANT_Seawall", "breach2");
	
	if ( TestMapOn )
		{ Util.AutoTestMap(); }
 
	OnTrigger( "Seawall Destroyed.", Map.Seawall_Destroyed );
	OnTrigger( "Bunker Door Destroyed.", Map.Bunker_Door_Destroyed );
 	OnTrigger( "allies_reclaims_oldcityflag", Map.Allies_Capture_Flag );
	OnTrigger( "allies_capture_oldcityflag", Map.Allies_Capture_Flag );
 	OnTrigger( "axis_reclaims_oldcityflag", Map.Axis_Capture_Flag );
	OnTrigger( "Allies have stolen The Secret Wodanfire  Documents!", Map.documents_stolen );
	OnTrigger( "Flag returned allied_gold!", Map.documents_returned );
	OnTrigger( "Planted at Bunker Door.", Map.door_planted );
	OnTrigger( "Defused at Bunker Door.", Map.door_defused );
	OnTrigger( "Planted at Seawall.", Map.breach_planted );
	OnTrigger( "Defused at Seawall.", Map.breach_defused );
	OnTrigger( "Allies transmitted the documents!", Map.documents_secured );
	OnTrigger( "two minute warning.", Map.two_minute );
	OnTrigger( "Planted at Stairwell Door.", Map.Stairwell_Planted );
	OnTrigger( "Defused at Stairwell Door.", Map.Stairwell_Defused );
	OnTrigger( "Stairwell Door Destroyed.", Map.Stairwell_Destroyed );
	
	//some triggers to help bots know when to aggressively defend warroom
	tOne = OnTriggerRegion(Vector3(3695,1483,896), 200, Map.BackStairsTrigger);
	
	tTower = OnTriggerRegion(AABB(2399,2431,1097,3264,2880,1225), Map.TowerTrigger);
	beachOne = OnTriggerRegion(AABB(1335.126,3732.338,591.125,1520.825,3968.875,724.981), Map.BeachTrigger);
	beachTwo = OnTriggerRegion(AABB(1597.714,1065.492,582.973,1816.115,1338.552,775.810), Map.BeachTrigger);

	SetMapGoalProperties( "ATTACK_.*", {MinCampTime=15, MaxCampTime=30});
	SetMapGoalProperties( "DEFEND_.*", {MinCampTime=20, MaxCampTime=40});
	SetMapGoalProperties( "ATTACK_bTransmit.*", {MinCampTime=5, MaxCampTime=10});
	SetMapGoalProperties( "DEFEND_rTransmit.*", {MinCampTime=5, MaxCampTime=10});
	SetMapGoalProperties( "PANZER_.*", {MinCampTime=30, MaxCampTime=60});
	SetMapGoalProperties( "FLAME_.*", {MinCampTime=30, MaxCampTime=60});
	SetMapGoalProperties( "VENOM_.*", {MinCampTime=30, MaxCampTime=60});
	SetMapGoalProperties( "MOUNT_.*", {MinCampTime=45, MaxCampTime=60});
	SetMapGoalProperties( "SNIPE_.*", {MinCampTime=60, MaxCampTime=90});
	ETUtil.SetPrimaryGoals(1.0);
	//SetGoalPriority( "DEFUSE_.*", 0.0, 0, CLASS.ENGINEER, true );	//Martin - Turned off via available goals when its planted
	ETUtil.LimitToClass("MOUNT.*", 0, CLASS.ENGINEER, CLASS.MEDIC);
	ETUtil.LimitToClass("PLANT_Axis_Command_Post", TEAM.ALLIES, CLASS.COVERTOPS);
	ETUtil.LimitToClass("PLANT_Allies_Command_Post", TEAM.AXIS, CLASS.COVERTOPS);

	Util.DisableGoal(".*", true); //all but routes
	Util.EnableGoal("CAPPOINT_transmitter");
	Util.DisableGoal("ROUTE_back_stairs.*");
	SetAvailableMapGoals( TEAM.ALLIES, true, "ATTACK_bBeach.*" );
	SetAvailableMapGoals( TEAM.ALLIES, true, "SNIPE_bBeach.*" );
	SetAvailableMapGoals( TEAM.ALLIES, true, "PLANT_Seawall" );
	SetAvailableMapGoals( TEAM.ALLIES, true, "PLANT_Bunker_Door" );

	SetAvailableMapGoals( TEAM.AXIS, true, Map.Mount_uppermg);
	SetAvailableMapGoals( TEAM.AXIS, true, Map.Mount_t364);
	SetAvailableMapGoals( TEAM.AXIS, true, "DEFEND_rBeach.*" );
	SetAvailableMapGoals( TEAM.AXIS, true, "SNIPE_rBeach.*" );
	SetAvailableMapGoals( TEAM.AXIS, true, Map.Build_Axis_Command_Post );

	// *** Artillery
	//SetAvailableMapGoals( TEAM.AXIS, true, "CALLARTILLERY_ubase_spot_axis" );
	//SetAvailableMapGoals( TEAM.AXIS, true, "CALLARTILLERY_spot_steps" );

	// Now some targets...
	SetAvailableMapGoals( TEAM.ALLIES, true, "ARTILLERY_S_bBeach.*" );
	SetAvailableMapGoals( TEAM.AXIS, true, "ARTILLERY_S_rBeach.*" );
	// *** End Arty

	SetGoalPriority( "CALL.*", 1.2 );
	SetGoalPriority( "ARTILLERY.*", 1.2 );
	SetGoalPriority( "CHECKPOINT.*", 0.9 );
	SetGoalPriority( "DEFEND_rAlt.*", 0.45 );
	
	Wp.SetWaypointFlag( "ladder", "closed", true );	// close up the ladder
	//Wp.SetWaypointFlag( "pt_nav_towerjump", "closed", true );	// close up the towerjump

	Util.SetMaxUsersInProgress( 1, "MOUNT.*" );
	Util.SetMaxUsersInProgress( 1, "SNIPE.*" );

	//copy the wall AS goal tables to the AS goal table to make them active
	Map.AxisASTable = Map.AxisASWall;
	Map.AlliesASTable = Map.AlliesASWall;

	// Default Status'
	Map.FlagStatus = 0; //nobody owns it
	Map.DocStatus = false; //at home
	Map.DoorStatus = false; //intact
	Map.WallStatus = false; //intact

	MapRoutes =
	{
		FLAG_allied_gold =
		{
			ROUTE_bunkerspawn =
			{
				ROUTE_lbunker =
				{
					ROUTE_ubunker =
					{
						ROUTE_ubase_stairs = 
						{
							ROUTE_back_stairs =
							{
								ROUTE_duct1 =
								{
									ROUTE_duct2 = {},
									ROUTE_duct3 = {},
								},
								ROUTE_back_stairs2 = { Weight = 3, },
							},
						},
					},
				},
				ROUTE_ubase =
				{
					ROUTE_back_stairs =
					{
						ROUTE_duct1 =
						{
							ROUTE_duct2 = {},
							ROUTE_duct3 = {},
						},
						ROUTE_back_stairs2 = { Weight = 3, },
					},
				},
				ROUTE_ubase_stairs = 
				{
					ROUTE_back_stairs =
					{
						ROUTE_duct1 =
						{
							ROUTE_duct2 = {},
							ROUTE_duct3 = {},
						},
						ROUTE_back_stairs2 = { Weight = 3, },
					},
				},
			},

		},
		CAPPOINT_Transmitter =
		{
			ROUTE_docgrab =
			{
				ROUTE_back_stairs = 
				{ 
					ROUTE_back_stairs3 = 
					{
						ROUTE_breach = {},
						ROUTE_ubase_stairs = 
						{
							ROUTE_breach = {},
						},
					}, 
				},
			},
		},
		ATTACK_bTransmit1 = 
		{
			ROUTE_bunkerspawn =
			{
				ROUTE_lbunker =
				{
					ROUTE_ubunker =
					{
						ROUTE_ubase_stairs = {},
					},
				},
				ROUTE_ubase =
				{
					ROUTE_back_stairs = {},
				},
				ROUTE_ubase_stairs = {},
			},
			ROUTE_beachspawn =
			{
				ROUTE_lbunker =
				{
					ROUTE_ubunker =
					{
						ROUTE_ubase_stairs = {},
					},
				},
				ROUTE_ubase =
				{
					ROUTE_back_stairs = {},
				},
				ROUTE_ubase_stairs = {},
			},
			ROUTE_docgrab =
			{
				ROUTE_back_stairs = { ROUTE_back_stairs3 = {}, },
			},
		},
		CHECKPOINT_oldcityflag =
		{
			ROUTE_rspawn =
			{
				ROUTE_reclaim1 = {},
			},
		},
		PLANT_Stairwell_Door =
		{
			ROUTE_bunkerspawn =
			{
				ROUTE_lbunker = { ROUTE_ubunker = { ROUTE_ubase_stairs = {}, }, },
				ROUTE_ubase = {},
				ROUTE_ubase_stairs = {},
			},
		},
	};

	MapRoutes.FLAG_allied_gold.ROUTE_beachspawn = MapRoutes.FLAG_allied_gold.ROUTE_bunkerspawn;
	MapRoutes.ATTACK_bTransmit2 = MapRoutes.ATTACK_bTransmit1;
	MapRoutes.ATTACK_bTransmit3 = MapRoutes.ATTACK_bTransmit1;
	MapRoutes.ATTACK_bTransmit4 = MapRoutes.ATTACK_bTransmit1;
	MapRoutes.ATTACK_bTransmit5 = MapRoutes.ATTACK_bTransmit1;
	MapRoutes.ATTACK_bTransmit6 = MapRoutes.ATTACK_bTransmit1;
	MapRoutes.ATTACK_bStairwell1 = MapRoutes.PLANT_Stairwell_Door;
	MapRoutes.ATTACK_bStairwell2 = MapRoutes.PLANT_Stairwell_Door;
	MapRoutes.ATTACK_bStairwell3 = MapRoutes.PLANT_Stairwell_Door;
	MapRoutes.ATTACK_bStairwell4 = MapRoutes.PLANT_Stairwell_Door;
	MapRoutes.ATTACK_bStairwell5 = MapRoutes.PLANT_Stairwell_Door;
	MapRoutes.ATTACK_bStairwell6 = MapRoutes.PLANT_Stairwell_Door;
	
	Util.Routes(MapRoutes);
	Util.MapDebugPrint( "OnMapLoad" );
};

global OnBotJoin = function( bot )
{
	bot.MaxViewDistance = 2500;
	bot.TargetBreakableDist = 100.0;

	//default spawn
	bot.ChangeSpawnPoint( 0 );
};
