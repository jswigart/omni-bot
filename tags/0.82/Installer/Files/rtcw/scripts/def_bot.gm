// Default RTCW Bot Profile

// MemorySpan is how long it takes(in seconds) for a bot to consider his memory of someone or something
// 'out of date' and not considered for targeting and such
this.MemorySpan = 2.0;

// AimPersistance is how long the bot will aim in the direction of a target after the target has gone out of view.
// This is useful for keeping the bot aiming toward the target in the event of brief obstructions of their view.
this.AimPersistance = 2.0;


// These 3 values are aim properties. Care must be taken when tweaking aim properties, since
// improper values can produce aim oscillations and hurt the bots combat abilities.
this.MaxTurnSpeed = 720.0; // degree's / second
this.AimStiffness = 75.0;
this.AimDamping = 10.0;

// default max view distance. map scripts can override this
this.MaxViewDistance = 4500;

// optionally set a fixed skill level for this bot
// this will ensure that any global difficulty changes will not effect it
// default difficulty levels are between 1 and 6 with 1 being the easiest
// this.ProfileSkill = 3;

// optionally set a moveskill for the bot. this will effect how they react when in combat (i.e. strafing and crouching)
// setting this will over-ride and value set in goal_combatmovement
// 0 - off, 1 - easy, 2 - medium, 3 - hard, 4 - random
// this.moveskill = 3;

//////////////////////////////////////////////////////////////////////////
// Utility Callbacks

this.SelectClass = function()
{
	sleep( 1 );
	return null;
};

this.SelectTeam = function()
{
	return null;
};

//////////////////////////////////////////////////////////////////////////

this.ClassPrimaryWeaponChoice = function()
{
	if ( this.GetClass() == CLASS.SOLDIER ) {
		wpns =
		{
			WEAPON.MAUSER,
			WEAPON.PANZERFAUST,
			WEAPON.VENOM,
			WEAPON.FLAMETHROWER,
		};
		return wpns[ RandInt( 0, 3 ) ];
	}

	return null;
};

// remove?
this.ClassSecondaryWeaponChoice = function( bot )
{
	return null;
};

this.SelectWeapons = function()
{
	Primary = this.ClassPrimaryWeaponChoice();
	Secondary = this.ClassSecondaryWeaponChoice();

	if ( Primary ) {
		this.ChangePrimaryWeapon( Primary );
	}

	if ( Secondary ) {
		this.ChangeSecondaryWeapon( Secondary );
	}
};
